      SUBROUTINE tce_r4ac_offset(l_a_offset,k_a_offset,size,iref)
C     $Id: tce_t4_offset.F 19706 2010-10-29 17:52:31Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     t ( p3 p4 p5 p6 h1 h2 h7 h8 )_t
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
#include "tce_main.fh"
#include "tce_mrcc.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p3b
      INTEGER p4b
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER h2b
      INTEGER h7b
      INTEGER h8b
      integer iref
      length = 0
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO p5b = p4b,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h7b = h2b,noab
      DO h8b = h7b,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)
     &+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-
     &1)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieo
     &r(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+h7b-1),int_mb(k_sym+h8b-1)
     &))))))) .eq. irrep_t) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1
     &)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+i
     &nt_mb(k_spin+h2b-1)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1).ne.1
     &6)) THEN
      IF ((log_mb(k_active_tmpm(iref)+p3b-1).eqv..true.).and.
     1  (log_mb(k_active_tmpm(iref)+p4b-1).eqv..true.).and.
     1  (log_mb(k_active_tmpm(iref)+p5b-1).eqv..true.).and.
     1  (log_mb(k_active_tmpm(iref)+p6b-1).eqv..true.).and.
     1  (log_mb(k_active_tmpm(iref)+h1b-1).eqv..true.).and.
     1  (log_mb(k_active_tmpm(iref)+h2b-1).eqv..true.).and.
     1  (log_mb(k_active_tmpm(iref)+h8b-1).eqv..true.).and.
     1  (log_mb(k_active_tmpm(iref)+h7b-1).eqv..true.)) then
      length = length + 1
      END IF
      END IF
      END IF
      endif
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'tce_t4_offset',l_a_offset,
     1k_a_offset)) CALL ERRQUIT('tce_t4_offset',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      DO p5b = p4b,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h7b = h2b,noab
      DO h8b = h7b,noab
      IF (int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1)
     &+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-
     &1)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)) THEN
      IF (ieor(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb(
     &k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieo
     &r(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+h7b-1),int_mb(k_sym+h8b-1)
     &))))))) .eq. irrep_t) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1
     &)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+i
     &nt_mb(k_spin+h2b-1)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1).ne.1
     &6)) THEN
      IF ((log_mb(k_active_tmpm(iref)+p3b-1).eqv..true.).and.
     1  (log_mb(k_active_tmpm(iref)+p4b-1).eqv..true.).and.
     1  (log_mb(k_active_tmpm(iref)+p5b-1).eqv..true.).and.
     1  (log_mb(k_active_tmpm(iref)+p6b-1).eqv..true.).and.
     1  (log_mb(k_active_tmpm(iref)+h1b-1).eqv..true.).and.
     1  (log_mb(k_active_tmpm(iref)+h2b-1).eqv..true.).and.
     1  (log_mb(k_active_tmpm(iref)+h8b-1).eqv..true.).and.
     1  (log_mb(k_active_tmpm(iref)+h7b-1).eqv..true.)) then
      addr = addr + 1
      int_mb(k_a_offset+addr) = h8b - 1 + noab * (h7b - 1 + noab * (h2b
     &- 1 + noab * (h1b - 1 + noab * (p6b - noab - 1 + nvab * (p5b - noa
     &b - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab - 1)))))))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1) * int_
     &mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_range+h1b-1)
     &* int_mb(k_range+h2b-1) * int_mb(k_range+h7b-1) * int_mb(k_range+h
     &8b-1)
      END IF
      END IF
      END IF
      endif
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
