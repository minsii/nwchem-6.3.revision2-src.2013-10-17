      SUBROUTINE ccsdtq_lambda1_20_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda1_20_4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p15 p17 p18 h13 h14 h16 )_ft + = -1/3 * Sum ( p3 ) * t ( p3 p15 p18 h13 h14 h16 )_t * i2 ( p17 p3 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p15b
      INTEGER p18b
      INTEGER p17b
      INTEGER h13b
      INTEGER h14b
      INTEGER h16b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p3b
      INTEGER p15b_1
      INTEGER p18b_1
      INTEGER p3b_1
      INTEGER h13b_1
      INTEGER h14b_1
      INTEGER h16b_1
      INTEGER p17b_2
      INTEGER p3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO p15b = noab+1,noab+nvab
      DO p18b = p15b,noab+nvab
      DO p17b = noab+1,noab+nvab
      DO h13b = 1,noab
      DO h14b = h13b,noab
      DO h16b = h14b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p15b-1)+int_mb(k_spin+p17b
     &-1)+int_mb(k_spin+p18b-1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h16b-1).ne.12)) THEN
      IF (int_mb(k_spin+p15b-1)+int_mb(k_spin+p17b-1)+int_mb(k_spin+p18b
     &-1) .eq. int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1)+int_mb(k_spin
     &+h16b-1)) THEN
      IF (ieor(int_mb(k_sym+p15b-1),ieor(int_mb(k_sym+p17b-1),ieor(int_m
     &b(k_sym+p18b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+h14b-1
     &),int_mb(k_sym+h16b-1)))))) .eq. ieor(irrep_f,irrep_t)) THEN
      dimc = int_mb(k_range+p15b-1) * int_mb(k_range+p17b-1) * int_mb(k_
     &range+p18b-1) * int_mb(k_range+h13b-1) * int_mb(k_range+h14b-1) * 
     &int_mb(k_range+h16b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_20_4',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p3b = noab+1,noab+nvab
      IF (int_mb(k_spin+p15b-1)+int_mb(k_spin+p18b-1)+int_mb(k_spin+p3b-
     &1) .eq. int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1)+int_mb(k_spin+
     &h16b-1)) THEN
      IF (ieor(int_mb(k_sym+p15b-1),ieor(int_mb(k_sym+p18b-1),ieor(int_m
     &b(k_sym+p3b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+h14b-1)
     &,int_mb(k_sym+h16b-1)))))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_6(p15b,p18b,p3b,h13b,h14b,h16b,p15b_1,p18b_1,p
     &3b_1,h13b_1,h14b_1,h16b_1)
      CALL TCE_RESTRICTED_2(p17b,p3b,p17b_2,p3b_2)
      dim_common = int_mb(k_range+p3b-1)
      dima_sort = int_mb(k_range+p15b-1) * int_mb(k_range+p18b-1) * int_
     &mb(k_range+h13b-1) * int_mb(k_range+h14b-1) * int_mb(k_range+h16b-
     &1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p17b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_20_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda1_20_4',2,MA_ERR)
      IF ((p3b .le. p15b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h16b_
     &1 - 1 + noab * (h14b_1 - 1 + noab * (h13b_1 - 1 + noab * (p18b_1 -
     & noab - 1 + nvab * (p15b_1 - noab - 1 + nvab * (p3b_1 - noab - 1))
     &)))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p15b-1),int_mb(k_range+p18b-1),int_mb(k_range+h13b
     &-1),int_mb(k_range+h14b-1),int_mb(k_range+h16b-1),6,5,4,3,2,1,1.0d
     &0)
      END IF
      IF ((p15b .lt. p3b) .and. (p3b .le. p18b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h16b_
     &1 - 1 + noab * (h14b_1 - 1 + noab * (h13b_1 - 1 + noab * (p18b_1 -
     & noab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p15b_1 - noab - 1))
     &)))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p15b-1
     &),int_mb(k_range+p3b-1),int_mb(k_range+p18b-1),int_mb(k_range+h13b
     &-1),int_mb(k_range+h14b-1),int_mb(k_range+h16b-1),6,5,4,3,1,2,-1.0
     &d0)
      END IF
      IF ((p18b .lt. p3b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h16b_
     &1 - 1 + noab * (h14b_1 - 1 + noab * (h13b_1 - 1 + noab * (p3b_1 - 
     &noab - 1 + nvab * (p18b_1 - noab - 1 + nvab * (p15b_1 - noab - 1))
     &)))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p15b-1
     &),int_mb(k_range+p18b-1),int_mb(k_range+p3b-1),int_mb(k_range+h13b
     &-1),int_mb(k_range+h14b-1),int_mb(k_range+h16b-1),6,5,4,2,1,3,1.0d
     &0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda1_20_4',3,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_20_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda1_20_4',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p17b_2 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p17b-1
     &),int_mb(k_range+p3b-1),1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda1_20_4',6,M
     &A_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda1_20_4
     &',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda1_20_4
     &',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda1_20_4',9,MA_ERR)
      IF ((p15b .le. p17b) .and. (p17b .le. p18b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p17b-1
     &),int_mb(k_range+h16b-1),int_mb(k_range+h14b-1),int_mb(k_range+h13
     &b-1),int_mb(k_range+p18b-1),int_mb(k_range+p15b-1),6,1,5,4,3,2,-1.
     &0d0/9.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h16b 
     &- 1 + noab * (h14b - 1 + noab * (h13b - 1 + noab * (p18b - noab - 
     &1 + nvab * (p17b - noab - 1 + nvab * (p15b - noab - 1)))))))
      END IF
      IF ((p17b .le. p15b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p17b-1
     &),int_mb(k_range+h16b-1),int_mb(k_range+h14b-1),int_mb(k_range+h13
     &b-1),int_mb(k_range+p18b-1),int_mb(k_range+p15b-1),1,6,5,4,3,2,1.0
     &d0/9.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h16b 
     &- 1 + noab * (h14b - 1 + noab * (h13b - 1 + noab * (p18b - noab - 
     &1 + nvab * (p15b - noab - 1 + nvab * (p17b - noab - 1)))))))
      END IF
      IF ((p18b .le. p17b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p17b-1
     &),int_mb(k_range+h16b-1),int_mb(k_range+h14b-1),int_mb(k_range+h13
     &b-1),int_mb(k_range+p18b-1),int_mb(k_range+p15b-1),6,5,1,4,3,2,1.0
     &d0/9.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h16b 
     &- 1 + noab * (h14b - 1 + noab * (h13b - 1 + noab * (p17b - noab - 
     &1 + nvab * (p18b - noab - 1 + nvab * (p15b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda1_20_4',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_20_4
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
