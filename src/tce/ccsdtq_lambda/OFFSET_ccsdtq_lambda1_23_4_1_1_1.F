      SUBROUTINE OFFSET_ccsdtq_lambda1_23_4_1_1_1(l_a_offset,k_a_offset,
     &size)
C     $Id: OFFSET_ccsdtq_lambda1_23_4_1_1_1.F 19700 2010-10-29 17:11:57Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i4 ( h5 h6 h9 h12 p1 p3 p7 p8 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h5b
      INTEGER h6b
      INTEGER h9b
      INTEGER h12b
      INTEGER p1b
      INTEGER p3b
      INTEGER p7b
      INTEGER p8b
      length = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h9b = h6b,noab
      DO h12b = h9b,noab
      DO p1b = noab+1,noab+nvab
      DO p3b = noab+1,noab+nvab
      DO p7b = p3b,noab+nvab
      DO p8b = p7b,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h9b-1)
     &+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p3b
     &-1)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h9b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+p1b-1),ie
     &or(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p7b-1),int_mb(k_sym+p8b-1
     &)))))))) .eq. irrep_y) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+p1b-1)+
     &int_mb(k_spin+p3b-1)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).ne.
     &16)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdtq_lambda1_23_4_1_1_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h9b = h6b,noab
      DO h12b = h9b,noab
      DO p1b = noab+1,noab+nvab
      DO p3b = noab+1,noab+nvab
      DO p7b = p3b,noab+nvab
      DO p8b = p7b,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h9b-1)
     &+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p3b
     &-1)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h9b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+p1b-1),ie
     &or(int_mb(k_sym+p3b-1),ieor(int_mb(k_sym+p7b-1),int_mb(k_sym+p8b-1
     &)))))))) .eq. irrep_y) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+p1b-1)+
     &int_mb(k_spin+p3b-1)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1).ne.
     &16)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p8b - noab - 1 + nvab * (p7b - noab - 1 
     &+ nvab * (p3b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h12b -
     & 1 + noab * (h9b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+h9b-1) * int_mb(k_range+h12b-1) * int_mb(k_range+p1b-1)
     & * int_mb(k_range+p3b-1) * int_mb(k_range+p7b-1) * int_mb(k_range+
     &p8b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
