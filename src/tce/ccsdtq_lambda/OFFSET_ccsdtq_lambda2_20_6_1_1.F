      SUBROUTINE OFFSET_ccsdtq_lambda2_20_6_1_1(l_a_offset,k_a_offset,si
     &ze)
C     $Id: OFFSET_ccsdtq_lambda2_20_6_1_1.F 19700 2010-10-29 17:11:57Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h3 h4 h7 h11 p5 p6 p9 p10 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h3b
      INTEGER h4b
      INTEGER h7b
      INTEGER h11b
      INTEGER p5b
      INTEGER p6b
      INTEGER p9b
      INTEGER p10b
      length = 0
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO h7b = 1,noab
      DO h11b = h7b,noab
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO p9b = p6b,noab+nvab
      DO p10b = p9b,noab+nvab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b
     &-1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+p5b-1),ie
     &or(int_mb(k_sym+p6b-1),ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+p10b-
     &1)))))))) .eq. irrep_y) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+p5b-1)+
     &int_mb(k_spin+p6b-1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1).ne
     &.16)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdtq_lambda2_20_6_1_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h3b = 1,noab
      DO h4b = h3b,noab
      DO h7b = 1,noab
      DO h11b = h7b,noab
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO p9b = p6b,noab+nvab
      DO p10b = p9b,noab+nvab
      IF (int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b
     &-1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h3b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+p5b-1),ie
     &or(int_mb(k_sym+p6b-1),ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+p10b-
     &1)))))))) .eq. irrep_y) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+p5b-1)+
     &int_mb(k_spin+p6b-1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1).ne
     &.16)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p10b - noab - 1 + nvab * (p9b - noab - 1
     & + nvab * (p6b - noab - 1 + nvab * (p5b - noab - 1 + nvab * (h11b 
     &- 1 + noab * (h7b - 1 + noab * (h4b - 1 + noab * (h3b - 1)))))))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1) * int_
     &mb(k_range+h7b-1) * int_mb(k_range+h11b-1) * int_mb(k_range+p5b-1)
     & * int_mb(k_range+p6b-1) * int_mb(k_range+p9b-1) * int_mb(k_range+
     &p10b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
