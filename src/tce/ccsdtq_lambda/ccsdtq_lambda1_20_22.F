      SUBROUTINE ccsdtq_lambda1_20_22(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdtq_lambda1_20_22.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p15 p17 p18 h13 h14 h16 )_vttt + = -1/6 * Sum ( h11 h12 ) * t ( p15 p17 p18 h11 h12 h14 )_t * i2 ( h11 h12 h13 h16 )_vtt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p15b
      INTEGER p17b
      INTEGER p18b
      INTEGER h14b
      INTEGER h13b
      INTEGER h16b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h11b
      INTEGER h12b
      INTEGER p15b_1
      INTEGER p17b_1
      INTEGER p18b_1
      INTEGER h14b_1
      INTEGER h11b_1
      INTEGER h12b_1
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER h13b_2
      INTEGER h16b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO p15b = noab+1,noab+nvab
      DO p17b = p15b,noab+nvab
      DO p18b = p17b,noab+nvab
      DO h14b = 1,noab
      DO h13b = 1,noab
      DO h16b = h13b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p15b-1)+int_mb(k_spin+p17b
     &-1)+int_mb(k_spin+p18b-1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h16b-1).ne.12)) THEN
      IF (int_mb(k_spin+p15b-1)+int_mb(k_spin+p17b-1)+int_mb(k_spin+p18b
     &-1) .eq. int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1)+int_mb(k_spin
     &+h16b-1)) THEN
      IF (ieor(int_mb(k_sym+p15b-1),ieor(int_mb(k_sym+p17b-1),ieor(int_m
     &b(k_sym+p18b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+h14b-1
     &),int_mb(k_sym+h16b-1)))))) .eq. ieor(irrep_v,ieor(irrep_t,ieor(ir
     &rep_t,irrep_t)))) THEN
      dimc = int_mb(k_range+p15b-1) * int_mb(k_range+p17b-1) * int_mb(k_
     &range+p18b-1) * int_mb(k_range+h13b-1) * int_mb(k_range+h14b-1) * 
     &int_mb(k_range+h16b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_20_22',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h11b = 1,noab
      DO h12b = h11b,noab
      IF (int_mb(k_spin+p15b-1)+int_mb(k_spin+p17b-1)+int_mb(k_spin+p18b
     &-1) .eq. int_mb(k_spin+h14b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin
     &+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p15b-1),ieor(int_mb(k_sym+p17b-1),ieor(int_m
     &b(k_sym+p18b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_mb(k_sym+h11b-1
     &),int_mb(k_sym+h12b-1)))))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_6(p15b,p17b,p18b,h14b,h11b,h12b,p15b_1,p17b_1,
     &p18b_1,h14b_1,h11b_1,h12b_1)
      CALL TCE_RESTRICTED_4(h11b,h12b,h13b,h16b,h11b_2,h12b_2,h13b_2,h16
     &b_2)
      dim_common = int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p15b-1) * int_mb(k_range+p17b-1) * int_
     &mb(k_range+p18b-1) * int_mb(k_range+h14b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h13b-1) * int_mb(k_range+h16b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_20_22',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda1_20_22',2,MA_ERR)
      IF ((h12b .le. h14b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h14b_
     &1 - 1 + noab * (h12b_1 - 1 + noab * (h11b_1 - 1 + noab * (p18b_1 -
     & noab - 1 + nvab * (p17b_1 - noab - 1 + nvab * (p15b_1 - noab - 1)
     &))))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p15b-1
     &),int_mb(k_range+p17b-1),int_mb(k_range+p18b-1),int_mb(k_range+h11
     &b-1),int_mb(k_range+h12b-1),int_mb(k_range+h14b-1),6,3,2,1,5,4,1.0
     &d0)
      END IF
      IF ((h11b .le. h14b) .and. (h14b .lt. h12b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h14b_1 - 1 + noab * (h11b_1 - 1 + noab * (p18b_1 -
     & noab - 1 + nvab * (p17b_1 - noab - 1 + nvab * (p15b_1 - noab - 1)
     &))))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p15b-1
     &),int_mb(k_range+p17b-1),int_mb(k_range+p18b-1),int_mb(k_range+h11
     &b-1),int_mb(k_range+h14b-1),int_mb(k_range+h12b-1),5,3,2,1,6,4,-1.
     &0d0)
      END IF
      IF ((h14b .lt. h11b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h11b_1 - 1 + noab * (h14b_1 - 1 + noab * (p18b_1 -
     & noab - 1 + nvab * (p17b_1 - noab - 1 + nvab * (p15b_1 - noab - 1)
     &))))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p15b-1
     &),int_mb(k_range+p17b-1),int_mb(k_range+p18b-1),int_mb(k_range+h14
     &b-1),int_mb(k_range+h11b-1),int_mb(k_range+h12b-1),4,3,2,1,6,5,1.0
     &d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda1_20_22',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_20_22',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda1_20_22',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(h16b_
     &2 - 1 + noab * (h13b_2 - 1 + noab * (h12b_2 - 1 + noab * (h11b_2 -
     & 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+h13b-1),int_mb(k_range+h16
     &b-1),4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda1_20_22',6,
     &MA_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h11b .eq. h12b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda1_20_2
     &2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda1_20_2
     &2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda1_20_22',9,MA_ERR)
      IF ((h13b .le. h14b) .and. (h14b .le. h16b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h16b-1
     &),int_mb(k_range+h13b-1),int_mb(k_range+h14b-1),int_mb(k_range+p18
     &b-1),int_mb(k_range+p17b-1),int_mb(k_range+p15b-1),6,5,4,2,3,1,-1.
     &0d0/18.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h16b 
     &- 1 + noab * (h14b - 1 + noab * (h13b - 1 + noab * (p18b - noab - 
     &1 + nvab * (p17b - noab - 1 + nvab * (p15b - noab - 1)))))))
      END IF
      IF ((h14b .le. h13b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h16b-1
     &),int_mb(k_range+h13b-1),int_mb(k_range+h14b-1),int_mb(k_range+p18
     &b-1),int_mb(k_range+p17b-1),int_mb(k_range+p15b-1),6,5,4,3,2,1,1.0
     &d0/18.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h16b 
     &- 1 + noab * (h13b - 1 + noab * (h14b - 1 + noab * (p18b - noab - 
     &1 + nvab * (p17b - noab - 1 + nvab * (p15b - noab - 1)))))))
      END IF
      IF ((h16b .le. h14b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h16b-1
     &),int_mb(k_range+h13b-1),int_mb(k_range+h14b-1),int_mb(k_range+p18
     &b-1),int_mb(k_range+p17b-1),int_mb(k_range+p15b-1),6,5,4,2,1,3,1.0
     &d0/18.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h14b 
     &- 1 + noab * (h16b - 1 + noab * (h13b - 1 + noab * (p18b - noab - 
     &1 + nvab * (p17b - noab - 1 + nvab * (p15b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda1_20_22',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_20_2
     &2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
