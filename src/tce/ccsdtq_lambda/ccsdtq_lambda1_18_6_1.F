      SUBROUTINE ccsdtq_lambda1_18_6_1(d_a,k_a_offset,d_b,k_b_offset,d_c
     &,k_c_offset)
C     $Id: ccsdtq_lambda1_18_6_1.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h2 h10 p14 h12 h13 h15 )_vt + = -1 * Sum ( p4 p5 ) * t ( p4 p5 p14 h12 h13 h15 )_t * v ( h2 h10 p4 p5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h2b
      INTEGER p14b
      INTEGER h10b
      INTEGER h12b
      INTEGER h13b
      INTEGER h15b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p4b
      INTEGER p5b
      INTEGER p14b_1
      INTEGER p4b_1
      INTEGER p5b_1
      INTEGER h12b_1
      INTEGER h13b_1
      INTEGER h15b_1
      INTEGER h2b_2
      INTEGER h10b_2
      INTEGER p4b_2
      INTEGER p5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h2b = 1,noab
      DO p14b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO h12b = 1,noab
      DO h13b = h12b,noab
      DO h15b = h13b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+p14b-1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-
     &1)+int_mb(k_spin+h15b-1).ne.12)) THEN
      IF (int_mb(k_spin+h2b-1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+p14b-
     &1) .eq. int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+
     &h15b-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+p14b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h13b-1)
     &,int_mb(k_sym+h15b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      dimc = int_mb(k_range+h2b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+p14b-1) * int_mb(k_range+h12b-1) * int_mb(k_range+h13b-1) * i
     &nt_mb(k_range+h15b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_18_6_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p4b = noab+1,noab+nvab
      DO p5b = p4b,noab+nvab
      IF (int_mb(k_spin+p14b-1)+int_mb(k_spin+p4b-1)+int_mb(k_spin+p5b-1
     &) .eq. int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h
     &15b-1)) THEN
      IF (ieor(int_mb(k_sym+p14b-1),ieor(int_mb(k_sym+p4b-1),ieor(int_mb
     &(k_sym+p5b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h13b-1),
     &int_mb(k_sym+h15b-1)))))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_6(p14b,p4b,p5b,h12b,h13b,h15b,p14b_1,p4b_1,p5b
     &_1,h12b_1,h13b_1,h15b_1)
      CALL TCE_RESTRICTED_4(h2b,h10b,p4b,p5b,h2b_2,h10b_2,p4b_2,p5b_2)
      dim_common = int_mb(k_range+p4b-1) * int_mb(k_range+p5b-1)
      dima_sort = int_mb(k_range+p14b-1) * int_mb(k_range+h12b-1) * int_
     &mb(k_range+h13b-1) * int_mb(k_range+h15b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h2b-1) * int_mb(k_range+h10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_18_6_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda1_18_6_1',2,MA_ERR)
      IF ((p5b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h15b_
     &1 - 1 + noab * (h13b_1 - 1 + noab * (h12b_1 - 1 + noab * (p14b_1 -
     & noab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))
     &))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+p14b-1),int_mb(k_range+h12b-
     &1),int_mb(k_range+h13b-1),int_mb(k_range+h15b-1),6,5,4,3,2,1,1.0d0
     &)
      END IF
      IF ((p4b .le. p14b) .and. (p14b .lt. p5b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h15b_
     &1 - 1 + noab * (h13b_1 - 1 + noab * (h12b_1 - 1 + noab * (p5b_1 - 
     &noab - 1 + nvab * (p14b_1 - noab - 1 + nvab * (p4b_1 - noab - 1)))
     &))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p14b-1),int_mb(k_range+p5b-1),int_mb(k_range+h12b-
     &1),int_mb(k_range+h13b-1),int_mb(k_range+h15b-1),6,5,4,2,3,1,-1.0d
     &0)
      END IF
      IF ((p14b .lt. p4b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h15b_
     &1 - 1 + noab * (h13b_1 - 1 + noab * (h12b_1 - 1 + noab * (p5b_1 - 
     &noab - 1 + nvab * (p4b_1 - noab - 1 + nvab * (p14b_1 - noab - 1)))
     &))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p14b-1
     &),int_mb(k_range+p4b-1),int_mb(k_range+p5b-1),int_mb(k_range+h12b-
     &1),int_mb(k_range+h13b-1),int_mb(k_range+h15b-1),6,5,4,1,3,2,1.0d0
     &)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda1_18_6_1',3
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_18_6_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda1_18_6_1',5,MA_ERR)
      IF ((h10b .lt. h2b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nvab) * (h2b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+p4b-1),int_mb(k_range+p5b-1
     &),1,2,4,3,-1.0d0)
      END IF
      IF ((h2b .le. h10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p5b_2
     & - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h2b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p4b-1),int_mb(k_range+p5b-1
     &),2,1,4,3,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda1_18_6_1',6
     &,MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p4b .eq. p5b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda1_18_6
     &_1',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda1_18_6
     &_1',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda1_18_6_1',9,MA_ERR)
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h10b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h15b-1),int_mb(k_range+h13b
     &-1),int_mb(k_range+h12b-1),int_mb(k_range+p14b-1),2,1,6,5,4,3,-1.0
     &d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h15b 
     &- 1 + noab * (h13b - 1 + noab * (h12b - 1 + noab * (p14b - noab - 
     &1 + nvab * (h10b - 1 + noab * (h2b - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda1_18_6_1',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_18_6
     &_1',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
