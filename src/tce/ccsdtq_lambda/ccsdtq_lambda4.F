      SUBROUTINE ccsdtq_lambda4(d_f1,d_i0,d_t1,d_t2,d_v2,d_y2,d_y3,d_y4,
     &k_f1_offset,k_i0_offset,k_t1_offset,k_t2_offset,k_v2_offset,k_y2_o
     &ffset,k_y3_offset,k_y4_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = 1 * P( 36 ) * y ( h5 h6 p1 p2 )_y * v ( h7 h8 p3 p4 )_v
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yf + = 1 * P( 16 ) * y ( h5 h6 h7 p1 p2 p3 )_y * i1 ( h8 p4 )_f
C         i1 ( h5 p1 )_f + = 1 * f ( h5 p1 )_f
C         i1 ( h5 p1 )_vt + = 1 * Sum ( h10 p9 ) * t ( p9 h10 )_t * v ( h5 h10 p1 p9 )_v
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = -1 * P( 24 ) * Sum ( h11 ) * y ( h5 h6 h11 p1 p2 p3 )_y * i1 ( h7 h8 h11 p4 )_v
C         i1 ( h5 h6 h11 p1 )_v + = 1 * v ( h5 h6 h11 p1 )_v
C         i1 ( h5 h6 h11 p1 )_vt + = -1 * Sum ( p9 ) * t ( p9 h11 )_t * v ( h5 h6 p1 p9 )_v
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = -1 * P( 24 ) * Sum ( p9 ) * y ( h5 h6 h7 p1 p2 p9 )_y * v ( h8 p9 p3 p4 )_v
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yf + = -1 * P( 4 ) * Sum ( h13 ) * y ( h5 h6 h7 h13 p1 p2 p3 p4 )_y * i1 ( h8 h13 )_f
C         i1 ( h5 h13 )_f + = 1 * f ( h5 h13 )_f
C         i1 ( h5 h13 )_ft + = 1 * Sum ( p9 ) * t ( p9 h13 )_t * i2 ( h5 p9 )_f
C             i2 ( h5 p9 )_f + = 1 * f ( h5 p9 )_f
C             i2 ( h5 p9 )_vt + = 1 * Sum ( h12 p11 ) * t ( p11 h12 )_t * v ( h5 h12 p9 p11 )_v
C         i1 ( h5 h13 )_vt + = 1 * Sum ( h10 p9 ) * t ( p9 h10 )_t * v ( h5 h10 h13 p9 )_v
C         i1 ( h5 h13 )_vt + = -1/2 * Sum ( h12 p9 p10 ) * t ( p9 p10 h12 h13 )_t * v ( h5 h12 p9 p10 )_v
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yf + = 1 * P( 4 ) * Sum ( p14 ) * y ( h5 h6 h7 h8 p1 p2 p3 p14 )_y * i1 ( p14 p4 )_f
C         i1 ( p14 p1 )_f + = 1 * f ( p14 p1 )_f
C         i1 ( p14 p1 )_vt + = -1 * Sum ( h10 p9 ) * t ( p9 h10 )_t * v ( h10 p14 p1 p9 )_v
C         i1 ( p14 p1 )_vt + = 1/2 * Sum ( h11 h12 p10 ) * t ( p10 p14 h11 h12 )_t * v ( h11 h12 p1 p10 )_v
C         i1 ( p14 p1 )_vtt + = -1 * Sum ( h10 ) * t ( p14 h10 )_t * i2 ( h10 p1 )_vt
C             i2 ( h10 p1 )_vt + = 1 * Sum ( h12 p11 ) * t ( p11 h12 )_t * v ( h10 h12 p1 p11 )_v
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = 1/2 * P( 6 ) * Sum ( h14 h13 ) * y ( h5 h6 h13 h14 p1 p2 p3 p4 )_y * i1 ( h7 h8 h13 h14 )_v
C         i1 ( h5 h6 h13 h14 )_v + = 1 * v ( h5 h6 h13 h14 )_v
C         i1 ( h5 h6 h13 h14 )_vt + = -2 * Sum ( p9 ) * t ( p9 h13 )_t * i2 ( h5 h6 h14 p9 )_v
C             i2 ( h5 h6 h14 p9 )_v + = 1 * v ( h5 h6 h14 p9 )_v
C             i2 ( h5 h6 h14 p9 )_vt + = -1/2 * Sum ( p11 ) * t ( p11 h14 )_t * v ( h5 h6 p9 p11 )_v
C         i1 ( h5 h6 h13 h14 )_vt + = 1/2 * Sum ( p9 p10 ) * t ( p9 p10 h13 h14 )_t * v ( h5 h6 p9 p10 )_v
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = -1 * P( 16 ) * Sum ( h14 p11 ) * y ( h5 h6 h7 h14 p1 p2 p3 p11 )_y * i1 ( h8 p11 h14 p4 )_v
C         i1 ( h5 p11 h14 p1 )_v + = 1 * v ( h5 p11 h14 p1 )_v
C         i1 ( h5 p11 h14 p1 )_vt + = -1 * Sum ( p9 ) * t ( p9 h14 )_t * v ( h5 p11 p1 p9 )_v
C         i1 ( h5 p11 h14 p1 )_vt + = -1 * Sum ( h12 p10 ) * t ( p10 p11 h12 h14 )_t * v ( h5 h12 p1 p10 )_v
C         i1 ( h5 p11 h14 p1 )_vtt + = 1 * Sum ( h12 ) * t ( p11 h12 )_t * i2 ( h5 h12 h14 p1 )_vt
C             i2 ( h5 h12 h14 p1 )_vt + = 1 * Sum ( p9 ) * t ( p9 h14 )_t * v ( h5 h12 p1 p9 )_v
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = 1/2 * P( 6 ) * Sum ( p10 p9 ) * y ( h5 h6 h7 h8 p1 p2 p9 p10 )_y * v ( p9 p10 p3 p4 )_v
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytv + = 1 * P( 24 ) * Sum ( h13 ) * i1 ( h5 h6 h7 h13 p1 p2 )_yt * v ( h8 h13 p3 p4 )_v
C         i1 ( h5 h6 h7 h13 p1 p2 )_yt + = 1 * Sum ( p9 ) * t ( p9 h13 )_t * y ( h5 h6 h7 p1 p2 p9 )_y
C         i1 ( h5 h6 h7 h13 p1 p2 )_yt + = -1/2 * Sum ( h11 p10 p9 ) * t ( p9 p10 h11 h13 )_t * y ( h5 h6 h7 h11 p1 p2 p9 p10 )_y
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytf + = 1 * P( 4 ) * Sum ( h9 ) * i1 ( h5 h6 h7 h8 h9 p1 p2 p3 )_yt * f ( h9 p4 )_f
C         i1 ( h5 h6 h7 h8 h9 p1 p2 p3 )_yt + = -1 * Sum ( p10 ) * t ( p10 h9 )_t * y ( h5 h6 h7 h8 p1 p2 p3 p10 )_y
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytv + = 1 * P( 16 ) * Sum ( h11 h10 ) * i1 ( h5 h6 h7 h11 h10 p1 p2 p3 )_yt * v ( h8 h10 h11 p4 )_v
C         i1 ( h5 h6 h7 h11 h10 p1 p2 p3 )_yt + = 1 * Sum ( p9 ) * t ( p9 h10 )_t * y ( h5 h6 h7 h11 p1 p2 p3 p9 )_y
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytv + = 1 * P( 6 ) * Sum ( h10 p11 ) * i1 ( h5 h6 h7 h8 h10 p1 p2 p11 )_yt * v ( h10 p11 p3 p4 )_v
C         i1 ( h5 h6 h7 h8 h10 p1 p2 p11 )_yt + = -1 * Sum ( p9 ) * t ( p9 h10 )_t * y ( h5 h6 h7 h8 p1 p2 p9 p11 )_y
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytv + = -1/2 * P( 24 ) * Sum ( p10 ) * i1 ( h5 h6 p10 p1 p2 p3 )_yt * v ( h7 h8 p4 p10 )_v
C         i1 ( h5 h6 p10 p1 p2 p3 )_yt + = 1 * Sum ( h12 h11 p9 ) * t ( p9 p10 h11 h12 )_t * y ( h5 h6 h11 h12 p1 p2 p3 p9 )_y
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytv + = 1/4 * P( 6 ) * Sum ( h13 h12 ) * i1 ( h5 h6 h7 h8 h12 h13 p1 p2 )_yt * v ( h12 h13 p3 p4 )_v
C         i1 ( h5 h6 h7 h8 h12 h13 p1 p2 )_yt + = 1 * Sum ( p10 p9 ) * t ( p9 p10 h12 h13 )_t * y ( h5 h6 h7 h8 p1 p2 p9 p10 )_y
C         i1 ( h5 h6 h7 h8 h12 h13 p1 p2 )_ytt + = 2 * Sum ( p9 ) * t ( p9 h13 )_t * i2 ( h5 h6 h7 h8 h12 p1 p2 p9 )_yt
C             i2 ( h5 h6 h7 h8 h12 p1 p2 p9 )_yt + = -1 * Sum ( p11 ) * t ( p11 h12 )_t * y ( h5 h6 h7 h8 p1 p2 p9 p11 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "util.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_i0
      INTEGER k_i0_offset
      INTEGER d_y2
      INTEGER k_y2_offset
      INTEGER d_v2
      INTEGER k_v2_offset
      INTEGER d_y3
      INTEGER k_y3_offset
      INTEGER d_i1
      INTEGER k_i1_offset
      INTEGER d_y4
      INTEGER k_y4_offset
      INTEGER d_f1
      INTEGER k_f1_offset
      INTEGER l_i1_offset
      INTEGER size_i1
      INTEGER d_t1
      INTEGER k_t1_offset
      INTEGER d_i2
      INTEGER k_i2_offset
      INTEGER d_t2
      INTEGER k_t2_offset
      INTEGER l_i2_offset
      INTEGER size_i2
      CHARACTER*255 filename
c#if !defined(CCSDTQ)
c      CALL ERRQUIT('CCSDTQ not compiled',0,CAPMIS_ERR)
c      RETURN
c      END
c#else
      CALL ccsdtq_lambda4_1(d_y2,k_y2_offset,d_v2,k_v2_offset,d_i0,k_i0_
     &offset)
      CALL OFFSET_ccsdtq_lambda4_2_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ccsdtq_lambda4_2_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_2_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL ccsdtq_lambda4_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_2(d_y3,k_y3_offset,d_i1,k_i1_offset,d_i0,k_i0_
     &offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL OFFSET_ccsdtq_lambda4_3_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ccsdtq_lambda4_3_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_3_1(d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL ccsdtq_lambda4_3_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_3(d_y3,k_y3_offset,d_i1,k_i1_offset,d_i0,k_i0_
     &offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL ccsdtq_lambda4_4(d_y3,k_y3_offset,d_v2,k_v2_offset,d_i0,k_i0_
     &offset)
      CALL OFFSET_ccsdtq_lambda4_5_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ccsdtq_lambda4_5_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_5_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL OFFSET_ccsdtq_lambda4_5_2_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('ccsdtq_lambda4_5_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ccsdtq_lambda4_5_2_1(d_f1,k_f1_offset,d_i2,k_i2_offset)
      CALL ccsdtq_lambda4_5_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k
     &_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ccsdtq_lambda4_5_2(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i
     &1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL ccsdtq_lambda4_5_3(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL ccsdtq_lambda4_5_4(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_5(d_y4,k_y4_offset,d_i1,k_i1_offset,d_i0,k_i0_
     &offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL OFFSET_ccsdtq_lambda4_6_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ccsdtq_lambda4_6_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_6_1(d_f1,k_f1_offset,d_i1,k_i1_offset)
      CALL ccsdtq_lambda4_6_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL ccsdtq_lambda4_6_3(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL OFFSET_ccsdtq_lambda4_6_4_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('ccsdtq_lambda4_6_4_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ccsdtq_lambda4_6_4_1(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k
     &_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ccsdtq_lambda4_6_4(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i
     &1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_6(d_y4,k_y4_offset,d_i1,k_i1_offset,d_i0,k_i0_
     &offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL OFFSET_ccsdtq_lambda4_7_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ccsdtq_lambda4_7_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_7_1(d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL OFFSET_ccsdtq_lambda4_7_2_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('ccsdtq_lambda4_7_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ccsdtq_lambda4_7_2_1(d_v2,k_v2_offset,d_i2,k_i2_offset)
      CALL ccsdtq_lambda4_7_2_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k
     &_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ccsdtq_lambda4_7_2(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i
     &1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL ccsdtq_lambda4_7_3(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_7(d_y4,k_y4_offset,d_i1,k_i1_offset,d_i0,k_i0_
     &offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL OFFSET_ccsdtq_lambda4_8_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ccsdtq_lambda4_8_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_8_1(d_v2,k_v2_offset,d_i1,k_i1_offset)
      CALL ccsdtq_lambda4_8_2(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL ccsdtq_lambda4_8_3(d_t2,k_t2_offset,d_v2,k_v2_offset,d_i1,k_i
     &1_offset)
      CALL OFFSET_ccsdtq_lambda4_8_4_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('ccsdtq_lambda4_8_4_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ccsdtq_lambda4_8_4_1(d_t1,k_t1_offset,d_v2,k_v2_offset,d_i2,k
     &_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ccsdtq_lambda4_8_4(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_i
     &1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_8(d_y4,k_y4_offset,d_i1,k_i1_offset,d_i0,k_i0_
     &offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL ccsdtq_lambda4_9(d_y4,k_y4_offset,d_v2,k_v2_offset,d_i0,k_i0_
     &offset)
      CALL OFFSET_ccsdtq_lambda4_10_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ccsdtq_lambda4_10_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_10_1(d_t1,k_t1_offset,d_y3,k_y3_offset,d_i1,k_
     &i1_offset)
      CALL ccsdtq_lambda4_10_2(d_t2,k_t2_offset,d_y4,k_y4_offset,d_i1,k_
     &i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_10(d_i1,k_i1_offset,d_v2,k_v2_offset,d_i0,k_i0
     &_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL OFFSET_ccsdtq_lambda4_11_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ccsdtq_lambda4_11_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_11_1(d_t1,k_t1_offset,d_y4,k_y4_offset,d_i1,k_
     &i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_11(d_i1,k_i1_offset,d_f1,k_f1_offset,d_i0,k_i0
     &_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL OFFSET_ccsdtq_lambda4_12_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ccsdtq_lambda4_12_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_12_1(d_t1,k_t1_offset,d_y4,k_y4_offset,d_i1,k_
     &i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_12(d_i1,k_i1_offset,d_v2,k_v2_offset,d_i0,k_i0
     &_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL OFFSET_ccsdtq_lambda4_13_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ccsdtq_lambda4_13_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_13_1(d_t1,k_t1_offset,d_y4,k_y4_offset,d_i1,k_
     &i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_13(d_i1,k_i1_offset,d_v2,k_v2_offset,d_i0,k_i0
     &_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL OFFSET_ccsdtq_lambda4_14_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ccsdtq_lambda4_14_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_14_1(d_t2,k_t2_offset,d_y4,k_y4_offset,d_i1,k_
     &i1_offset)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_14(d_i1,k_i1_offset,d_v2,k_v2_offset,d_i0,k_i0
     &_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL OFFSET_ccsdtq_lambda4_15_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('ccsdtq_lambda4_15_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL ccsdtq_lambda4_15_1(d_t2,k_t2_offset,d_y4,k_y4_offset,d_i1,k_
     &i1_offset)
      CALL OFFSET_ccsdtq_lambda4_15_2_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('ccsdtq_lambda4_15_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL ccsdtq_lambda4_15_2_1(d_t1,k_t1_offset,d_y4,k_y4_offset,d_i2,
     &k_i2_offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL ccsdtq_lambda4_15_2(d_t1,k_t1_offset,d_i2,k_i2_offset,d_i1,k_
     &i1_offset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL ccsdtq_lambda4_15(d_i1,k_i1_offset,d_v2,k_v2_offset,d_i0,k_i0
     &_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('ccsdtq_lambda4',
     &-1,MA_ERR)
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = 1 * P( 36 ) * y ( h5 h6 p1 p2 )_y * v ( h7 h8 p3 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,irrep_v)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * int_m
     &b(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+p2b-1)))) .eq. irrep_y) THEN
      CALL TCE_RESTRICTED_4(h5b,h6b,p1b,p2b,h5b_1,h6b_1,p1b_1,p2b_1)
      CALL TCE_RESTRICTED_4(h7b,h8b,p3b,p4b,h7b_2,h8b_2,p3b_2,p4b_2)
      dim_common = 1
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+p1b-1) * int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb
     &(k_range+p3b-1) * int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p2b_1
     & - noab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (h6b_1 - 1 + noab 
     &* (h5b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1)
     &,4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_1',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_1',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p4b_2
     & - 1 + (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p4b-1)
     &,4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_1',6,MA_E
     &RR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_1',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_1',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_1',9,MA_ERR)
      IF ((h6b .le. h7b) .and. (p2b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,4,3,6,5,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h7b) .and. (p3b .le. p1b) .and. (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,4,3,2,6,5,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h7b) .and. (p3b .le. p1b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,4,3,2,6,1,5,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h7b) .and. (p1b .le. p3b) .and. (p3b .le. p2b) .and.
     & (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,4,3,6,2,5,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h7b) .and. (p1b .le. p3b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,4,3,6,2,1,5,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h7b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,4,3,2,1,6,5,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p2b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),4,8,7,3,6,5,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p3b .le. p1b) .and.
     & (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),4,8,7,3,2,6,5,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p3b .le. p1b) .and.
     & (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),4,8,7,3,2,6,1,5,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p1b .le. p3b) .and.
     & (p3b .le. p2b) .and. (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),4,8,7,3,6,2,5,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p1b .le. p3b) .and.
     & (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),4,8,7,3,6,2,1,5,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),4,8,7,3,2,1,6,5,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p2b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),4,8,3,7,6,5,2,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p3b .le. p1b) .and. (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),4,8,3,7,2,6,5,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p3b .le. p1b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),4,8,3,7,2,6,1,5,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p1b .le. p3b) .and. (p3b .le. p2b) .and. (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),4,8,3,7,6,2,5,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p1b .le. p3b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),4,8,3,7,6,2,1,5,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),4,8,3,7,2,1,6,5,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p2b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,4,7,3,6,5,2,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p3b .le. p1b) .and. (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,4,7,3,2,6,5,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p3b .le. p1b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,4,7,3,2,6,1,5,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p1b .le. p3b) .and. (p3b .le. p2b) .and. (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,4,7,3,6,2,5,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p1b .le. p3b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,4,7,3,6,2,1,5,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,4,7,3,2,1,6,5,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p2b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,4,3,7,6,5,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p3b .le. p1b) .and.
     & (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,4,3,7,2,6,5,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p3b .le. p1b) .and.
     & (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,4,3,7,2,6,1,5,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p1b .le. p3b) .and.
     & (p3b .le. p2b) .and. (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,4,3,7,6,2,5,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p1b .le. p3b) .and.
     & (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,4,3,7,6,2,1,5,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,4,3,7,2,1,6,5,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p2b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),4,3,8,7,6,5,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 + noab * (h
     &8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p3b .le. p1b) .and. (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),4,3,8,7,2,6,5,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 + noab * (h
     &8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p3b .le. p1b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),4,3,8,7,2,6,1,5,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 + noab * (h
     &8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p1b .le. p3b) .and. (p3b .le. p2b) .and.
     & (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),4,3,8,7,6,2,5,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 + noab * (h
     &8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p1b .le. p3b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),4,3,8,7,6,2,1,5,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 + noab * (h
     &8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),4,3,8,7,2,1,6,5,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 + noab * (h
     &8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_1',10,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_1',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yf + = 1 * P( 16 ) * y ( h5 h6 h7 p1 p2 p3 )_y * i1 ( h8 p4 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER h8b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO p4b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,irrep_f)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * int_m
     &b(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     & .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int
     &_mb(k_sym+p3b-1)))))) .eq. irrep_y) THEN
      CALL TCE_RESTRICTED_6(h5b,h6b,h7b,p1b,p2b,p3b,h5b_1,h6b_1,h7b_1,p1
     &b_1,p2b_1,p3b_1)
      CALL TCE_RESTRICTED_2(h8b,p4b,h8b_2,p4b_2)
      dim_common = 1
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1) * 
     &int_mb(k_range+p3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p3b_1
     & - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 
     &+ nvab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p3b-1),6,5,4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_2',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_2',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p4b_2
     & - noab - 1 + nvab * (h8b_2 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p4b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_2',6,MA_E
     &RR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_2',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_2',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_2',9,MA_ERR)
      IF ((h7b .le. h8b) .and. (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,2,5,4,3,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,2,1,5,4,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,2,5,1,4,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,2,5,4,1,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),2,8,7,6,5,4,3,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),2,8,7,6,1,5,4,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),2,8,7,6,5,1,4,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),2,8,7,6,5,4,1,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,2,7,6,5,4,3,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,2,7,6,1,5,4,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,2,7,6,5,1,4,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p2b .le. p4b) .and.
     & (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,2,7,6,5,4,1,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,2,6,5,4,3,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,2,6,1,5,4,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,2,6,5,1,4,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p2b .le. p4b) .and.
     & (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,2,6,5,4,1,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_2',10,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_2',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 p1 )_f + = 1 * f ( h5 p1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER p1b
      INTEGER dimc
      INTEGER h5b_1
      INTEGER p1b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+p1b-1)) .eq. irrep_f) TH
     &EN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+p1b-1)
      CALL TCE_RESTRICTED_2(h5b,p1b,h5b_1,p1b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+p1b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_2_1',1,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p1b_1
     & - 1 + (noab+nvab) * (h5b_1 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+p1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_2_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_2_1',3,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h5b-1),2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p1b -
     & noab - 1 + nvab * (h5b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_2_1',4,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_2_1'
     &,5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_2_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 p1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h5b
      INTEGER p1b
      length = 0
      DO h5b = 1,noab
      DO p1b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+p1b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p1b-1
     &).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdtq_lambda4_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h5b = 1,noab
      DO p1b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+p1b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p1b-1
     &).ne.4)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p1b - noab - 1 + nvab * (h5b - 1)
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+p1b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 p1 )_vt + = 1 * Sum ( h10 p9 ) * t ( p9 h10 )_t * v ( h5 h10 p1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER p1b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER h10b
      INTEGER p9b_1
      INTEGER h10b_1
      INTEGER h5b_2
      INTEGER h10b_2
      INTEGER p1b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+p1b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      DO h10b = 1,noab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h10b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p9b,h10b,p9b_1,h10b_1)
      CALL TCE_RESTRICTED_4(h5b,h10b,p1b,p9b,h5b_2,h10b_2,p1b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+h10b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (p9b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h10b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_2_2',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_2_2',5,MA_ERR)
      IF ((h10b .lt. h5b) .and. (p9b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p1b_2
     & - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1
     &),4,2,1,3,1.0d0)
      END IF
      IF ((h10b .lt. h5b) .and. (p1b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab
     &+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1
     &),3,2,1,4,-1.0d0)
      END IF
      IF ((h5b .le. h10b) .and. (p9b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p1b_2
     & - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1
     &),4,1,2,3,-1.0d0)
      END IF
      IF ((h5b .le. h10b) .and. (p1b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (noa
     &b+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1
     &),3,1,2,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_2_2',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_2_2'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_2_2'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_2_2',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h5b-1),2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p1b -
     & noab - 1 + nvab * (h5b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_2_2',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_2_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = -1 * P( 24 ) * Sum ( h11 ) * y ( h5 h6 h11 p1 p2 p3 )_y * i1 ( h7 h8 h11 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h11b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h11b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p4b_2
      INTEGER h11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO p4b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,irrep_v)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * int_m
     &b(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h11b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h11b-1
     &) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h11b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),in
     &t_mb(k_sym+p3b-1)))))) .eq. irrep_y) THEN
      CALL TCE_RESTRICTED_6(h5b,h6b,h11b,p1b,p2b,p3b,h5b_1,h6b_1,h11b_1,
     &p1b_1,p2b_1,p3b_1)
      CALL TCE_RESTRICTED_4(h7b,h8b,p4b,h11b,h7b_2,h8b_2,p4b_2,h11b_2)
      dim_common = int_mb(k_range+h11b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+p1b-1) * int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb
     &(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_3',2,MA_ERR)
      IF ((h11b .lt. h5b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p3b_1
     & - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 
     &+ nvab * (h6b_1 - 1 + noab * (h5b_1 - 1 + noab * (h11b_1 - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+p1b-1
     &),int_mb(k_range+p2b-1),int_mb(k_range+p3b-1),6,5,4,3,2,1,1.0d0)
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p3b_1
     & - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 
     &+ nvab * (h6b_1 - 1 + noab * (h11b_1 - 1 + noab * (h5b_1 - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h6b-1),int_mb(k_range+p1b-1
     &),int_mb(k_range+p2b-1),int_mb(k_range+p3b-1),6,5,4,3,1,2,-1.0d0)
      END IF
      IF ((h6b .le. h11b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p3b_1
     & - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 
     &+ nvab * (h11b_1 - 1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h11b-1),int_mb(k_range+p1b-1
     &),int_mb(k_range+p2b-1),int_mb(k_range+p3b-1),6,5,4,2,1,3,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_3',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_3',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(h11b_
     &2 - 1 + noab * (p4b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b
     &_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p4b-1),int_mb(k_range+h11b-1
     &),3,2,1,4,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_3',6,MA_E
     &RR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_3',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_3',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_3',9,MA_ERR)
      IF ((h6b .le. h7b) .and. (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,3,2,6,5,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h7b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,3,2,1,6,5,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h7b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,3,2,6,1,5,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h7b) .and. (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,3,2,6,5,1,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,7,2,6,5,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,7,2,1,6,5,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,7,2,6,1,5,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p2b .le. p4b) .and.
     & (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,7,2,6,5,1,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,2,7,6,5,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,2,7,1,6,5,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,2,7,6,1,5,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,2,7,6,5,1,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,7,2,6,5,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,7,2,1,6,5,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,7,2,6,1,5,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,7,2,6,5,1,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,2,7,6,5,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,2,7,1,6,5,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,2,7,6,1,5,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p2b .le. p4b) .and.
     & (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,2,7,6,5,1,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,2,8,7,6,5,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 + noab * (h
     &8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,2,8,7,1,6,5,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 + noab * (h
     &8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,2,8,7,6,1,5,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 + noab * (h
     &8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,2,8,7,6,5,1,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 + noab * (h
     &8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_3',10,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_3',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_3_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h11 p1 )_v + = 1 * v ( h5 h6 h11 p1 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER p1b
      INTEGER h11b
      INTEGER dimc
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER p1b_1
      INTEGER h11b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO p1b = noab+1,noab+nvab
      DO h11b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h11b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+h11b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+h11b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+p1b-1) * int_mb(k_range+h11b-1)
      CALL TCE_RESTRICTED_4(h5b,h6b,p1b,h11b,h5b_1,h6b_1,p1b_1,h11b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+p1b-1) * int_mb(k_range+h11b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_3_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_3_1',1,MA_ERR)
      IF ((h11b .le. p1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p1b_1
     & - 1 + (noab+nvab) * (h11b_1 - 1 + (noab+nvab) * (h6b_1 - 1 + (noa
     &b+nvab) * (h5b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h11b-1),int_mb(k_range+p1b-1
     &),3,4,2,1,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_3_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_3_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+h11b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1),int_mb(k_range+h5b-1
     &),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h11b 
     &- 1 + noab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_3_1',4,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_3_1'
     &,5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_3_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h11 p1 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h5b
      INTEGER h6b
      INTEGER p1b
      INTEGER h11b
      length = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO p1b = noab+1,noab+nvab
      DO h11b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &11b-1)+int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h11b-1),int_mb(k_sym+p1b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h11b-1)+int_mb(k_spin+p1b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdtq_lambda4_3_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO p1b = noab+1,noab+nvab
      DO h11b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &11b-1)+int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h11b-1),int_mb(k_sym+p1b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h11b-1)+int_mb(k_spin+p1b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h11b - 1 + noab * (p1b - noab - 1 + nvab
     & * (h6b - 1 + noab * (h5b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+p1b-1) * int_mb(k_range+h11b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_3_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h11 p1 )_vt + = -1 * Sum ( p9 ) * t ( p9 h11 )_t * v ( h5 h6 p1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER p1b
      INTEGER h11b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h11b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER p1b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO p1b = noab+1,noab+nvab
      DO h11b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h11b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+p
     &1b-1)+int_mb(k_spin+h11b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+p1b-1),int_mb(k_sym+h11b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+p1b-1) * int_mb(k_range+h11b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_3_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h11b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h11b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p9b,h11b,p9b_1,h11b_1)
      CALL TCE_RESTRICTED_4(h5b,h6b,p1b,p9b,h5b_2,h6b_2,p1b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h11b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_3_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_3_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h11b_
     &1 - 1 + noab * (p9b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h11b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_3_2',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_3_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_3_2',5,MA_ERR)
      IF ((p9b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p1b_2
     & - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab
     &+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1)
     &,4,2,1,3,-1.0d0)
      END IF
      IF ((p1b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noab
     &+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1)
     &,3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_3_2',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_3_2'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_3_2'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_3_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h5b-1),int_mb(k_range+h11b-1
     &),3,2,1,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h11b 
     &- 1 + noab * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_3_2',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_3_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = -1 * P( 24 ) * Sum ( p9 ) * y ( h5 h6 h7 p1 p2 p9 )_y * v ( h8 p9 p3 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p9b_1
      INTEGER h8b_2
      INTEGER p9b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,irrep_v)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * int_m
     &b(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_4',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     & .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p9b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int
     &_mb(k_sym+p9b-1)))))) .eq. irrep_y) THEN
      CALL TCE_RESTRICTED_6(h5b,h6b,h7b,p1b,p2b,p9b,h5b_1,h6b_1,h7b_1,p1
     &b_1,p2b_1,p9b_1)
      CALL TCE_RESTRICTED_4(h8b,p9b,p3b,p4b,h8b_2,p9b_2,p3b_2,p4b_2)
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+p3b-1) * int_mb
     &(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_4',2,MA_ERR)
      IF ((p9b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p2b_1
     & - noab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (p9b_1 - noab - 1 
     &+ nvab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),6,5,3,2,1,4,1.0d0)
      END IF
      IF ((p1b .le. p9b) .and. (p9b .lt. p2b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p2b_1
     & - noab - 1 + nvab * (p9b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 
     &+ nvab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p2b-1),6,4,3,2,1,5,-1.0d0)
      END IF
      IF ((p2b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p9b_1
     & - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 
     &+ nvab * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p9b-1),5,4,3,2,1,6,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_4',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_4',5,MA_ERR)
      IF ((h8b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p4b_2
     & - 1 + (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab
     &+nvab) * (h8b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p3b-1),int_mb(k_range+p4b-1)
     &,4,3,1,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_4',6,MA_E
     &RR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_4',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_4',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_4',9,MA_ERR)
      IF ((h7b .le. h8b) .and. (p2b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,3,5,4,2,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p3b .le. p1b) .and. (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,3,2,5,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p3b .le. p1b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,3,2,5,1,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p1b .le. p3b) .and. (p3b .le. p2b) .and.
     & (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,3,5,2,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p1b .le. p3b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,3,5,2,1,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,3,2,1,5,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p2b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,7,6,5,4,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p3b .le. p1b) .and. (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,7,6,2,5,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p3b .le. p1b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,7,6,2,5,1,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p1b .le. p3b) .and. (p3b .le. p2b) .and.
     & (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,7,6,5,2,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p1b .le. p3b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,7,6,5,2,1,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,7,6,2,1,5,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p2b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,7,6,5,4,2,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p3b .le. p1b) .and.
     & (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,7,6,2,5,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p3b .le. p1b) .and.
     & (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,7,6,2,5,1,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p1b .le. p3b) .and.
     & (p3b .le. p2b) .and. (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,7,6,5,2,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p1b .le. p3b) .and.
     & (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,7,6,5,2,1,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,7,6,2,1,5,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p2b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,3,6,5,4,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p3b .le. p1b) .and.
     & (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,3,6,2,5,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p3b .le. p1b) .and.
     & (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,3,6,2,5,1,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p1b .le. p3b) .and.
     & (p3b .le. p2b) .and. (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,3,6,5,2,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p1b .le. p3b) .and.
     & (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,3,6,5,2,1,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,3,6,2,1,5,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_4',10,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_4',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yf + = -1 * P( 4 ) * Sum ( h13 ) * y ( h5 h6 h7 h13 p1 p2 p3 p4 )_y * i1 ( h8 h13 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h13b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h13b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER h8b_2
      INTEGER h13b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,irrep_f)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * int_m
     &b(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h13b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h13b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b
     &-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+p1b-1),ie
     &or(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1
     &)))))))) .eq. irrep_y) THEN
      CALL TCE_RESTRICTED_8(h5b,h6b,h7b,h13b,p1b,p2b,p3b,p4b,h5b_1,h6b_1
     &,h7b_1,h13b_1,p1b_1,p2b_1,p3b_1,p4b_1)
      CALL TCE_RESTRICTED_2(h8b,h13b,h8b_2,h13b_2)
      dim_common = int_mb(k_range+h13b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1) * 
     &int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_5',2,MA_ERR)
      IF ((h13b .lt. h5b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p4b_1
     & - noab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 
     &+ nvab * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h6b_1 - 1
     & + noab * (h5b_1 - 1 + noab * (h13b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h13b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-1
     &),int_mb(k_range+p4b-1),8,7,6,5,4,3,2,1,-1.0d0)
      END IF
      IF ((h5b .le. h13b) .and. (h13b .lt. h6b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p4b_1
     & - noab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 
     &+ nvab * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h6b_1 - 1
     & + noab * (h13b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h13b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-1
     &),int_mb(k_range+p4b-1),8,7,6,5,4,3,1,2,1.0d0)
      END IF
      IF ((h6b .le. h13b) .and. (h13b .lt. h7b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p4b_1
     & - noab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 
     &+ nvab * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h13b_1 - 
     &1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h13b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-1
     &),int_mb(k_range+p4b-1),8,7,6,5,4,2,1,3,-1.0d0)
      END IF
      IF ((h7b .le. h13b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p4b_1
     & - noab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 
     &+ nvab * (p1b_1 - noab - 1 + nvab * (h13b_1 - 1 + noab * (h7b_1 - 
     &1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h13b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-1
     &),int_mb(k_range+p4b-1),8,7,6,5,3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_5',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_5',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(h13b_
     &2 - 1 + noab * (h8b_2 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h13b-1),1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_5',6,MA_E
     &RR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_5',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_5',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_5',9,MA_ERR)
      IF ((h7b .le. h8b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,1,5,4,3,2,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h8b .le. h5b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),1,8,7,6,5,4,3,2,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,1,7,6,5,4,3,2,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p4b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,1,6,5,4,3,2,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_5',10,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_5',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_5_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h13 )_f + = 1 * f ( h5 h13 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h13b
      INTEGER dimc
      INTEGER h5b_1
      INTEGER h13b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h13b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+h13b-1)) .eq. irrep_f) T
     &HEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h13b-1)
      CALL TCE_RESTRICTED_2(h5b,h13b,h5b_1,h13b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_1',1,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h13b_
     &1 - 1 + (noab+nvab) * (h5b_1 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h13b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_5_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_1',3,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+h13b-1
     &),int_mb(k_range+h5b-1),2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h13b 
     &- 1 + noab * (h5b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_5_1',4,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_1'
     &,5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_5_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h13 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h5b
      INTEGER h13b
      length = 0
      DO h5b = 1,noab
      DO h13b = 1,noab
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+h13b-1)) .eq. irrep_f) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h13b-
     &1).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdtq_lambda4_5_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h5b = 1,noab
      DO h13b = 1,noab
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+h13b-1)) .eq. irrep_f) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h13b-
     &1).ne.4)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h13b - 1 + noab * (h5b - 1)
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h13b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_5_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h13 )_ft + = 1 * Sum ( p9 ) * t ( p9 h13 )_t * i2 ( h5 p9 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h13b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h13b_1
      INTEGER h5b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h13b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+h13b-1)) .eq. ieor(irrep
     &_f,irrep_t)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h13b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h13b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p9b,h13b,p9b_1,h13b_1)
      CALL TCE_RESTRICTED_2(h5b,p9b,h5b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h13b_
     &1 - 1 + noab * (p9b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h13b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_5_2',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_2',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (h5b_2 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+p9b-1),1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_5_2',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_2'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_2'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_2',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h13b-1),1,2,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h13b 
     &- 1 + noab * (h5b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_5_2',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_5_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 p9 )_f + = 1 * f ( h5 p9 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER p9b
      INTEGER dimc
      INTEGER h5b_1
      INTEGER p9b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p9b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+p9b-1)) .eq. irrep_f) TH
     &EN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+p9b-1)
      CALL TCE_RESTRICTED_2(h5b,p9b,h5b_1,p9b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+p9b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_2_1',1,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p9b_1
     & - 1 + (noab+nvab) * (h5b_1 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+p9b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_5_2_1',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_2_1',3,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h5b-1),2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h5b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_5_2_1',4,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_2_
     &1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_5_2_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 p9 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h5b
      INTEGER p9b
      length = 0
      DO h5b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+p9b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p9b-1
     &).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdtq_lambda4_5_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h5b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+p9b-1)) .eq. irrep_f) TH
     &EN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p9b-1
     &).ne.4)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p9b - noab - 1 + nvab * (h5b - 1)
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+p9b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_5_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 p9 )_vt + = 1 * Sum ( h12 p11 ) * t ( p11 h12 )_t * v ( h5 h12 p9 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER p9b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p11b
      INTEGER h12b
      INTEGER p11b_1
      INTEGER h12b_1
      INTEGER h5b_2
      INTEGER h12b_2
      INTEGER p9b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p9b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+p9b-1)) .eq. ieor(irrep_
     &v,irrep_t)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+p9b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p11b = noab+1,noab+nvab
      DO h12b = 1,noab
      IF (int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),int_mb(k_sym+h12b-1)) .eq. irrep_t) 
     &THEN
      CALL TCE_RESTRICTED_2(p11b,h12b,p11b_1,h12b_1)
      CALL TCE_RESTRICTED_4(h5b,h12b,p9b,p11b,h5b_2,h12b_2,p9b_2,p11b_2)
      dim_common = int_mb(k_range+p11b-1) * int_mb(k_range+h12b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+p9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (p11b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p11b-1
     &),int_mb(k_range+h12b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_5_2_2',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_2_2',5,MA_ERR)
      IF ((h12b .lt. h5b) .and. (p11b .lt. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noa
     &b+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+p11b-1),int_mb(k_range+p9b-
     &1),4,2,1,3,1.0d0)
      END IF
      IF ((h12b .lt. h5b) .and. (p9b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noa
     &b+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+p9b-1),int_mb(k_range+p11b-
     &1),3,2,1,4,-1.0d0)
      END IF
      IF ((h5b .le. h12b) .and. (p11b .lt. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (no
     &ab+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h12b-1),int_mb(k_range+p11b-1),int_mb(k_range+p9b-
     &1),4,1,2,3,-1.0d0)
      END IF
      IF ((h5b .le. h12b) .and. (p9b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (no
     &ab+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h12b-1),int_mb(k_range+p9b-1),int_mb(k_range+p11b-
     &1),3,1,2,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_5_2_2',6,
     &MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_2_
     &2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_2_
     &2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_2_2',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h5b-1),2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h5b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_5_2_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_2_
     &2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_5_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h13 )_vt + = 1 * Sum ( h10 p9 ) * t ( p9 h10 )_t * v ( h5 h10 h13 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h13b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER h10b
      INTEGER p9b_1
      INTEGER h10b_1
      INTEGER h5b_2
      INTEGER h10b_2
      INTEGER h13b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h13b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+h13b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h13b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      DO h10b = 1,noab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h10b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p9b,h10b,p9b_1,h10b_1)
      CALL TCE_RESTRICTED_4(h5b,h10b,h13b,p9b,h5b_2,h10b_2,h13b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+h10b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h13b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_3',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (p9b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h10b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_5_3',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_3',5,MA_ERR)
      IF ((h10b .lt. h5b) .and. (h13b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (h13b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noa
     &b+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h13b-1),int_mb(k_range+p9b-
     &1),3,2,1,4,-1.0d0)
      END IF
      IF ((h5b .le. h10b) .and. (h13b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (h13b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (no
     &ab+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h13b-1),int_mb(k_range+p9b-
     &1),3,1,2,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_5_3',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_3'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_3'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_3',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h13b-1
     &),int_mb(k_range+h5b-1),2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h13b 
     &- 1 + noab * (h5b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_5_3',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_3'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_5_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h13 )_vt + = -1/2 * Sum ( h12 p9 p10 ) * t ( p9 p10 h12 h13 )_t * v ( h5 h12 p9 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h13b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER p10b
      INTEGER h12b
      INTEGER p9b_1
      INTEGER p10b_1
      INTEGER h13b_1
      INTEGER h12b_1
      INTEGER h5b_2
      INTEGER h12b_2
      INTEGER p9b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h13b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),int_mb(k_sym+h13b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h13b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_4',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      DO h12b = 1,noab
      IF (int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h13b-1)+int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h13b-1),int_mb(k_sym+h12b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p9b,p10b,h13b,h12b,p9b_1,p10b_1,h13b_1,h12b_
     &1)
      CALL TCE_RESTRICTED_4(h5b,h12b,p9b,p10b,h5b_2,h12b_2,p9b_2,p10b_2)
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+p10b-1) * int_
     &mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_4',2,MA_ERR)
      IF ((h12b .le. h13b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h13b_
     &1 - 1 + noab * (h12b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p
     &9b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+h12b-1),int_mb(k_range+h13b
     &-1),4,3,2,1,1.0d0)
      END IF
      IF ((h13b .lt. h12b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h13b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p
     &9b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+h13b-1),int_mb(k_range+h12b
     &-1),3,4,2,1,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_5_4',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_5_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_4',5,MA_ERR)
      IF ((h12b .lt. h5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noa
     &b+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+p9b-1),int_mb(k_range+p10b-
     &1),2,1,4,3,-1.0d0)
      END IF
      IF ((h5b .le. h12b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (no
     &ab+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h12b-1),int_mb(k_range+p9b-1),int_mb(k_range+p10b-
     &1),1,2,4,3,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_5_4',6,MA
     &_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p9b .eq. p10b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_4'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_4'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_5_4',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h13b-1),1,2,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h13b 
     &- 1 + noab * (h5b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_5_4',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_5_4'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_6(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yf + = 1 * P( 4 ) * Sum ( p14 ) * y ( h5 h6 h7 h8 p1 p2 p3 p14 )_y * i1 ( p14 p4 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p14b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER p14b_1
      INTEGER p14b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO p4b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,irrep_f)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * int_m
     &b(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p14b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p14b-1
     &)))))))) .eq. irrep_y) THEN
      CALL TCE_RESTRICTED_8(h5b,h6b,h7b,h8b,p1b,p2b,p3b,p14b,h5b_1,h6b_1
     &,h7b_1,h8b_1,p1b_1,p2b_1,p3b_1,p14b_1)
      CALL TCE_RESTRICTED_2(p14b,p4b,p14b_2,p4b_2)
      dim_common = int_mb(k_range+p14b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * 
     &int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_6',2,MA_ERR)
      IF ((p14b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p3b_1
     & - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 
     &+ nvab * (p14b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 
     &1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p14b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p3b-1),8,7,6,4,3,2,1,5,-1.0d0)
      END IF
      IF ((p1b .le. p14b) .and. (p14b .lt. p2b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p3b_1
     & - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p14b_1 - noab - 1
     & + nvab * (p1b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 
     &1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p14b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p3b-1),8,7,5,4,3,2,1,6,1.0d0)
      END IF
      IF ((p2b .le. p14b) .and. (p14b .lt. p3b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p3b_1
     & - noab - 1 + nvab * (p14b_1 - noab - 1 + nvab * (p2b_1 - noab - 1
     & + nvab * (p1b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 
     &1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p14b-1
     &),int_mb(k_range+p3b-1),8,6,5,4,3,2,1,7,-1.0d0)
      END IF
      IF ((p3b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p14b_
     &1 - noab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1
     & + nvab * (p1b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 
     &1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p14b-1),7,6,5,4,3,2,1,8,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_6',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_6',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p4b_2
     & - noab - 1 + nvab * (p14b_2 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p14b-1
     &),int_mb(k_range+p4b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_6',6,MA_E
     &RR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_6',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_6',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_6',9,MA_ERR)
      IF ((p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,1,4,3,2,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,4,1,3,2,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,4,3,1,2,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_6',10,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_6',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_6_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p14 p1 )_f + = 1 * f ( p14 p1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p14b
      INTEGER p1b
      INTEGER dimc
      INTEGER p14b_1
      INTEGER p1b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO p14b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p14b-1)+int_mb(k_spin+p1b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+p14b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p14b-1),int_mb(k_sym+p1b-1)) .eq. irrep_f) T
     &HEN
      dimc = int_mb(k_range+p14b-1) * int_mb(k_range+p1b-1)
      CALL TCE_RESTRICTED_2(p14b,p1b,p14b_1,p1b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+p14b-1) * int_mb(k_range+p1b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_1',1,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p1b_1
     & - 1 + (noab+nvab) * (p14b_1 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p14b-1
     &),int_mb(k_range+p1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_6_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_1',3,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p1b-1)
     &,int_mb(k_range+p14b-1),2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p1b -
     & noab - 1 + nvab * (p14b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_6_1',4,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_1'
     &,5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_6_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p14 p1 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p14b
      INTEGER p1b
      length = 0
      DO p14b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      IF (int_mb(k_spin+p14b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p14b-1),int_mb(k_sym+p1b-1)) .eq. irrep_f) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+p14b-1)+int_mb(k_spin+p1b-
     &1).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdtq_lambda4_6_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p14b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      IF (int_mb(k_spin+p14b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p14b-1),int_mb(k_sym+p1b-1)) .eq. irrep_f) T
     &HEN
      IF ((.not.restricted).or.(int_mb(k_spin+p14b-1)+int_mb(k_spin+p1b-
     &1).ne.4)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p1b - noab - 1 + nvab * (p14b - noab - 1
     &)
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p14b-1) * int_mb(k_range+p1b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_6_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p14 p1 )_vt + = -1 * Sum ( h10 p9 ) * t ( p9 h10 )_t * v ( h10 p14 p1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p14b
      INTEGER p1b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER h10b
      INTEGER p9b_1
      INTEGER h10b_1
      INTEGER p14b_2
      INTEGER h10b_2
      INTEGER p1b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO p14b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p14b-1)+int_mb(k_spin+p1b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+p14b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p14b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      dimc = int_mb(k_range+p14b-1) * int_mb(k_range+p1b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      DO h10b = 1,noab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h10b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p9b,h10b,p9b_1,h10b_1)
      CALL TCE_RESTRICTED_4(p14b,h10b,p1b,p9b,p14b_2,h10b_2,p1b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+h10b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p14b-1) * int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (p9b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h10b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_6_2',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_2',5,MA_ERR)
      IF ((h10b .le. p14b) .and. (p9b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p1b_2
     & - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (p14b_2 - 1 + (noa
     &b+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+p14b-1),int_mb(k_range+p9b-1),int_mb(k_range+p1b-
     &1),4,2,1,3,-1.0d0)
      END IF
      IF ((h10b .le. p14b) .and. (p1b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (p14b_2 - 1 + (noa
     &b+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+p14b-1),int_mb(k_range+p1b-1),int_mb(k_range+p9b-
     &1),3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_6_2',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_2'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_2'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_2',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p1b-1)
     &,int_mb(k_range+p14b-1),2,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p1b -
     & noab - 1 + nvab * (p14b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_6_2',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_6_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p14 p1 )_vt + = 1/2 * Sum ( h11 h12 p10 ) * t ( p10 p14 h11 h12 )_t * v ( h11 h12 p1 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p14b
      INTEGER p1b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p10b
      INTEGER h11b
      INTEGER h12b
      INTEGER p14b_1
      INTEGER p10b_1
      INTEGER h11b_1
      INTEGER h12b_1
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER p1b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO p14b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p14b-1)+int_mb(k_spin+p1b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+p14b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p14b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      dimc = int_mb(k_range+p14b-1) * int_mb(k_range+p1b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p10b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h12b = h11b,noab
      IF (int_mb(k_spin+p14b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin
     &+h11b-1)+int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p14b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_m
     &b(k_sym+h11b-1),int_mb(k_sym+h12b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p14b,p10b,h11b,h12b,p14b_1,p10b_1,h11b_1,h12
     &b_1)
      CALL TCE_RESTRICTED_4(h11b,h12b,p1b,p10b,h11b_2,h12b_2,p1b_2,p10b_
     &2)
      dim_common = int_mb(k_range+p10b-1) * int_mb(k_range+h11b-1) * int
     &_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p14b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_3',2,MA_ERR)
      IF ((p10b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h11b_1 - 1 + noab * (p14b_1 - noab - 1 + nvab * (p
     &10b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p14b-1),int_mb(k_range+h11b-1),int_mb(k_range+h12
     &b-1),2,4,3,1,1.0d0)
      END IF
      IF ((p14b .lt. p10b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h11b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p
     &14b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p14b-1
     &),int_mb(k_range+p10b-1),int_mb(k_range+h11b-1),int_mb(k_range+h12
     &b-1),1,4,3,2,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_6_3',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_3',5,MA_ERR)
      IF ((p10b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p1b_2
     & - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (no
     &ab+nvab) * (h11b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+p10b-1),int_mb(k_range+p1b
     &-1),4,2,1,3,-1.0d0)
      END IF
      IF ((p1b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (no
     &ab+nvab) * (h11b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+p1b-1),int_mb(k_range+p10b
     &-1),3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_6_3',6,MA
     &_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h11b .eq. h12b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_3'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_3'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_3',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p1b-1)
     &,int_mb(k_range+p14b-1),2,1,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p1b -
     & noab - 1 + nvab * (p14b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_6_3',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_3'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_6_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p14 p1 )_vtt + = -1 * Sum ( h10 ) * t ( p14 h10 )_t * i2 ( h10 p1 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p14b
      INTEGER p1b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h10b
      INTEGER p14b_1
      INTEGER h10b_1
      INTEGER h10b_2
      INTEGER p1b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO p14b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p14b-1)+int_mb(k_spin+p1b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+p14b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+p14b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep
     &_v,ieor(irrep_t,irrep_t))) THEN
      dimc = int_mb(k_range+p14b-1) * int_mb(k_range+p1b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6_4',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h10b = 1,noab
      IF (int_mb(k_spin+p14b-1) .eq. int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p14b-1),int_mb(k_sym+h10b-1)) .eq. irrep_t) 
     &THEN
      CALL TCE_RESTRICTED_2(p14b,h10b,p14b_1,h10b_1)
      CALL TCE_RESTRICTED_2(h10b,p1b,h10b_2,p1b_2)
      dim_common = int_mb(k_range+h10b-1)
      dima_sort = int_mb(k_range+p14b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_4',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (p14b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p14b-1
     &),int_mb(k_range+h10b-1),1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_6_4',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_4',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p1b_2
     & - noab - 1 + nvab * (h10b_2 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+p1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_6_4',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_4'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_4'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_4',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p1b-1)
     &,int_mb(k_range+p14b-1),2,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p1b -
     & noab - 1 + nvab * (p14b - noab - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_6_4',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_4'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_6_4_1(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p1 )_vt + = 1 * Sum ( h12 p11 ) * t ( p11 h12 )_t * v ( h10 h12 p1 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER p1b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p11b
      INTEGER h12b
      INTEGER p11b_1
      INTEGER h12b_1
      INTEGER h10b_2
      INTEGER h12b_2
      INTEGER p1b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h10b = 1,noab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p1b-
     &1).ne.4)) THEN
      IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+p1b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6_4_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p11b = noab+1,noab+nvab
      DO h12b = 1,noab
      IF (int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),int_mb(k_sym+h12b-1)) .eq. irrep_t) 
     &THEN
      CALL TCE_RESTRICTED_2(p11b,h12b,p11b_1,h12b_1)
      CALL TCE_RESTRICTED_4(h10b,h12b,p1b,p11b,h10b_2,h12b_2,p1b_2,p11b_
     &2)
      dim_common = int_mb(k_range+p11b-1) * int_mb(k_range+h12b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6_4_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_4_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (p11b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p11b-1
     &),int_mb(k_range+h12b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_6_4_1',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_6_4_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_4_1',5,MA_ERR)
      IF ((h12b .lt. h10b) .and. (p11b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p1b_2
     & - 1 + (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (no
     &ab+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h10b-1),int_mb(k_range+p11b-1),int_mb(k_range+p1b
     &-1),4,2,1,3,1.0d0)
      END IF
      IF ((h12b .lt. h10b) .and. (p1b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - 1 + (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (no
     &ab+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h10b-1),int_mb(k_range+p1b-1),int_mb(k_range+p11b
     &-1),3,2,1,4,-1.0d0)
      END IF
      IF ((h10b .le. h12b) .and. (p11b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p1b_2
     & - 1 + (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (no
     &ab+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+p11b-1),int_mb(k_range+p1b
     &-1),4,1,2,3,-1.0d0)
      END IF
      IF ((h10b .le. h12b) .and. (p1b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - 1 + (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (no
     &ab+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+p1b-1),int_mb(k_range+p11b
     &-1),3,1,2,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_6_4_1',6,
     &MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_4_
     &1',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_4_
     &1',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_6_4_1',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h10b-1),2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p1b -
     & noab - 1 + nvab * (h10b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_6_4_1',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_6_4_
     &1',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_6_4_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p1 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h10b
      INTEGER p1b
      length = 0
      DO h10b = 1,noab
      DO p1b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p1b-
     &1).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdtq_lambda4_6_4_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h10b = 1,noab
      DO p1b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep
     &_v,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p1b-
     &1).ne.4)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p1b - noab - 1 + nvab * (h10b - 1)
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h10b-1) * int_mb(k_range+p1b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_7(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = 1/2 * P( 6 ) * Sum ( h14 h13 ) * y ( h5 h6 h13 h14 p1 p2 p3 p4 )_y * i1 ( h7 h8 h13 h14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h13b
      INTEGER h14b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h13b_1
      INTEGER h14b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER p4b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER h13b_2
      INTEGER h14b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperh(2)
      INTEGER isuperh
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,irrep_v)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * int_m
     &b(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h13b = 1,noab
      DO h14b = h13b,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h13b-1
     &)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2
     &b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h13b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_mb(k_sym+p1b-1),i
     &eor(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-
     &1)))))))) .eq. irrep_y) THEN
      CALL TCE_RESTRICTED_8(h5b,h6b,h13b,h14b,p1b,p2b,p3b,p4b,h5b_1,h6b_
     &1,h13b_1,h14b_1,p1b_1,p2b_1,p3b_1,p4b_1)
      CALL TCE_RESTRICTED_4(h7b,h8b,h13b,h14b,h7b_2,h8b_2,h13b_2,h14b_2)
      dim_common = int_mb(k_range+h13b-1) * int_mb(k_range+h14b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+p1b-1) * int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1) * 
     &int_mb(k_range+p4b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_7',2,MA_ERR)
      IF ((h14b .lt. h5b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p4b_1
     & - noab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 
     &+ nvab * (p1b_1 - noab - 1 + nvab * (h6b_1 - 1 + noab * (h5b_1 - 1
     & + noab * (h14b_1 - 1 + noab * (h13b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h13b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+h5b-1),int_mb(k_range+h6b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-
     &1),int_mb(k_range+p4b-1),8,7,6,5,4,3,2,1,1.0d0)
      END IF
      IF ((h13b .lt. h5b) .and. (h5b .le. h14b) .and. (h14b .lt. h6b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p4b_1
     & - noab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 
     &+ nvab * (p1b_1 - noab - 1 + nvab * (h6b_1 - 1 + noab * (h14b_1 - 
     &1 + noab * (h5b_1 - 1 + noab * (h13b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h13b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h14b-1),int_mb(k_range+h6b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-
     &1),int_mb(k_range+p4b-1),8,7,6,5,4,2,3,1,-1.0d0)
      END IF
      IF ((h13b .lt. h5b) .and. (h6b .le. h14b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p4b_1
     & - noab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 
     &+ nvab * (p1b_1 - noab - 1 + nvab * (h14b_1 - 1 + noab * (h6b_1 - 
     &1 + noab * (h5b_1 - 1 + noab * (h13b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h13b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h14b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-
     &1),int_mb(k_range+p4b-1),8,7,6,5,3,2,4,1,1.0d0)
      END IF
      IF ((h5b .le. h13b) .and. (h14b .lt. h6b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p4b_1
     & - noab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 
     &+ nvab * (p1b_1 - noab - 1 + nvab * (h6b_1 - 1 + noab * (h14b_1 - 
     &1 + noab * (h13b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h13b-1),int_mb(k_range+h14b-1),int_mb(k_range+h6b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-
     &1),int_mb(k_range+p4b-1),8,7,6,5,4,1,3,2,1.0d0)
      END IF
      IF ((h5b .le. h13b) .and. (h13b .lt. h6b) .and. (h6b .le. h14b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p4b_1
     & - noab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 
     &+ nvab * (p1b_1 - noab - 1 + nvab * (h14b_1 - 1 + noab * (h6b_1 - 
     &1 + noab * (h13b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h13b-1),int_mb(k_range+h6b-1),int_mb(k_range+h14b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-
     &1),int_mb(k_range+p4b-1),8,7,6,5,3,1,4,2,-1.0d0)
      END IF
      IF ((h6b .le. h13b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p4b_1
     & - noab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 
     &+ nvab * (p1b_1 - noab - 1 + nvab * (h14b_1 - 1 + noab * (h13b_1 -
     & 1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h13b-1),int_mb(k_range+h14b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-
     &1),int_mb(k_range+p4b-1),8,7,6,5,2,1,4,3,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_7',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_7',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(h14b_
     &2 - 1 + noab * (h13b_2 - 1 + noab * (h8b_2 - 1 + noab * (h7b_2 - 1
     &)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h13b-1),int_mb(k_range+h14b-
     &1),2,1,4,3,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_7',6,MA_E
     &RR)
      nsuperh(1) = 1
      nsuperh(2) = 1
      isuperh = 1
      IF (h13b .eq. h14b) THEN
      nsuperh(isuperh) = nsuperh(isuperh) + 1
      ELSE
      isuperh = isuperh + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperh(1))/FACTORIAL(nsuperh(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_7',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_7',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_7',9,MA_ERR)
      IF ((h6b .le. h7b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p4b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,2,1,6,5,4,3,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p4b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),2,8,7,1,6,5,4,3,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p4b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),2,8,1,7,6,5,4,3,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p4b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,2,7,1,6,5,4,3,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p4b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,2,1,7,6,5,4,3,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h8b .le. h5b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+p4b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),2,1,8,7,6,5,4,3,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 + noab * (h
     &8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_7',10,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_7',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_7_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h13 h14 )_v + = 1 * v ( h5 h6 h13 h14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h13b
      INTEGER h14b
      INTEGER dimc
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h13b_1
      INTEGER h14b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h13b = 1,noab
      DO h14b = h13b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &13b-1)+int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h13b-1),int_mb(k_sym+h14b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h13b-1) * int_mb(k_range+h14b-1)
      CALL TCE_RESTRICTED_4(h5b,h6b,h13b,h14b,h5b_1,h6b_1,h13b_1,h14b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h13b-1) * int_mb(k_range+h14b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_7_1',1,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h14b_
     &1 - 1 + (noab+nvab) * (h13b_1 - 1 + (noab+nvab) * (h6b_1 - 1 + (no
     &ab+nvab) * (h5b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h13b-1),int_mb(k_range+h14b-
     &1),4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_7_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_7_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+h14b-1
     &),int_mb(k_range+h13b-1),int_mb(k_range+h6b-1),int_mb(k_range+h5b-
     &1),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h14b 
     &- 1 + noab * (h13b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_7_1',4,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_1'
     &,5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_7_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h13 h14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h5b
      INTEGER h6b
      INTEGER h13b
      INTEGER h14b
      length = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h13b = 1,noab
      DO h14b = h13b,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &13b-1)+int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h13b-1),int_mb(k_sym+h14b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdtq_lambda4_7_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h13b = 1,noab
      DO h14b = h13b,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &13b-1)+int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h13b-1),int_mb(k_sym+h14b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h14b - 1 + noab * (h13b - 1 + noab * (h6
     &b - 1 + noab * (h5b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+h13b-1) * int_mb(k_range+h14b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_7_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h13 h14 )_vt + = -2 * Sum ( p9 ) * t ( p9 h13 )_t * i2 ( h5 h6 h14 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h13b
      INTEGER h14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h13b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h14b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h13b = 1,noab
      DO h14b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &13b-1)+int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h13b-1),int_mb(k_sym+h14b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h13b-1) * int_mb(k_range+h14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h13b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p9b,h13b,p9b_1,h13b_1)
      CALL TCE_RESTRICTED_4(h5b,h6b,h14b,p9b,h5b_2,h6b_2,h14b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_7_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h13b_
     &1 - 1 + noab * (p9b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h13b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_7_2',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_7_2',5,MA_ERR)
      IF ((h14b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (h14b_2 - 1 + noab * (h6b_2 - 1 + noab * (h5b
     &_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h14b-1),int_mb(k_range+p9b-1
     &),3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_7_2',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_2'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_2'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_7_2',9,MA_ERR)
      IF ((h13b .le. h14b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h14b-1
     &),int_mb(k_range+h6b-1),int_mb(k_range+h5b-1),int_mb(k_range+h13b-
     &1),3,2,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h14b 
     &- 1 + noab * (h13b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))
      END IF
      IF ((h14b .le. h13b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h14b-1
     &),int_mb(k_range+h6b-1),int_mb(k_range+h5b-1),int_mb(k_range+h13b-
     &1),3,2,1,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h13b 
     &- 1 + noab * (h14b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_7_2',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_7_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 h6 h14 p9 )_v + = 1 * v ( h5 h6 h14 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h14b
      INTEGER p9b
      INTEGER dimc
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h14b_1
      INTEGER p9b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h14b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h14b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &14b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h14b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h14b-1) * int_mb(k_range+p9b-1)
      CALL TCE_RESTRICTED_4(h5b,h6b,h14b,p9b,h5b_1,h6b_1,h14b_1,p9b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h14b-1) * int_mb(k_range+p9b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_7_2_1',1,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p9b_1
     & - 1 + (noab+nvab) * (h14b_1 - 1 + (noab+nvab) * (h6b_1 - 1 + (noa
     &b+nvab) * (h5b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h14b-1),int_mb(k_range+p9b-1
     &),4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_7_2_1',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_7_2_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+h6b-1),int_mb(k_range+h5b-1
     &),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h14b - 1 + noab * (h6b - 1 + noab * (h5b - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_7_2_1',4,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_2_
     &1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_7_2_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 h6 h14 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h5b
      INTEGER h6b
      INTEGER h14b
      INTEGER p9b
      length = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h14b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &14b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h14b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h14b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdtq_lambda4_7_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h14b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &14b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h14b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h14b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p9b - noab - 1 + nvab * (h14b - 1 + noab
     & * (h6b - 1 + noab * (h5b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+h14b-1) * int_mb(k_range+p9b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_7_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 h6 h14 p9 )_vt + = -1/2 * Sum ( p11 ) * t ( p11 h14 )_t * v ( h5 h6 p9 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h14b
      INTEGER p9b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p11b
      INTEGER p11b_1
      INTEGER h14b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER p9b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h14b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h14b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &14b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h14b-1),int_mb(k_sym+p9b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h14b-1) * int_mb(k_range+p9b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),int_mb(k_sym+h14b-1)) .eq. irrep_t) 
     &THEN
      CALL TCE_RESTRICTED_2(p11b,h14b,p11b_1,h14b_1)
      CALL TCE_RESTRICTED_4(h5b,h6b,p9b,p11b,h5b_2,h6b_2,p9b_2,p11b_2)
      dim_common = int_mb(k_range+p11b-1)
      dima_sort = int_mb(k_range+h14b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+p9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_7_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h14b_
     &1 - 1 + noab * (p11b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p11b-1
     &),int_mb(k_range+h14b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_7_2_2',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_7_2_2',5,MA_ERR)
      IF ((p11b .lt. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noa
     &b+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+p11b-1),int_mb(k_range+p9b-1
     &),4,2,1,3,-1.0d0)
      END IF
      IF ((p9b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noa
     &b+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+p9b-1),int_mb(k_range+p11b-1
     &),3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_7_2_2',6,
     &MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_2_
     &2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_2_
     &2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_7_2_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h5b-1),int_mb(k_range+h14b-1
     &),3,2,4,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h14b - 1 + noab * (h6b - 1 + noab * (h5b - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_7_2_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_2_
     &2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_7_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h13 h14 )_vt + = 1/2 * Sum ( p9 p10 ) * t ( p9 p10 h13 h14 )_t * v ( h5 h6 p9 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h13b
      INTEGER h14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER p10b
      INTEGER p9b_1
      INTEGER p10b_1
      INTEGER h13b_1
      INTEGER h14b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER p9b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h13b = 1,noab
      DO h14b = h13b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1) .eq. int_mb(k_spin+h
     &13b-1)+int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h13b-1),int_mb(k_sym+h14b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h13b-1) * int_mb(k_range+h14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      IF (int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h13b-1)+int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h13b-1),int_mb(k_sym+h14b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p9b,p10b,h13b,h14b,p9b_1,p10b_1,h13b_1,h14b_
     &1)
      CALL TCE_RESTRICTED_4(h5b,h6b,p9b,p10b,h5b_2,h6b_2,p9b_2,p10b_2)
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h13b-1) * int_mb(k_range+h14b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_7_3',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h14b_
     &1 - 1 + noab * (h13b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p
     &9b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+h13b-1),int_mb(k_range+h14b
     &-1),4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_7_3',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_7_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_7_3',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h6b_2 - 1 + (noa
     &b+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+p9b-1),int_mb(k_range+p10b-1
     &),2,1,4,3,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_7_3',6,MA
     &_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p9b .eq. p10b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_3'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_3'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_7_3',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),int_mb(k_range+h14b-1),int_mb(k_range+h13b-
     &1),2,1,4,3,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h14b 
     &- 1 + noab * (h13b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_7_3',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_7_3'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_8(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = -1 * P( 16 ) * Sum ( h14 p11 ) * y ( h5 h6 h7 h14 p1 p2 p3 p11 )_y * i1 ( h8 p11 h14 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h14b
      INTEGER p11b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h14b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER p11b_1
      INTEGER h8b_2
      INTEGER p11b_2
      INTEGER p4b_2
      INTEGER h14b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO p4b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,irrep_v)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * int_m
     &b(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h14b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b
     &-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_mb(k_sym+p1b-1),ie
     &or(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p11b-
     &1)))))))) .eq. irrep_y) THEN
      CALL TCE_RESTRICTED_8(h5b,h6b,h7b,h14b,p1b,p2b,p3b,p11b,h5b_1,h6b_
     &1,h7b_1,h14b_1,p1b_1,p2b_1,p3b_1,p11b_1)
      CALL TCE_RESTRICTED_4(h8b,p11b,p4b,h14b,h8b_2,p11b_2,p4b_2,h14b_2)
      dim_common = int_mb(k_range+h14b-1) * int_mb(k_range+p11b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1) * 
     &int_mb(k_range+p3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_8',2,MA_ERR)
      IF ((h14b .lt. h5b) .and. (p11b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p3b_1
     & - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 
     &+ nvab * (p11b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h6b_1 - 
     &1 + noab * (h5b_1 - 1 + noab * (h14b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p11b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-
     &1),int_mb(k_range+p3b-1),8,7,6,4,3,2,5,1,1.0d0)
      END IF
      IF ((h14b .lt. h5b) .and. (p1b .le. p11b) .and. (p11b .lt. p2b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p3b_1
     & - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p11b_1 - noab - 1
     & + nvab * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h6b_1 - 
     &1 + noab * (h5b_1 - 1 + noab * (h14b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p11b-1),int_mb(k_range+p2b-
     &1),int_mb(k_range+p3b-1),8,7,5,4,3,2,6,1,-1.0d0)
      END IF
      IF ((h14b .lt. h5b) .and. (p2b .le. p11b) .and. (p11b .lt. p3b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p3b_1
     & - noab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p2b_1 - noab - 1
     & + nvab * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h6b_1 - 
     &1 + noab * (h5b_1 - 1 + noab * (h14b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p11b-
     &1),int_mb(k_range+p3b-1),8,6,5,4,3,2,7,1,1.0d0)
      END IF
      IF ((h14b .lt. h5b) .and. (p3b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p11b_
     &1 - noab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1
     & + nvab * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h6b_1 - 
     &1 + noab * (h5b_1 - 1 + noab * (h14b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-1
     &),int_mb(k_range+p11b-1),7,6,5,4,3,2,8,1,-1.0d0)
      END IF
      IF ((h5b .le. h14b) .and. (h14b .lt. h6b) .and. (p11b .lt. p1b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p3b_1
     & - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 
     &+ nvab * (p11b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h6b_1 - 
     &1 + noab * (h14b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p11b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-
     &1),int_mb(k_range+p3b-1),8,7,6,4,3,1,5,2,-1.0d0)
      END IF
      IF ((h5b .le. h14b) .and. (h14b .lt. h6b) .and. (p1b .le. p11b) .a
     &nd. (p11b .lt. p2b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p3b_1
     & - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p11b_1 - noab - 1
     & + nvab * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h6b_1 - 
     &1 + noab * (h14b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p11b-1),int_mb(k_range+p2b-
     &1),int_mb(k_range+p3b-1),8,7,5,4,3,1,6,2,1.0d0)
      END IF
      IF ((h5b .le. h14b) .and. (h14b .lt. h6b) .and. (p2b .le. p11b) .a
     &nd. (p11b .lt. p3b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p3b_1
     & - noab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p2b_1 - noab - 1
     & + nvab * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h6b_1 - 
     &1 + noab * (h14b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p11b-
     &1),int_mb(k_range+p3b-1),8,6,5,4,3,1,7,2,-1.0d0)
      END IF
      IF ((h5b .le. h14b) .and. (h14b .lt. h6b) .and. (p3b .le. p11b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p11b_
     &1 - noab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1
     & + nvab * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h6b_1 - 
     &1 + noab * (h14b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-1
     &),int_mb(k_range+p11b-1),7,6,5,4,3,1,8,2,1.0d0)
      END IF
      IF ((h6b .le. h14b) .and. (h14b .lt. h7b) .and. (p11b .lt. p1b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p3b_1
     & - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 
     &+ nvab * (p11b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h14b_1 -
     & 1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h14b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p11b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-
     &1),int_mb(k_range+p3b-1),8,7,6,4,2,1,5,3,1.0d0)
      END IF
      IF ((h6b .le. h14b) .and. (h14b .lt. h7b) .and. (p1b .le. p11b) .a
     &nd. (p11b .lt. p2b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p3b_1
     & - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p11b_1 - noab - 1
     & + nvab * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h14b_1 -
     & 1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h14b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p11b-1),int_mb(k_range+p2b-
     &1),int_mb(k_range+p3b-1),8,7,5,4,2,1,6,3,-1.0d0)
      END IF
      IF ((h6b .le. h14b) .and. (h14b .lt. h7b) .and. (p2b .le. p11b) .a
     &nd. (p11b .lt. p3b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p3b_1
     & - noab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p2b_1 - noab - 1
     & + nvab * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h14b_1 -
     & 1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h14b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p11b-
     &1),int_mb(k_range+p3b-1),8,6,5,4,2,1,7,3,1.0d0)
      END IF
      IF ((h6b .le. h14b) .and. (h14b .lt. h7b) .and. (p3b .le. p11b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p11b_
     &1 - noab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1
     & + nvab * (p1b_1 - noab - 1 + nvab * (h7b_1 - 1 + noab * (h14b_1 -
     & 1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h14b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-1
     &),int_mb(k_range+p11b-1),7,6,5,4,2,1,8,3,-1.0d0)
      END IF
      IF ((h7b .le. h14b) .and. (p11b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p3b_1
     & - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 
     &+ nvab * (p11b_1 - noab - 1 + nvab * (h14b_1 - 1 + noab * (h7b_1 -
     & 1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h14b-1
     &),int_mb(k_range+p11b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-
     &1),int_mb(k_range+p3b-1),8,7,6,3,2,1,5,4,-1.0d0)
      END IF
      IF ((h7b .le. h14b) .and. (p1b .le. p11b) .and. (p11b .lt. p2b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p3b_1
     & - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p11b_1 - noab - 1
     & + nvab * (p1b_1 - noab - 1 + nvab * (h14b_1 - 1 + noab * (h7b_1 -
     & 1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h14b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p11b-1),int_mb(k_range+p2b-
     &1),int_mb(k_range+p3b-1),8,7,5,3,2,1,6,4,1.0d0)
      END IF
      IF ((h7b .le. h14b) .and. (p2b .le. p11b) .and. (p11b .lt. p3b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p3b_1
     & - noab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p2b_1 - noab - 1
     & + nvab * (p1b_1 - noab - 1 + nvab * (h14b_1 - 1 + noab * (h7b_1 -
     & 1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h14b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p11b-
     &1),int_mb(k_range+p3b-1),8,6,5,3,2,1,7,4,-1.0d0)
      END IF
      IF ((h7b .le. h14b) .and. (p3b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p11b_
     &1 - noab - 1 + nvab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1
     & + nvab * (p1b_1 - noab - 1 + nvab * (h14b_1 - 1 + noab * (h7b_1 -
     & 1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h14b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-1
     &),int_mb(k_range+p11b-1),7,6,5,3,2,1,8,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_8',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_8',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(h14b_
     &2 - 1 + noab * (p4b_2 - noab - 1 + nvab * (p11b_2 - noab - 1 + nva
     &b * (h8b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+p4b-1),int_mb(k_range+h14b-
     &1),3,1,2,4,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_8',6,MA_E
     &RR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_8',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_8',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_8',9,MA_ERR)
      IF ((h7b .le. h8b) .and. (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,2,5,4,3,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,2,1,5,4,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,2,5,1,4,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,2,5,4,1,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),2,8,7,6,5,4,3,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),2,8,7,6,1,5,4,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),2,8,7,6,5,1,4,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),2,8,7,6,5,4,1,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,2,7,6,5,4,3,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,2,7,6,1,5,4,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,2,7,6,5,1,4,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p2b .le. p4b) .and.
     & (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,2,7,6,5,4,1,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,2,6,5,4,3,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,2,6,1,5,4,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,2,6,5,1,4,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p2b .le. p4b) .and.
     & (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,2,6,5,4,1,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_8',10,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_8',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_8_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 p11 h14 p1 )_v + = 1 * v ( h5 p11 h14 p1 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER p11b
      INTEGER p1b
      INTEGER h14b
      INTEGER dimc
      INTEGER h5b_1
      INTEGER p11b_1
      INTEGER p1b_1
      INTEGER h14b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO p11b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO h14b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-
     &1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h14b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+
     &p1b-1)+int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+p11b-1),ieor(int_mb
     &(k_sym+p1b-1),int_mb(k_sym+h14b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+p11b-1) * int_mb(k_r
     &ange+p1b-1) * int_mb(k_range+h14b-1)
      CALL TCE_RESTRICTED_4(h5b,p11b,p1b,h14b,h5b_1,p11b_1,p1b_1,h14b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+p11b-1) * int_m
     &b(k_range+p1b-1) * int_mb(k_range+h14b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_1',1,MA_ERR)
      IF ((h5b .le. p11b) .and. (h14b .le. p1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p1b_1
     & - 1 + (noab+nvab) * (h14b_1 - 1 + (noab+nvab) * (p11b_1 - 1 + (no
     &ab+nvab) * (h5b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+h14b-1),int_mb(k_range+p1b-
     &1),3,4,2,1,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_8_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+h14b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p11b-1),int_mb(k_range+h5b-
     &1),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h14b 
     &- 1 + noab * (p1b - noab - 1 + nvab * (p11b - noab - 1 + nvab * (h
     &5b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_8_1',4,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_1'
     &,5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_8_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 p11 h14 p1 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h5b
      INTEGER p11b
      INTEGER p1b
      INTEGER h14b
      length = 0
      DO h5b = 1,noab
      DO p11b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO h14b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+
     &h14b-1)+int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+p11b-1),ieor(int_mb
     &(k_sym+h14b-1),int_mb(k_sym+p1b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-
     &1)+int_mb(k_spin+h14b-1)+int_mb(k_spin+p1b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdtq_lambda4_8_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h5b = 1,noab
      DO p11b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO h14b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+
     &h14b-1)+int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+p11b-1),ieor(int_mb
     &(k_sym+h14b-1),int_mb(k_sym+p1b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-
     &1)+int_mb(k_spin+h14b-1)+int_mb(k_spin+p1b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h14b - 1 + noab * (p1b - noab - 1 + nvab
     & * (p11b - noab - 1 + nvab * (h5b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+p11b-1) * int
     &_mb(k_range+p1b-1) * int_mb(k_range+h14b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_8_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 p11 h14 p1 )_vt + = -1 * Sum ( p9 ) * t ( p9 h14 )_t * v ( h5 p11 p1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER p11b
      INTEGER p1b
      INTEGER h14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h14b_1
      INTEGER h5b_2
      INTEGER p11b_2
      INTEGER p1b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO p11b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO h14b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-
     &1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h14b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+
     &p1b-1)+int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+p11b-1),ieor(int_mb
     &(k_sym+p1b-1),int_mb(k_sym+h14b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+p11b-1) * int_mb(k_r
     &ange+p1b-1) * int_mb(k_range+h14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h14b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p9b,h14b,p9b_1,h14b_1)
      CALL TCE_RESTRICTED_4(h5b,p11b,p1b,p9b,h5b_2,p11b_2,p1b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h14b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+p11b-1) * int_m
     &b(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h14b_
     &1 - 1 + noab * (p9b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h14b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_8_2',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_2',5,MA_ERR)
      IF ((h5b .le. p11b) .and. (p9b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p1b_2
     & - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (p11b_2 - 1 + (noa
     &b+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1
     &),4,2,1,3,-1.0d0)
      END IF
      IF ((h5b .le. p11b) .and. (p1b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (p11b_2 - 1 + (noa
     &b+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1
     &),3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_8_2',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_2'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_2'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p1b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+h5b-1),int_mb(k_range+h14b-
     &1),3,2,1,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h14b 
     &- 1 + noab * (p1b - noab - 1 + nvab * (p11b - noab - 1 + nvab * (h
     &5b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_8_2',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_8_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 p11 h14 p1 )_vt + = -1 * Sum ( h12 p10 ) * t ( p10 p11 h12 h14 )_t * v ( h5 h12 p1 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER p11b
      INTEGER p1b
      INTEGER h14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p10b
      INTEGER h12b
      INTEGER p11b_1
      INTEGER p10b_1
      INTEGER h14b_1
      INTEGER h12b_1
      INTEGER h5b_2
      INTEGER h12b_2
      INTEGER p1b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO p11b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO h14b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-
     &1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h14b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+
     &p1b-1)+int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+p11b-1),ieor(int_mb
     &(k_sym+p1b-1),int_mb(k_sym+h14b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+p11b-1) * int_mb(k_r
     &ange+p1b-1) * int_mb(k_range+h14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p10b = noab+1,noab+nvab
      DO h12b = 1,noab
      IF (int_mb(k_spin+p11b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin
     &+h14b-1)+int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_m
     &b(k_sym+h14b-1),int_mb(k_sym+h12b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p11b,p10b,h14b,h12b,p11b_1,p10b_1,h14b_1,h12
     &b_1)
      CALL TCE_RESTRICTED_4(h5b,h12b,p1b,p10b,h5b_2,h12b_2,p1b_2,p10b_2)
      dim_common = int_mb(k_range+p10b-1) * int_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p11b-1) * int_mb(k_range+h14b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_3',2,MA_ERR)
      IF ((p10b .le. p11b) .and. (h12b .le. h14b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h14b_
     &1 - 1 + noab * (h12b_1 - 1 + noab * (p11b_1 - noab - 1 + nvab * (p
     &10b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p11b-1),int_mb(k_range+h12b-1),int_mb(k_range+h14
     &b-1),4,2,3,1,1.0d0)
      END IF
      IF ((p10b .le. p11b) .and. (h14b .lt. h12b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h14b_1 - 1 + noab * (p11b_1 - noab - 1 + nvab * (p
     &10b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p11b-1),int_mb(k_range+h14b-1),int_mb(k_range+h12
     &b-1),3,2,4,1,-1.0d0)
      END IF
      IF ((p11b .lt. p10b) .and. (h12b .le. h14b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h14b_
     &1 - 1 + noab * (h12b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p
     &11b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p11b-1
     &),int_mb(k_range+p10b-1),int_mb(k_range+h12b-1),int_mb(k_range+h14
     &b-1),4,1,3,2,-1.0d0)
      END IF
      IF ((p11b .lt. p10b) .and. (h14b .lt. h12b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h14b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p
     &11b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p11b-1
     &),int_mb(k_range+p10b-1),int_mb(k_range+h14b-1),int_mb(k_range+h12
     &b-1),3,1,4,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_8_3',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_3',5,MA_ERR)
      IF ((h12b .lt. h5b) .and. (p10b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p1b_2
     & - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noa
     &b+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+p10b-1),int_mb(k_range+p1b-
     &1),4,2,1,3,1.0d0)
      END IF
      IF ((h12b .lt. h5b) .and. (p1b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noa
     &b+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+p1b-1),int_mb(k_range+p10b-
     &1),3,2,1,4,-1.0d0)
      END IF
      IF ((h5b .le. h12b) .and. (p10b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p1b_2
     & - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (no
     &ab+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h12b-1),int_mb(k_range+p10b-1),int_mb(k_range+p1b-
     &1),4,1,2,3,-1.0d0)
      END IF
      IF ((h5b .le. h12b) .and. (p1b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (no
     &ab+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h12b-1),int_mb(k_range+p1b-1),int_mb(k_range+p10b-
     &1),3,1,2,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_8_3',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_3'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_3'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_3',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h5b-1),int_mb(k_range+h14b-1),int_mb(k_range+p11b-
     &1),2,4,1,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h14b 
     &- 1 + noab * (p1b - noab - 1 + nvab * (p11b - noab - 1 + nvab * (h
     &5b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_8_3',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_3'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_8_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 p11 h14 p1 )_vtt + = 1 * Sum ( h12 ) * t ( p11 h12 )_t * i2 ( h5 h12 h14 p1 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER p11b
      INTEGER p1b
      INTEGER h14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h12b
      INTEGER p11b_1
      INTEGER h12b_1
      INTEGER h5b_2
      INTEGER h12b_2
      INTEGER p1b_2
      INTEGER h14b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO p11b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO h14b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-
     &1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h14b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+
     &p1b-1)+int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+p11b-1),ieor(int_mb
     &(k_sym+p1b-1),int_mb(k_sym+h14b-1)))) .eq. ieor(irrep_v,ieor(irrep
     &_t,irrep_t))) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+p11b-1) * int_mb(k_r
     &ange+p1b-1) * int_mb(k_range+h14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8_4',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h12b = 1,noab
      IF (int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),int_mb(k_sym+h12b-1)) .eq. irrep_t) 
     &THEN
      CALL TCE_RESTRICTED_2(p11b,h12b,p11b_1,h12b_1)
      CALL TCE_RESTRICTED_4(h5b,h12b,p1b,h14b,h5b_2,h12b_2,p1b_2,h14b_2)
      dim_common = int_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p11b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+p1b-1) * int_mb
     &(k_range+h14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_4',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (p11b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p11b-1
     &),int_mb(k_range+h12b-1),1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_8_4',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_4',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(h14b_
     &2 - 1 + noab * (p1b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h5
     &b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h12b-1),int_mb(k_range+p1b-1),int_mb(k_range+h14b-
     &1),4,3,1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_8_4',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_4'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_4'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_4',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h14b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+h5b-1),int_mb(k_range+p11b-
     &1),3,4,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h14b 
     &- 1 + noab * (p1b - noab - 1 + nvab * (p11b - noab - 1 + nvab * (h
     &5b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_8_4',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_4'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_8_4_1(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 h12 h14 p1 )_vt + = 1 * Sum ( p9 ) * t ( p9 h14 )_t * v ( h5 h12 p1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h12b
      INTEGER p1b
      INTEGER h14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h14b_1
      INTEGER h5b_2
      INTEGER h12b_2
      INTEGER p1b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h12b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO h14b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h12b-
     &1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+h14b-1).ne.8)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+
     &p1b-1)+int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb
     &(k_sym+p1b-1),int_mb(k_sym+h14b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h12b-1) * int_mb(k_r
     &ange+p1b-1) * int_mb(k_range+h14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8_4_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h14b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p9b,h14b,p9b_1,h14b_1)
      CALL TCE_RESTRICTED_4(h5b,h12b,p1b,p9b,h5b_2,h12b_2,p1b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h14b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h12b-1) * int_m
     &b(k_range+p1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8_4_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_4_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h14b_
     &1 - 1 + noab * (p9b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h14b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_8_4_1',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_8_4_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_4_1',5,MA_ERR)
      IF ((h12b .lt. h5b) .and. (p9b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p1b_2
     & - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab
     &+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1
     &),4,1,2,3,1.0d0)
      END IF
      IF ((h12b .lt. h5b) .and. (p1b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab
     &+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1
     &),3,1,2,4,-1.0d0)
      END IF
      IF ((h5b .le. h12b) .and. (p9b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p1b_2
     & - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noa
     &b+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h12b-1),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1
     &),4,2,1,3,-1.0d0)
      END IF
      IF ((h5b .le. h12b) .and. (p1b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p1b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (noa
     &b+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h12b-1),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1
     &),3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_8_4_1',6,
     &MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_4_
     &1',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_4_
     &1',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_8_4_1',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h12b-1),int_mb(k_range+h5b-1),int_mb(k_range+h14b-
     &1),3,2,1,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h14b 
     &- 1 + noab * (p1b - noab - 1 + nvab * (h12b - 1 + noab * (h5b - 1)
     &))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_8_4_1',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_8_4_
     &1',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_8_4_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 h12 h14 p1 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h5b
      INTEGER h12b
      INTEGER p1b
      INTEGER h14b
      length = 0
      DO h5b = 1,noab
      DO h12b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO h14b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+
     &h14b-1)+int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb
     &(k_sym+h14b-1),int_mb(k_sym+p1b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h12b-
     &1)+int_mb(k_spin+h14b-1)+int_mb(k_spin+p1b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdtq_lambda4_8_4_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h5b = 1,noab
      DO h12b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO h14b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h12b-1) .eq. int_mb(k_spin+
     &h14b-1)+int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_mb
     &(k_sym+h14b-1),int_mb(k_sym+p1b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h12b-
     &1)+int_mb(k_spin+h14b-1)+int_mb(k_spin+p1b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h14b - 1 + noab * (p1b - noab - 1 + nvab
     & * (h12b - 1 + noab * (h5b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h12b-1) * int
     &_mb(k_range+p1b-1) * int_mb(k_range+h14b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_9(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_
     &offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_yv + = 1/2 * P( 6 ) * Sum ( p10 p9 ) * y ( h5 h6 h7 h8 p1 p2 p9 p10 )_y * v ( p9 p10 p3 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER p10b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p9b_1
      INTEGER p10b_1
      INTEGER p9b_2
      INTEGER p10b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubp(2)
      INTEGER isubp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,irrep_v)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * int_m
     &b(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_9',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+p10b-1
     &)))))))) .eq. irrep_y) THEN
      CALL TCE_RESTRICTED_8(h5b,h6b,h7b,h8b,p1b,p2b,p9b,p10b,h5b_1,h6b_1
     &,h7b_1,h8b_1,p1b_1,p2b_1,p9b_1,p10b_1)
      CALL TCE_RESTRICTED_4(p9b,p10b,p3b,p4b,p9b_2,p10b_2,p3b_2,p4b_2)
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * 
     &int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_9',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_9',2,MA_ERR)
      IF ((p10b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p2b_1
     & - noab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (p10b_1 - noab - 1
     & + nvab * (p9b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 
     &1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p10b-1),int_mb(k_range+p1b-1
     &),int_mb(k_range+p2b-1),8,7,4,3,2,1,6,5,1.0d0)
      END IF
      IF ((p9b .lt. p1b) .and. (p1b .le. p10b) .and. (p10b .lt. p2b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p2b_1
     & - noab - 1 + nvab * (p10b_1 - noab - 1 + nvab * (p1b_1 - noab - 1
     & + nvab * (p9b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 
     &1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p10b-1
     &),int_mb(k_range+p2b-1),8,6,4,3,2,1,7,5,-1.0d0)
      END IF
      IF ((p9b .lt. p1b) .and. (p2b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p10b_
     &1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1
     & + nvab * (p9b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 
     &1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p10b-1),7,6,4,3,2,1,8,5,1.0d0)
      END IF
      IF ((p1b .le. p9b) .and. (p10b .lt. p2b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p2b_1
     & - noab - 1 + nvab * (p10b_1 - noab - 1 + nvab * (p9b_1 - noab - 1
     & + nvab * (p1b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 
     &1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p10b-1
     &),int_mb(k_range+p2b-1),8,5,4,3,2,1,7,6,1.0d0)
      END IF
      IF ((p1b .le. p9b) .and. (p9b .lt. p2b) .and. (p2b .le. p10b)) THE
     &N
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p10b_
     &1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p9b_1 - noab - 1
     & + nvab * (p1b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 
     &1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p10b-1),7,5,4,3,2,1,8,6,-1.0d0)
      END IF
      IF ((p2b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p10b_
     &1 - noab - 1 + nvab * (p9b_1 - noab - 1 + nvab * (p2b_1 - noab - 1
     & + nvab * (p1b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 
     &1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p10b-1),6,5,4,3,2,1,8,7,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_9',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_9',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_9',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p4b_2
     & - 1 + (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (p10b_2 - 1 + (noa
     &b+nvab) * (p9b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+p3b-1),int_mb(k_range+p4b-1
     &),4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_9',6,MA_E
     &RR)
      nsubp(1) = 1
      nsubp(2) = 1
      isubp = 1
      IF (p9b .eq. p10b) THEN
      nsubp(isubp) = nsubp(isubp) + 1
      ELSE
      isubp = isubp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubp(1))/FACTORIAL(nsubp(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_9',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_9',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_9',9,MA_ERR)
      IF ((p2b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,4,3,2,1,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p3b .le. p1b) .and. (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,2,4,3,1,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p3b .le. p1b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,2,4,1,3,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p1b .le. p3b) .and. (p3b .le. p2b) .and. (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,4,2,3,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p1b .le. p3b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,4,2,1,3,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,2,1,4,3,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_9',10,MA_
     &ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_9',1
     &1,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_10(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytv + = 1 * P( 24 ) * Sum ( h13 ) * i1 ( h5 h6 h7 h13 p1 p2 )_yt * v ( h8 h13 p3 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h13b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER h13b_1
      INTEGER h8b_2
      INTEGER h13b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,ieor(irrep_t,irrep_v))) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * int_m
     &b(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_10',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h13b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     & .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+h13b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int
     &_mb(k_sym+h13b-1)))))) .eq. ieor(irrep_y,irrep_t)) THEN
      CALL TCE_RESTRICTED_6(h5b,h6b,h7b,p1b,p2b,h13b,h5b_1,h6b_1,h7b_1,p
     &1b_1,p2b_1,h13b_1)
      CALL TCE_RESTRICTED_4(h8b,h13b,p3b,p4b,h8b_2,h13b_2,p3b_2,p4b_2)
      dim_common = int_mb(k_range+h13b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+p3b-1) * int_mb
     &(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_10',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_10',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h13b_
     &1 - 1 + noab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 + nvab
     & * (h7b_1 - 1 + noab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+h13b-1),5,4,3,2,1,6,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_10',3,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_10',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_10',5,MA_ERR)
      IF ((h13b .lt. h8b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p4b_2
     & - 1 + (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noab
     &+nvab) * (h13b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h13b-1
     &),int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p4b-1
     &),4,3,2,1,-1.0d0)
      END IF
      IF ((h8b .le. h13b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p4b_2
     & - 1 + (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h13b_2 - 1 + (noa
     &b+nvab) * (h8b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h13b-1),int_mb(k_range+p3b-1),int_mb(k_range+p4b-1
     &),4,3,1,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_10',6,MA_
     &ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_10',
     &7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_10',
     &8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_10',9,MA_ERR)
      IF ((h7b .le. h8b) .and. (p2b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,3,5,4,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p3b .le. p1b) .and. (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,3,2,5,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p3b .le. p1b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,3,2,5,1,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p1b .le. p3b) .and. (p3b .le. p2b) .and.
     & (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,3,5,2,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p1b .le. p3b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,3,5,2,1,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,3,2,1,5,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p2b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,7,6,5,4,2,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p3b .le. p1b) .and. (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,7,6,2,5,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p3b .le. p1b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,7,6,2,5,1,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p1b .le. p3b) .and. (p3b .le. p2b) .and.
     & (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,7,6,5,2,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p1b .le. p3b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,7,6,5,2,1,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,7,6,2,1,5,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p2b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,7,6,5,4,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p3b .le. p1b) .and.
     & (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,7,6,2,5,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p3b .le. p1b) .and.
     & (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,7,6,2,5,1,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p1b .le. p3b) .and.
     & (p3b .le. p2b) .and. (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,7,6,5,2,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p1b .le. p3b) .and.
     & (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,7,6,5,2,1,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,7,6,2,1,5,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p2b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,3,6,5,4,2,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p3b .le. p1b) .and.
     & (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,3,6,2,5,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p3b .le. p1b) .and.
     & (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,3,6,2,5,1,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p1b .le. p3b) .and.
     & (p3b .le. p2b) .and. (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,3,6,5,2,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p1b .le. p3b) .and.
     & (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,3,6,5,2,1,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h8b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,3,6,2,1,5,4,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_10',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_10',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_10_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h13 p1 p2 )_yt + = 1 * Sum ( p9 ) * t ( p9 h13 )_t * y ( h5 h6 h7 p1 p2 p9 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER p1b
      INTEGER p2b
      INTEGER h13b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h13b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+i
     &nt_mb(k_spin+h13b-1).ne.12)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     & .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+h13b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int
     &_mb(k_sym+h13b-1)))))) .eq. ieor(irrep_y,irrep_t)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1) * int_m
     &b(k_range+h13b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_10_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h13b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p9b,h13b,p9b_1,h13b_1)
      CALL TCE_RESTRICTED_6(h5b,h6b,h7b,p1b,p2b,p9b,h5b_2,h6b_2,h7b_2,p1
     &b_2,p2b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_10_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_10_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h13b_
     &1 - 1 + noab * (p9b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h13b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_10_1',3,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_10_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_10_1',5,MA_ERR)
      IF ((p9b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 
     &+ nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),6,5,3,2,1,4,1.0d0)
      END IF
      IF ((p1b .le. p9b) .and. (p9b .lt. p2b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 
     &+ nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p2b-1),6,4,3,2,1,5,-1.0d0)
      END IF
      IF ((p2b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 
     &+ nvab * (h7b_2 - 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p9b-1),5,4,3,2,1,6,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_10_1',6,M
     &A_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_10_1
     &',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_10_1
     &',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_10_1',9,MA_ERR)
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),int_mb(k_range+h13b-1),5,4,3,2,1,6,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h13b 
     &- 1 + noab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h7
     &b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_10_1',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_10_1
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_10_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h13 p1 p2 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER p1b
      INTEGER p2b
      INTEGER h13b
      length = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h13b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     & .eq. int_mb(k_spin+h13b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+p1b-1),in
     &t_mb(k_sym+p2b-1)))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+p1b-1)+
     &int_mb(k_spin+p2b-1).ne.12)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdtq_lambda4_10_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h13b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     & .eq. int_mb(k_spin+h13b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+p1b-1),in
     &t_mb(k_sym+p2b-1)))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+p1b-1)+
     &int_mb(k_spin+p2b-1).ne.12)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h13b - 1 + noab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1)))))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+h7b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1) 
     &* int_mb(k_range+h13b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_10_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h13 p1 p2 )_yt + = -1/2 * Sum ( h11 p10 p9 ) * t ( p9 p10 h11 h13 )_t * y ( h5 h6 h7 h11 p1 p2 p9 p10 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER p1b
      INTEGER p2b
      INTEGER h13b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER p10b
      INTEGER h11b
      INTEGER p9b_1
      INTEGER p10b_1
      INTEGER h13b_1
      INTEGER h11b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER h11b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER p9b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h13b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+i
     &nt_mb(k_spin+h13b-1).ne.12)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     & .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+h13b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int
     &_mb(k_sym+h13b-1)))))) .eq. ieor(irrep_y,irrep_t)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1) * int_m
     &b(k_range+h13b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_10_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      DO h11b = 1,noab
      IF (int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h13b-1)+int_mb(k_spin+h11b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h13b-1),int_mb(k_sym+h11b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p9b,p10b,h13b,h11b,p9b_1,p10b_1,h13b_1,h11b_
     &1)
      CALL TCE_RESTRICTED_8(h5b,h6b,h7b,h11b,p1b,p2b,p9b,p10b,h5b_2,h6b_
     &2,h7b_2,h11b_2,p1b_2,p2b_2,p9b_2,p10b_2)
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+p10b-1) * int_
     &mb(k_range+h11b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_10_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_10_2',2,MA_ERR)
      IF ((h11b .le. h13b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h13b_
     &1 - 1 + noab * (h11b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p
     &9b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+h11b-1),int_mb(k_range+h13b
     &-1),4,3,2,1,1.0d0)
      END IF
      IF ((h13b .lt. h11b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h11b_
     &1 - 1 + noab * (h13b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p
     &9b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+h13b-1),int_mb(k_range+h11b
     &-1),3,4,2,1,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_10_2',3,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_10_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_10_2',5,MA_ERR)
      IF ((h11b .lt. h5b) .and. (p10b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (p10b_2 - noab - 1
     & + nvab * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 
     &1 + noab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p9b-1),int_mb(k_range+p10b-1),int_mb(k_range+p1b-
     &1),int_mb(k_range+p2b-1),8,7,4,3,2,1,6,5,-1.0d0)
      END IF
      IF ((h11b .lt. h5b) .and. (p9b .lt. p1b) .and. (p1b .le. p10b) .an
     &d. (p10b .lt. p2b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p1b_2 - noab - 1
     & + nvab * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 
     &1 + noab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p10b-
     &1),int_mb(k_range+p2b-1),8,6,4,3,2,1,7,5,1.0d0)
      END IF
      IF ((h11b .lt. h5b) .and. (p9b .lt. p1b) .and. (p2b .le. p10b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1
     & + nvab * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 
     &1 + noab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p10b-1),7,6,4,3,2,1,8,5,-1.0d0)
      END IF
      IF ((h11b .lt. h5b) .and. (p1b .le. p9b) .and. (p10b .lt. p2b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p9b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 
     &1 + noab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p10b-
     &1),int_mb(k_range+p2b-1),8,5,4,3,2,1,7,6,-1.0d0)
      END IF
      IF ((h11b .lt. h5b) .and. (p1b .le. p9b) .and. (p9b .lt. p2b) .and
     &. (p2b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 
     &1 + noab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p10b-1),7,5,4,3,2,1,8,6,1.0d0)
      END IF
      IF ((h11b .lt. h5b) .and. (p2b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 
     &1 + noab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p9b-1
     &),int_mb(k_range+p10b-1),6,5,4,3,2,1,8,7,-1.0d0)
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (p10b .lt. p1b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (p10b_2 - noab - 1
     & + nvab * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 
     &1 + noab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p9b-1),int_mb(k_range+p10b-1),int_mb(k_range+p1b-
     &1),int_mb(k_range+p2b-1),8,7,4,3,1,2,6,5,1.0d0)
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (p9b .lt. p1b) .an
     &d. (p1b .le. p10b) .and. (p10b .lt. p2b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p1b_2 - noab - 1
     & + nvab * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 
     &1 + noab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p10b-
     &1),int_mb(k_range+p2b-1),8,6,4,3,1,2,7,5,-1.0d0)
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (p9b .lt. p1b) .an
     &d. (p2b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1
     & + nvab * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 
     &1 + noab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p10b-1),7,6,4,3,1,2,8,5,1.0d0)
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (p1b .le. p9b) .an
     &d. (p10b .lt. p2b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p9b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 
     &1 + noab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p10b-
     &1),int_mb(k_range+p2b-1),8,5,4,3,1,2,7,6,1.0d0)
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (p1b .le. p9b) .an
     &d. (p9b .lt. p2b) .and. (p2b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 
     &1 + noab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p10b-1),7,5,4,3,1,2,8,6,-1.0d0)
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (p2b .le. p9b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 
     &1 + noab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p9b-1
     &),int_mb(k_range+p10b-1),6,5,4,3,1,2,8,7,1.0d0)
      END IF
      IF ((h6b .le. h11b) .and. (h11b .lt. h7b) .and. (p10b .lt. p1b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (p10b_2 - noab - 1
     & + nvab * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 -
     & 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h11b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p9b-1),int_mb(k_range+p10b-1),int_mb(k_range+p1b-
     &1),int_mb(k_range+p2b-1),8,7,4,2,1,3,6,5,-1.0d0)
      END IF
      IF ((h6b .le. h11b) .and. (h11b .lt. h7b) .and. (p9b .lt. p1b) .an
     &d. (p1b .le. p10b) .and. (p10b .lt. p2b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p1b_2 - noab - 1
     & + nvab * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 -
     & 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h11b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p10b-
     &1),int_mb(k_range+p2b-1),8,6,4,2,1,3,7,5,1.0d0)
      END IF
      IF ((h6b .le. h11b) .and. (h11b .lt. h7b) .and. (p9b .lt. p1b) .an
     &d. (p2b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1
     & + nvab * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 -
     & 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h11b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p10b-1),7,6,4,2,1,3,8,5,-1.0d0)
      END IF
      IF ((h6b .le. h11b) .and. (h11b .lt. h7b) .and. (p1b .le. p9b) .an
     &d. (p10b .lt. p2b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p9b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 -
     & 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h11b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p10b-
     &1),int_mb(k_range+p2b-1),8,5,4,2,1,3,7,6,-1.0d0)
      END IF
      IF ((h6b .le. h11b) .and. (h11b .lt. h7b) .and. (p1b .le. p9b) .an
     &d. (p9b .lt. p2b) .and. (p2b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 -
     & 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h11b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p10b-1),7,5,4,2,1,3,8,6,1.0d0)
      END IF
      IF ((h6b .le. h11b) .and. (h11b .lt. h7b) .and. (p2b .le. p9b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 -
     & 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h11b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p9b-1
     &),int_mb(k_range+p10b-1),6,5,4,2,1,3,8,7,-1.0d0)
      END IF
      IF ((h7b .le. h11b) .and. (p10b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (p10b_2 - noab - 1
     & + nvab * (p9b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 -
     & 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h11b-1
     &),int_mb(k_range+p9b-1),int_mb(k_range+p10b-1),int_mb(k_range+p1b-
     &1),int_mb(k_range+p2b-1),8,7,3,2,1,4,6,5,1.0d0)
      END IF
      IF ((h7b .le. h11b) .and. (p9b .lt. p1b) .and. (p1b .le. p10b) .an
     &d. (p10b .lt. p2b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p1b_2 - noab - 1
     & + nvab * (p9b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 -
     & 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h11b-1
     &),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p10b-
     &1),int_mb(k_range+p2b-1),8,6,3,2,1,4,7,5,-1.0d0)
      END IF
      IF ((h7b .le. h11b) .and. (p9b .lt. p1b) .and. (p2b .le. p10b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1
     & + nvab * (p9b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 -
     & 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h11b-1
     &),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p10b-1),7,6,3,2,1,4,8,5,1.0d0)
      END IF
      IF ((h7b .le. h11b) .and. (p1b .le. p9b) .and. (p10b .lt. p2b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p9b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 -
     & 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h11b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p10b-
     &1),int_mb(k_range+p2b-1),8,5,3,2,1,4,7,6,1.0d0)
      END IF
      IF ((h7b .le. h11b) .and. (p1b .le. p9b) .and. (p9b .lt. p2b) .and
     &. (p2b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 -
     & 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h11b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p10b-1),7,5,3,2,1,4,8,6,-1.0d0)
      END IF
      IF ((h7b .le. h11b) .and. (p2b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 -
     & 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h11b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p9b-1
     &),int_mb(k_range+p10b-1),6,5,3,2,1,4,8,7,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_10_2',6,M
     &A_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p9b .eq. p10b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_10_2
     &',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_10_2
     &',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_10_2',9,MA_ERR)
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),int_mb(k_range+h13b-1),5,4,3,2,1,6,-1.0d0/2
     &.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h13b 
     &- 1 + noab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h7
     &b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_10_2',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_10_2
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_11(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytf + = 1 * P( 4 ) * Sum ( h9 ) * i1 ( h5 h6 h7 h8 h9 p1 p2 p3 )_yt * f ( h9 p4 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h9b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER h9b_1
      INTEGER h9b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO p4b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,ieor(irrep_t,irrep_f))) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * int_m
     &b(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_11',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h9b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h9b-1)
     &))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      CALL TCE_RESTRICTED_8(h5b,h6b,h7b,h8b,p1b,p2b,p3b,h9b,h5b_1,h6b_1,
     &h7b_1,h8b_1,p1b_1,p2b_1,p3b_1,h9b_1)
      CALL TCE_RESTRICTED_2(h9b,p4b,h9b_2,p4b_2)
      dim_common = int_mb(k_range+h9b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * 
     &int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_11',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_11',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h9b_1
     & - 1 + noab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab 
     &* (p1b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noab
     & * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+h9b-1),7,6,5,4,3,2,1,8,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_11',3,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_11',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_11',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p4b_2
     & - 1 + (noab+nvab) * (h9b_2 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h9b-1)
     &,int_mb(k_range+p4b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_11',6,MA_
     &ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_11',
     &7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_11',
     &8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_11',9,MA_ERR)
      IF ((p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,1,4,3,2,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,4,1,3,2,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,4,3,1,2,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_11',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_11',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_11_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h8 h9 p1 p2 p3 )_yt + = -1 * Sum ( p10 ) * t ( p10 h9 )_t * y ( h5 h6 h7 h8 p1 p2 p3 p10 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER h9b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p10b
      INTEGER p10b_1
      INTEGER h9b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER p3b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO h9b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+h9b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h9b-1)
     &))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * int_m
     &b(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+h9b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_11_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+h9b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),int_mb(k_sym+h9b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p10b,h9b,p10b_1,h9b_1)
      CALL TCE_RESTRICTED_8(h5b,h6b,h7b,h8b,p1b,p2b,p3b,p10b,h5b_2,h6b_2
     &,h7b_2,h8b_2,p1b_2,p2b_2,p3b_2,p10b_2)
      dim_common = int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h9b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * 
     &int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_11_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_11_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h9b_1
     & - 1 + noab * (p10b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+h9b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_11_1',3,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_11_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_11_1',5,MA_ERR)
      IF ((p10b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 
     &+ nvab * (p10b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p3b-1),8,7,6,4,3,2,1,5,-1.0d0)
      END IF
      IF ((p1b .le. p10b) .and. (p10b .lt. p2b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p10b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p10b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p3b-1),8,7,5,4,3,2,1,6,1.0d0)
      END IF
      IF ((p2b .le. p10b) .and. (p10b .lt. p3b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p2b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p10b-1
     &),int_mb(k_range+p3b-1),8,6,5,4,3,2,1,7,-1.0d0)
      END IF
      IF ((p3b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - noab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p2b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p10b-1),7,6,5,4,3,2,1,8,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_11_1',6,M
     &A_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_11_1
     &',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_11_1
     &',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_11_1',9,MA_ERR)
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+h6b-1),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h9b-1),7,6,5,4,3,2,1,8,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h9b -
     & 1 + noab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b
     & - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h6b - 1 
     &+ noab * (h5b - 1)))))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_11_1',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_11_1
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_11_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h8 h9 p1 p2 p3 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER h9b
      length = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO h9b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h9b-1)+int_mb(k_spin+p1b-
     &1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h9b-1),ieo
     &r(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+p3b-1)
     &))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)+i
     &nt_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1).ne.1
     &6)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdtq_lambda4_11_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO h9b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h9b-1)+int_mb(k_spin+p1b-
     &1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h9b-1),ieo
     &r(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+p3b-1)
     &))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h9b-1)+i
     &nt_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1).ne.1
     &6)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h9b - 1 + noab * (p3b - noab - 1 + nvab 
     &* (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noa
     &b * (h7b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) 
     &* int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+h
     &9b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_12(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytv + = 1 * P( 16 ) * Sum ( h11 h10 ) * i1 ( h5 h6 h7 h11 h10 p1 p2 p3 )_yt * v ( h8 h10 h11 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h11b
      INTEGER h10b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h11b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER h10b_1
      INTEGER h8b_2
      INTEGER h10b_2
      INTEGER p4b_2
      INTEGER h11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO p4b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,ieor(irrep_t,irrep_v))) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * int_m
     &b(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_12',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h11b = 1,noab
      DO h10b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b
     &-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+p1b-1),ie
     &or(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h10b-
     &1)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      CALL TCE_RESTRICTED_8(h5b,h6b,h7b,h11b,p1b,p2b,p3b,h10b,h5b_1,h6b_
     &1,h7b_1,h11b_1,p1b_1,p2b_1,p3b_1,h10b_1)
      CALL TCE_RESTRICTED_4(h8b,h10b,p4b,h11b,h8b_2,h10b_2,p4b_2,h11b_2)
      dim_common = int_mb(k_range+h11b-1) * int_mb(k_range+h10b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1) * 
     &int_mb(k_range+p3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h8b-1) * int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_12',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_12',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (p3b_1 - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab
     & * (p1b_1 - noab - 1 + nvab * (h11b_1 - 1 + noab * (h7b_1 - 1 + no
     &ab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h11b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-1
     &),int_mb(k_range+h10b-1),7,6,5,3,2,1,8,4,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_12',3,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_12',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_12',5,MA_ERR)
      IF ((h10b .lt. h8b) .and. (h11b .le. p4b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p4b_2
     & - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noa
     &b+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h8b-1),int_mb(k_range+h11b-1),int_mb(k_range+p4b-
     &1),4,2,1,3,-1.0d0)
      END IF
      IF ((h8b .le. h10b) .and. (h11b .le. p4b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p4b_2
     & - 1 + (noab+nvab) * (h11b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (no
     &ab+nvab) * (h8b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h11b-1),int_mb(k_range+p4b-
     &1),4,1,2,3,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_12',6,MA_
     &ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_12',
     &7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_12',
     &8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_12',9,MA_ERR)
      IF ((h7b .le. h8b) .and. (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,2,5,4,3,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,2,1,5,4,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,2,5,1,4,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h8b) .and. (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,2,5,4,1,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),2,8,7,6,5,4,3,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),2,8,7,6,1,5,4,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),2,8,7,6,5,1,4,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),2,8,7,6,5,4,1,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h8b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,2,7,6,5,4,3,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,2,7,6,1,5,4,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,2,7,6,5,1,4,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h8b) .and. (h8b .le. h6b) .and. (p2b .le. p4b) .and.
     & (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,2,7,6,5,4,1,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h6b - 1 + noab * (h
     &8b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,2,6,5,4,3,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,2,6,1,5,4,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,2,6,5,1,4,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h8b) .and. (h8b .le. h7b) .and. (p2b .le. p4b) .and.
     & (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p3b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,2,6,5,4,1,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h7b - 1 + noab * (h8b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_12',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_12',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_12_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h11 h10 p1 p2 p3 )_yt + = 1 * Sum ( p9 ) * t ( p9 h10 )_t * y ( h5 h6 h7 h11 p1 p2 p3 p9 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h11b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER h10b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h10b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER h11b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER p3b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h11b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO h10b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+p1b-1)+
     &int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1).ne
     &.16)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b
     &-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+p1b-1),ie
     &or(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+h10b-
     &1)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+h11b-1) * int_mb(k_range+p1b-1) * int_
     &mb(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+h10b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_12_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h10b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p9b,h10b,p9b_1,h10b_1)
      CALL TCE_RESTRICTED_8(h5b,h6b,h7b,h11b,p1b,p2b,p3b,p9b,h5b_2,h6b_2
     &,h7b_2,h11b_2,p1b_2,p2b_2,p3b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h10b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+h11b-1) * int_mb(k_range+p1b-1) *
     & int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_12_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_12_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (p9b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h10b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_12_1',3,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_12_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_12_1',5,MA_ERR)
      IF ((h11b .lt. h5b) .and. (p9b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 
     &+ nvab * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1
     & + noab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p3b-1),8,7,6,1,4,3,2,5,1.0d0)
      END IF
      IF ((h11b .lt. h5b) .and. (p1b .le. p9b) .and. (p9b .lt. p2b)) THE
     &N
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1
     & + noab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p3b-1),8,7,5,1,4,3,2,6,-1.0d0)
      END IF
      IF ((h11b .lt. h5b) .and. (p2b .le. p9b) .and. (p9b .lt. p3b)) THE
     &N
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1
     & + noab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p9b-1
     &),int_mb(k_range+p3b-1),8,6,5,1,4,3,2,7,1.0d0)
      END IF
      IF ((h11b .lt. h5b) .and. (p3b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1
     & + noab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-1
     &),int_mb(k_range+p9b-1),7,6,5,1,4,3,2,8,-1.0d0)
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (p9b .lt. p1b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 
     &+ nvab * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1
     & + noab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p3b-1),8,7,6,2,4,3,1,5,-1.0d0)
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (p1b .le. p9b) .an
     &d. (p9b .lt. p2b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1
     & + noab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p3b-1),8,7,5,2,4,3,1,6,1.0d0)
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (p2b .le. p9b) .an
     &d. (p9b .lt. p3b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1
     & + noab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p9b-1
     &),int_mb(k_range+p3b-1),8,6,5,2,4,3,1,7,-1.0d0)
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (p3b .le. p9b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h6b_2 - 1
     & + noab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h6b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-1
     &),int_mb(k_range+p9b-1),7,6,5,2,4,3,1,8,1.0d0)
      END IF
      IF ((h6b .le. h11b) .and. (h11b .lt. h7b) .and. (p9b .lt. p1b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 
     &+ nvab * (p9b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h11b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p3b-1),8,7,6,3,4,2,1,5,1.0d0)
      END IF
      IF ((h6b .le. h11b) .and. (h11b .lt. h7b) .and. (p1b .le. p9b) .an
     &d. (p9b .lt. p2b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h11b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p3b-1),8,7,5,3,4,2,1,6,-1.0d0)
      END IF
      IF ((h6b .le. h11b) .and. (h11b .lt. h7b) .and. (p2b .le. p9b) .an
     &d. (p9b .lt. p3b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h11b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p9b-1
     &),int_mb(k_range+p3b-1),8,6,5,3,4,2,1,7,1.0d0)
      END IF
      IF ((h6b .le. h11b) .and. (h11b .lt. h7b) .and. (p3b .le. p9b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h7b_2 - 1 + noab * (h11b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h11b-1),int_mb(k_range+h7b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-1
     &),int_mb(k_range+p9b-1),7,6,5,3,4,2,1,8,-1.0d0)
      END IF
      IF ((h7b .le. h11b) .and. (p9b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 
     &+ nvab * (p9b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h11b-1
     &),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p3b-1),8,7,6,4,3,2,1,5,-1.0d0)
      END IF
      IF ((h7b .le. h11b) .and. (p1b .le. p9b) .and. (p9b .lt. p2b)) THE
     &N
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h11b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p3b-1),8,7,5,4,3,2,1,6,1.0d0)
      END IF
      IF ((h7b .le. h11b) .and. (p2b .le. p9b) .and. (p9b .lt. p3b)) THE
     &N
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h11b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p9b-1
     &),int_mb(k_range+p3b-1),8,6,5,4,3,2,1,7,-1.0d0)
      END IF
      IF ((h7b .le. h11b) .and. (p3b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h11b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h11b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-1
     &),int_mb(k_range+p9b-1),7,6,5,4,3,2,1,8,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_12_1',6,M
     &A_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_12_1
     &',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_12_1
     &',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_12_1',9,MA_ERR)
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h11b-1
     &),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1),int_mb(k_range+h5b-1
     &),int_mb(k_range+h10b-1),7,6,5,4,3,2,1,8,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h10b 
     &- 1 + noab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1
     &b - noab - 1 + nvab * (h11b - 1 + noab * (h7b - 1 + noab * (h6b - 
     &1 + noab * (h5b - 1)))))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_12_1',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_12_1
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_12_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h11 h10 p1 p2 p3 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h11b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER h10b
      length = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h11b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO h10b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+h10b-1)+int_mb(k_spin+p1
     &b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h10b-1),i
     &eor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+p3b-
     &1)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h10b-1)
     &+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1).ne
     &.16)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdtq_lambda4_12_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h11b = 1,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO h10b = 1,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+h10b-1)+int_mb(k_spin+p1
     &b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h10b-1),i
     &eor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+p3b-
     &1)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h10b-1)
     &+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1).ne
     &.16)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h10b - 1 + noab * (p3b - noab - 1 + nvab
     & * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h11b - 1 + n
     &oab * (h7b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+h7b-1) * int_mb(k_range+h11b-1) * int_mb(k_range+p1b-1)
     & * int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+
     &h10b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_13(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytv + = 1 * P( 6 ) * Sum ( h10 p11 ) * i1 ( h5 h6 h7 h8 h10 p1 p2 p11 )_yt * v ( h10 p11 p3 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h10b
      INTEGER p11b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER h10b_1
      INTEGER p11b_1
      INTEGER h10b_2
      INTEGER p11b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,ieor(irrep_t,irrep_v))) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * int_m
     &b(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_13',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h10b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+p11b-
     &1)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      CALL TCE_RESTRICTED_8(h5b,h6b,h7b,h8b,p1b,p2b,h10b,p11b,h5b_1,h6b_
     &1,h7b_1,h8b_1,p1b_1,p2b_1,h10b_1,p11b_1)
      CALL TCE_RESTRICTED_4(h10b,p11b,p3b,p4b,h10b_2,p11b_2,p3b_2,p4b_2)
      dim_common = int_mb(k_range+h10b-1) * int_mb(k_range+p11b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * 
     &int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_13',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_13',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p11b_
     &1 - noab - 1 + nvab * (h10b_1 - 1 + noab * (p2b_1 - noab - 1 + nva
     &b * (p1b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 1 + no
     &ab * (h6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+h10b-1
     &),int_mb(k_range+p11b-1),6,5,4,3,2,1,8,7,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_13',3,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_13',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_13',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p4b_2
     & - 1 + (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (p11b_2 - 1 + (noa
     &b+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+p11b-1),int_mb(k_range+p3b-1),int_mb(k_range+p4b-
     &1),4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_13',6,MA_
     &ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_13',
     &7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_13',
     &8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_13',9,MA_ERR)
      IF ((p2b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p3b .le. p1b) .and. (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,2,4,3,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p3b .le. p1b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,2,4,1,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p1b .le. p3b) .and. (p3b .le. p2b) .and. (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,4,2,3,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p1b .le. p3b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,4,2,1,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,2,1,4,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_13',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_13',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_13_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h8 h10 p1 p2 p11 )_yt + = -1 * Sum ( p9 ) * t ( p9 h10 )_t * y ( h5 h6 h7 h8 p1 p2 p9 p11 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER h10b
      INTEGER p11b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h10b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER p11b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h10b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+p11b-1).ne
     &.16)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+h10b-1),int_mb(k_sym+p11b-
     &1)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * int_m
     &b(k_range+p2b-1) * int_mb(k_range+h10b-1) * int_mb(k_range+p11b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_13_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h10b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p9b,h10b,p9b_1,h10b_1)
      CALL TCE_RESTRICTED_8(h5b,h6b,h7b,h8b,p1b,p2b,p11b,p9b,h5b_2,h6b_2
     &,h7b_2,h8b_2,p1b_2,p2b_2,p11b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h10b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * 
     &int_mb(k_range+p2b-1) * int_mb(k_range+p11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_13_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_13_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (p9b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h10b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_13_1',3,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_13_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_13_1',5,MA_ERR)
      IF ((p9b .le. p11b) .and. (p11b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (p11b_2 - noab - 1
     & + nvab * (p9b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p11b-1),int_mb(k_range+p1b-1
     &),int_mb(k_range+p2b-1),6,8,7,4,3,2,1,5,1.0d0)
      END IF
      IF ((p11b .lt. p9b) .and. (p9b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 
     &+ nvab * (p11b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1
     &),int_mb(k_range+p2b-1),5,8,7,4,3,2,1,6,-1.0d0)
      END IF
      IF ((p11b .lt. p1b) .and. (p1b .le. p9b) .and. (p9b .lt. p2b)) THE
     &N
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 
     &+ nvab * (p11b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1
     &),int_mb(k_range+p2b-1),5,8,6,4,3,2,1,7,1.0d0)
      END IF
      IF ((p11b .lt. p1b) .and. (p2b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 
     &+ nvab * (p11b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p9b-1),5,7,6,4,3,2,1,8,-1.0d0)
      END IF
      IF ((p9b .lt. p1b) .and. (p1b .le. p11b) .and. (p11b .lt. p2b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p11b_2 - noab - 1 + nvab * (p1b_2 - noab - 1
     & + nvab * (p9b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p11b-1
     &),int_mb(k_range+p2b-1),7,8,6,4,3,2,1,5,-1.0d0)
      END IF
      IF ((p1b .le. p9b) .and. (p9b .le. p11b) .and. (p11b .lt. p2b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p11b_2 - noab - 1 + nvab * (p9b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p11b-1
     &),int_mb(k_range+p2b-1),7,8,5,4,3,2,1,6,1.0d0)
      END IF
      IF ((p1b .le. p11b) .and. (p11b .lt. p9b) .and. (p9b .lt. p2b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p11b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p11b-1),int_mb(k_range+p9b-1
     &),int_mb(k_range+p2b-1),6,8,5,4,3,2,1,7,-1.0d0)
      END IF
      IF ((p1b .le. p11b) .and. (p11b .lt. p2b) .and. (p2b .le. p9b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p11b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p11b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p9b-1),6,7,5,4,3,2,1,8,1.0d0)
      END IF
      IF ((p9b .lt. p1b) .and. (p2b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1
     & + nvab * (p9b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p11b-1),8,7,6,4,3,2,1,5,1.0d0)
      END IF
      IF ((p1b .le. p9b) .and. (p9b .lt. p2b) .and. (p2b .le. p11b)) THE
     &N
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p11b-1),8,7,5,4,3,2,1,6,-1.0d0)
      END IF
      IF ((p2b .le. p9b) .and. (p9b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p11b-1),8,6,5,4,3,2,1,7,1.0d0)
      END IF
      IF ((p2b .le. p11b) .and. (p11b .lt. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (p11b_2 - noab - 1 + nvab * (p2b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p11b-1
     &),int_mb(k_range+p9b-1),7,6,5,4,3,2,1,8,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_13_1',6,M
     &A_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_13_1
     &',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_13_1
     &',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_13_1',9,MA_ERR)
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p11b-1
     &),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h8b-1
     &),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1),int_mb(k_range+h5b-1
     &),int_mb(k_range+h10b-1),7,6,5,4,3,2,8,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p11b 
     &- noab - 1 + nvab * (h10b - 1 + noab * (p2b - noab - 1 + nvab * (p
     &1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h6b - 
     &1 + noab * (h5b - 1)))))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_13_1',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_13_1
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_13_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h8 h10 p1 p2 p11 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER h10b
      INTEGER p11b
      length = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h10b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h10b-1)+int_mb(k_spin+p1b
     &-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h10b-1),ie
     &or(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+p11b-
     &1)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h10b-1)+
     &int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p11b-1).ne
     &.16)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdtq_lambda4_13_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h10b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h10b-1)+int_mb(k_spin+p1b
     &-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h10b-1),ie
     &or(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+p11b-
     &1)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h10b-1)+
     &int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p11b-1).ne
     &.16)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p11b - noab - 1 + nvab * (h10b - 1 + noa
     &b * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + n
     &oab * (h7b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) 
     &* int_mb(k_range+p2b-1) * int_mb(k_range+h10b-1) * int_mb(k_range+
     &p11b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_14(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytv + = -1/2 * P( 24 ) * Sum ( p10 ) * i1 ( h5 h6 p10 p1 p2 p3 )_yt * v ( h7 h8 p4 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p10b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER p10b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER p3b_1
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p4b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = 1,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      DO p4b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,ieor(irrep_t,irrep_v))) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * int_m
     &b(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_14',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+p10b-1
     &) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+p10b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),in
     &t_mb(k_sym+p3b-1)))))) .eq. ieor(irrep_y,irrep_t)) THEN
      CALL TCE_RESTRICTED_6(h5b,h6b,p10b,p1b,p2b,p3b,h5b_1,h6b_1,p10b_1,
     &p1b_1,p2b_1,p3b_1)
      CALL TCE_RESTRICTED_4(h7b,h8b,p4b,p10b,h7b_2,h8b_2,p4b_2,p10b_2)
      dim_common = int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+p1b-1) * int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb
     &(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_14',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_14',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p3b_1
     & - noab - 1 + nvab * (p2b_1 - noab - 1 + nvab * (p1b_1 - noab - 1 
     &+ nvab * (p10b_1 - noab - 1 + nvab * (h6b_1 - 1 + noab * (h5b_1 - 
     &1)))))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+p10b-1),int_mb(k_range+p1b-1
     &),int_mb(k_range+p2b-1),int_mb(k_range+p3b-1),6,5,4,2,1,3,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_14',3,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_14',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_14',5,MA_ERR)
      IF ((p10b .lt. p4b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p4b_2
     & - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p10b-1),int_mb(k_range+p4b-1
     &),4,2,1,3,-1.0d0)
      END IF
      IF ((p4b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p4b_2 - 1 + (noab+nvab) * (h8b_2 - 1 + (noa
     &b+nvab) * (h7b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+p4b-1),int_mb(k_range+p10b-1
     &),3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_14',6,MA_
     &ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_14',
     &7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_14',
     &8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_14',9,MA_ERR)
      IF ((h6b .le. h7b) .and. (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,3,2,6,5,4,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h7b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,3,2,1,6,5,4,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h7b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,3,2,6,1,5,4,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h6b .le. h7b) .and. (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,3,2,6,5,1,4,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,7,2,6,5,4,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,7,2,1,6,5,4,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,7,2,6,1,5,4,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h6b .le. h8b) .and. (p2b .le. p4b) .and.
     & (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,7,2,6,5,1,4,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,2,7,6,5,4,1,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,2,7,1,6,5,4,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,2,7,6,1,5,4,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h7b .le. h5b) .and. (h5b .le. h8b) .and. (h8b .le. h6b) .and.
     & (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,8,2,7,6,5,1,4,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &5b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,7,2,6,5,4,1,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,7,2,1,6,5,4,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,7,2,6,1,5,4,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h7b .le. h6b) .and. (h6b .le. h8b) .and.
     & (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,7,2,6,5,1,4,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h6b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,2,7,6,5,4,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,2,7,1,6,5,4,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p1b .le. p4b) .and.
     & (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,2,7,6,1,5,4,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h5b .le. h7b) .and. (h8b .le. h6b) .and. (p2b .le. p4b) .and.
     & (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,3,2,7,6,5,1,4,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h8b - 1 + noab * (h
     &7b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p3b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,2,8,7,6,5,4,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 + noab * (h
     &8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,2,8,7,1,6,5,4,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p4b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 + noab * (h
     &8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,2,8,7,6,1,5,4,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 + noab * (h
     &8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF ((h8b .le. h5b) .and. (p2b .le. p4b) .and. (p4b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),3,2,8,7,6,5,1,4,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1 + noab * (h
     &8b - 1 + noab * (h7b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_14',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_14',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_14_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 p10 p1 p2 p3 )_yt + = 1 * Sum ( h12 h11 p9 ) * t ( p9 p10 h11 h12 )_t * y ( h5 h6 h11 h12 p1 p2 p3 p9 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER p10b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER h11b
      INTEGER h12b
      INTEGER p10b_1
      INTEGER p9b_1
      INTEGER h11b_1
      INTEGER h12b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER p3b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO p10b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+p10b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+
     &int_mb(k_spin+p3b-1).ne.12)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+p10b-1
     &) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+p10b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),in
     &t_mb(k_sym+p3b-1)))))) .eq. ieor(irrep_y,irrep_t)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+p10b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1) * int_
     &mb(k_range+p3b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_14_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h12b = h11b,noab
      IF (int_mb(k_spin+p10b-1)+int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+
     &h11b-1)+int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),ieor(int_mb(k_sym+p9b-1),ieor(int_mb
     &(k_sym+h11b-1),int_mb(k_sym+h12b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p10b,p9b,h11b,h12b,p10b_1,p9b_1,h11b_1,h12b_
     &1)
      CALL TCE_RESTRICTED_8(h5b,h6b,h11b,h12b,p1b,p2b,p3b,p9b,h5b_2,h6b_
     &2,h11b_2,h12b_2,p1b_2,p2b_2,p3b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+h11b-1) * int_
     &mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p10b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+p1b-1) * int_mb(k_range+p2b-1) * int_mb(k_range+p3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_14_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_14_1',2,MA_ERR)
      IF ((p9b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h11b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p
     &9b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+h11b-1),int_mb(k_range+h12b
     &-1),2,4,3,1,1.0d0)
      END IF
      IF ((p10b .lt. p9b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h11b_1 - 1 + noab * (p9b_1 - noab - 1 + nvab * (p1
     &0b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p9b-1),int_mb(k_range+h11b-1),int_mb(k_range+h12b
     &-1),1,4,3,2,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_14_1',3,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_14_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_14_1',5,MA_ERR)
      IF ((h12b .lt. h5b) .and. (p9b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 
     &+ nvab * (p9b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h5b_2 - 1
     & + noab * (h12b_2 - 1 + noab * (h11b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+h5b-1),int_mb(k_range+h6b-
     &1),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-
     &1),int_mb(k_range+p3b-1),8,7,6,4,3,2,1,5,-1.0d0)
      END IF
      IF ((h12b .lt. h5b) .and. (p1b .le. p9b) .and. (p9b .lt. p2b)) THE
     &N
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h5b_2 - 1
     & + noab * (h12b_2 - 1 + noab * (h11b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+h5b-1),int_mb(k_range+h6b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p2b-
     &1),int_mb(k_range+p3b-1),8,7,5,4,3,2,1,6,1.0d0)
      END IF
      IF ((h12b .lt. h5b) .and. (p2b .le. p9b) .and. (p9b .lt. p3b)) THE
     &N
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h5b_2 - 1
     & + noab * (h12b_2 - 1 + noab * (h11b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+h5b-1),int_mb(k_range+h6b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p9b-
     &1),int_mb(k_range+p3b-1),8,6,5,4,3,2,1,7,-1.0d0)
      END IF
      IF ((h12b .lt. h5b) .and. (p3b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h5b_2 - 1
     & + noab * (h12b_2 - 1 + noab * (h11b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+h5b-1),int_mb(k_range+h6b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-
     &1),int_mb(k_range+p9b-1),7,6,5,4,3,2,1,8,1.0d0)
      END IF
      IF ((h11b .lt. h5b) .and. (h5b .le. h12b) .and. (h12b .lt. h6b) .a
     &nd. (p9b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 
     &+ nvab * (p9b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h12b_2 - 
     &1 + noab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h12b-1),int_mb(k_range+h6b-
     &1),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-
     &1),int_mb(k_range+p3b-1),8,7,6,4,2,3,1,5,1.0d0)
      END IF
      IF ((h11b .lt. h5b) .and. (h5b .le. h12b) .and. (h12b .lt. h6b) .a
     &nd. (p1b .le. p9b) .and. (p9b .lt. p2b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h12b_2 - 
     &1 + noab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h12b-1),int_mb(k_range+h6b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p2b-
     &1),int_mb(k_range+p3b-1),8,7,5,4,2,3,1,6,-1.0d0)
      END IF
      IF ((h11b .lt. h5b) .and. (h5b .le. h12b) .and. (h12b .lt. h6b) .a
     &nd. (p2b .le. p9b) .and. (p9b .lt. p3b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h12b_2 - 
     &1 + noab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h12b-1),int_mb(k_range+h6b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p9b-
     &1),int_mb(k_range+p3b-1),8,6,5,4,2,3,1,7,1.0d0)
      END IF
      IF ((h11b .lt. h5b) .and. (h5b .le. h12b) .and. (h12b .lt. h6b) .a
     &nd. (p3b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h12b_2 - 
     &1 + noab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h12b-1),int_mb(k_range+h6b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-
     &1),int_mb(k_range+p9b-1),7,6,5,4,2,3,1,8,-1.0d0)
      END IF
      IF ((h11b .lt. h5b) .and. (h6b .le. h12b) .and. (p9b .lt. p1b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 
     &+ nvab * (p9b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h6b_2 - 
     &1 + noab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h12b-
     &1),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-
     &1),int_mb(k_range+p3b-1),8,7,6,3,2,4,1,5,-1.0d0)
      END IF
      IF ((h11b .lt. h5b) .and. (h6b .le. h12b) .and. (p1b .le. p9b) .an
     &d. (p9b .lt. p2b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h6b_2 - 
     &1 + noab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h12b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p2b-
     &1),int_mb(k_range+p3b-1),8,7,5,3,2,4,1,6,1.0d0)
      END IF
      IF ((h11b .lt. h5b) .and. (h6b .le. h12b) .and. (p2b .le. p9b) .an
     &d. (p9b .lt. p3b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h6b_2 - 
     &1 + noab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h12b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p9b-
     &1),int_mb(k_range+p3b-1),8,6,5,3,2,4,1,7,-1.0d0)
      END IF
      IF ((h11b .lt. h5b) .and. (h6b .le. h12b) .and. (p3b .le. p9b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h6b_2 - 
     &1 + noab * (h5b_2 - 1 + noab * (h11b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h12b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-
     &1),int_mb(k_range+p9b-1),7,6,5,3,2,4,1,8,1.0d0)
      END IF
      IF ((h5b .le. h11b) .and. (h12b .lt. h6b) .and. (p9b .lt. p1b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 
     &+ nvab * (p9b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h12b_2 - 
     &1 + noab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h12b-1),int_mb(k_range+h6b-
     &1),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-
     &1),int_mb(k_range+p3b-1),8,7,6,4,1,3,2,5,-1.0d0)
      END IF
      IF ((h5b .le. h11b) .and. (h12b .lt. h6b) .and. (p1b .le. p9b) .an
     &d. (p9b .lt. p2b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h12b_2 - 
     &1 + noab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h12b-1),int_mb(k_range+h6b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p2b-
     &1),int_mb(k_range+p3b-1),8,7,5,4,1,3,2,6,1.0d0)
      END IF
      IF ((h5b .le. h11b) .and. (h12b .lt. h6b) .and. (p2b .le. p9b) .an
     &d. (p9b .lt. p3b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h12b_2 - 
     &1 + noab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h12b-1),int_mb(k_range+h6b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p9b-
     &1),int_mb(k_range+p3b-1),8,6,5,4,1,3,2,7,-1.0d0)
      END IF
      IF ((h5b .le. h11b) .and. (h12b .lt. h6b) .and. (p3b .le. p9b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h6b_2 - 1 + noab * (h12b_2 - 
     &1 + noab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h12b-1),int_mb(k_range+h6b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-
     &1),int_mb(k_range+p9b-1),7,6,5,4,1,3,2,8,1.0d0)
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (h6b .le. h12b) .a
     &nd. (p9b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 
     &+ nvab * (p9b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h6b_2 - 
     &1 + noab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h6b-1),int_mb(k_range+h12b-
     &1),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-
     &1),int_mb(k_range+p3b-1),8,7,6,3,1,4,2,5,1.0d0)
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (h6b .le. h12b) .a
     &nd. (p1b .le. p9b) .and. (p9b .lt. p2b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h6b_2 - 
     &1 + noab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h6b-1),int_mb(k_range+h12b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p2b-
     &1),int_mb(k_range+p3b-1),8,7,5,3,1,4,2,6,-1.0d0)
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (h6b .le. h12b) .a
     &nd. (p2b .le. p9b) .and. (p9b .lt. p3b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h6b_2 - 
     &1 + noab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h6b-1),int_mb(k_range+h12b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p9b-
     &1),int_mb(k_range+p3b-1),8,6,5,3,1,4,2,7,1.0d0)
      END IF
      IF ((h5b .le. h11b) .and. (h11b .lt. h6b) .and. (h6b .le. h12b) .a
     &nd. (p3b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h6b_2 - 
     &1 + noab * (h11b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h6b-1),int_mb(k_range+h12b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-
     &1),int_mb(k_range+p9b-1),7,6,5,3,1,4,2,8,-1.0d0)
      END IF
      IF ((h6b .le. h11b) .and. (p9b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 
     &+ nvab * (p9b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h11b_2 -
     & 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h11b-1),int_mb(k_range+h12b-
     &1),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-
     &1),int_mb(k_range+p3b-1),8,7,6,2,1,4,3,5,-1.0d0)
      END IF
      IF ((h6b .le. h11b) .and. (p1b .le. p9b) .and. (p9b .lt. p2b)) THE
     &N
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h11b_2 -
     & 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h11b-1),int_mb(k_range+h12b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p2b-
     &1),int_mb(k_range+p3b-1),8,7,5,2,1,4,3,6,1.0d0)
      END IF
      IF ((h6b .le. h11b) .and. (p2b .le. p9b) .and. (p9b .lt. p3b)) THE
     &N
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h11b_2 -
     & 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h11b-1),int_mb(k_range+h12b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p9b-
     &1),int_mb(k_range+p3b-1),8,6,5,2,1,4,3,7,-1.0d0)
      END IF
      IF ((h6b .le. h11b) .and. (p3b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (p3b_2 - noab - 1 + nvab * (p2b_2 - noab - 1 
     &+ nvab * (p1b_2 - noab - 1 + nvab * (h12b_2 - 1 + noab * (h11b_2 -
     & 1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h11b-1),int_mb(k_range+h12b-
     &1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p3b-
     &1),int_mb(k_range+p9b-1),7,6,5,2,1,4,3,8,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_14_1',6,M
     &A_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h11b .eq. h12b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_14_1
     &',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_14_1
     &',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_14_1',9,MA_ERR)
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p3b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),int_mb(k_range+p10b-1),5,4,6,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p3b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p10b - noab - 1 + nvab * (h6b - 1 + noab * (h5b - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_14_1',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_14_1
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_14_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 p10 p1 p2 p3 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h5b
      INTEGER h6b
      INTEGER p10b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      length = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO p10b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+p10b-1
     &) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+p10b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),in
     &t_mb(k_sym+p3b-1)))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+p10b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+
     &int_mb(k_spin+p3b-1).ne.12)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdtq_lambda4_14_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO p10b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = p2b,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+p10b-1
     &) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+p10b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),in
     &t_mb(k_sym+p3b-1)))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+p10b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+
     &int_mb(k_spin+p3b-1).ne.12)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p3b - noab - 1 + nvab * (p2b - noab - 1 
     &+ nvab * (p1b - noab - 1 + nvab * (p10b - noab - 1 + nvab * (h6b -
     & 1 + noab * (h5b - 1)))))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+p10b-1) * int_mb(k_range+p1b-1) * int_mb(k_range+p2b-1)
     & * int_mb(k_range+p3b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_15(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h5 h6 h7 h8 p1 p2 p3 p4 )_ytv + = 1/4 * P( 6 ) * Sum ( h13 h12 ) * i1 ( h5 h6 h7 h8 h12 h13 p1 p2 )_yt * v ( h12 h13 p3 p4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER p3b
      INTEGER p4b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h12b
      INTEGER h13b
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h7b_1
      INTEGER h8b_1
      INTEGER p1b_1
      INTEGER p2b_1
      INTEGER h12b_1
      INTEGER h13b_1
      INTEGER h12b_2
      INTEGER h13b_2
      INTEGER p3b_2
      INTEGER p4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO p3b = noab+1,noab+nvab
      DO p4b = p3b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+p3b-1)+int_mb(k_spin+p4b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+p3b-1),int_mb(k_sym+p4b-1)
     &))))))) .eq. ieor(irrep_y,ieor(irrep_t,irrep_v))) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * int_m
     &b(k_range+p2b-1) * int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_15',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h12b = 1,noab
      DO h13b = h12b,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+h12b-1),int_mb(k_sym+h13b-
     &1)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      CALL TCE_RESTRICTED_8(h5b,h6b,h7b,h8b,p1b,p2b,h12b,h13b,h5b_1,h6b_
     &1,h7b_1,h8b_1,p1b_1,p2b_1,h12b_1,h13b_1)
      CALL TCE_RESTRICTED_4(h12b,h13b,p3b,p4b,h12b_2,h13b_2,p3b_2,p4b_2)
      dim_common = int_mb(k_range+h12b-1) * int_mb(k_range+h13b-1)
      dima_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * 
     &int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p3b-1) * int_mb(k_range+p4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_15',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_15',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h13b_
     &1 - 1 + noab * (h12b_1 - 1 + noab * (p2b_1 - noab - 1 + nvab * (p1
     &b_1 - noab - 1 + nvab * (h8b_1 - 1 + noab * (h7b_1 - 1 + noab * (h
     &6b_1 - 1 + noab * (h5b_1 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+h12b-1
     &),int_mb(k_range+h13b-1),6,5,4,3,2,1,8,7,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_15',3,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_15',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_15',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p4b_2
     & - 1 + (noab+nvab) * (p3b_2 - 1 + (noab+nvab) * (h13b_2 - 1 + (noa
     &b+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h13b-1),int_mb(k_range+p3b-1),int_mb(k_range+p4b-
     &1),4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_15',6,MA_
     &ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h12b .eq. h13b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_15',
     &7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_15',
     &8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_15',9,MA_ERR)
      IF ((p2b .le. p3b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,4,3,2,1,1.0d0/4.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p3b - noab - 1 + nvab * (p2b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p3b .le. p1b) .and. (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,2,4,3,1,1.0d0/4.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p3b .le. p1b) .and. (p1b .le. p4b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,2,4,1,3,-1.0d0/4.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p1b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p1b .le. p3b) .and. (p3b .le. p2b) .and. (p2b .le. p4b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,4,2,3,1,-1.0d0/4.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p4b -
     & noab - 1 + nvab * (p2b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p1b .le. p3b) .and. (p4b .le. p2b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,4,2,1,3,1.0d0/4.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p4b - noab - 1 + nvab * (p3b - noab - 1 + nvab
     & * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF ((p4b .le. p1b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1)
     &,int_mb(k_range+h8b-1),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1)
     &,int_mb(k_range+h5b-1),8,7,6,5,2,1,4,3,1.0d0/4.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (p1b - noab - 1 + nvab * (p4b - noab - 1 + nvab
     & * (p3b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h
     &6b - 1 + noab * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_15',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_15',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_15_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h8 h12 h13 p1 p2 )_yt + = 1 * Sum ( p10 p9 ) * t ( p9 p10 h12 h13 )_t * y ( h5 h6 h7 h8 p1 p2 p9 p10 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER h12b
      INTEGER h13b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER p10b
      INTEGER p9b_1
      INTEGER p10b_1
      INTEGER h12b_1
      INTEGER h13b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER p9b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h12b = 1,noab
      DO h13b = h12b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1).ne
     &.16)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+h12b-1),int_mb(k_sym+h13b-
     &1)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * int_m
     &b(k_range+p2b-1) * int_mb(k_range+h12b-1) * int_mb(k_range+h13b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_15_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      IF (int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h12b-1)+int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h12b-1),int_mb(k_sym+h13b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p9b,p10b,h12b,h13b,p9b_1,p10b_1,h12b_1,h13b_
     &1)
      CALL TCE_RESTRICTED_8(h5b,h6b,h7b,h8b,p1b,p2b,p9b,p10b,h5b_2,h6b_2
     &,h7b_2,h8b_2,p1b_2,p2b_2,p9b_2,p10b_2)
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h12b-1) * int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * 
     &int_mb(k_range+p2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_15_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_15_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h13b_
     &1 - 1 + noab * (h12b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p
     &9b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+h12b-1),int_mb(k_range+h13b
     &-1),4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_15_1',3,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_15_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_15_1',5,MA_ERR)
      IF ((p10b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (p10b_2 - noab - 1
     & + nvab * (p9b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p10b-1),int_mb(k_range+p1b-1
     &),int_mb(k_range+p2b-1),8,7,4,3,2,1,6,5,1.0d0)
      END IF
      IF ((p9b .lt. p1b) .and. (p1b .le. p10b) .and. (p10b .lt. p2b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p1b_2 - noab - 1
     & + nvab * (p9b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p10b-1
     &),int_mb(k_range+p2b-1),8,6,4,3,2,1,7,5,-1.0d0)
      END IF
      IF ((p9b .lt. p1b) .and. (p2b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1
     & + nvab * (p9b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p10b-1),7,6,4,3,2,1,8,5,1.0d0)
      END IF
      IF ((p1b .le. p9b) .and. (p10b .lt. p2b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p9b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p10b-1
     &),int_mb(k_range+p2b-1),8,5,4,3,2,1,7,6,1.0d0)
      END IF
      IF ((p1b .le. p9b) .and. (p9b .lt. p2b) .and. (p2b .le. p10b)) THE
     &N
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p10b-1),7,5,4,3,2,1,8,6,-1.0d0)
      END IF
      IF ((p2b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p10b-1),6,5,4,3,2,1,8,7,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_15_1',6,M
     &A_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p9b .eq. p10b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_15_1
     &',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_15_1
     &',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_15_1',9,MA_ERR)
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+h8b-1),int_mb(k_range+h7b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h5b-1),int_mb(k_range+h13b-1
     &),int_mb(k_range+h12b-1),6,5,4,3,2,1,8,7,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h13b 
     &- 1 + noab * (h12b - 1 + noab * (p2b - noab - 1 + nvab * (p1b - no
     &ab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h6b - 1 + noa
     &b * (h5b - 1)))))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_15_1',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_15_1
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_15_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h8 h12 h13 p1 p2 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER h12b
      INTEGER h13b
      length = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h12b = 1,noab
      DO h13b = h12b,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h12b-1)+int_mb(k_spin+h13
     &b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h12b-1),ie
     &or(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+p1b-1),int_mb(k_sym+p2b-
     &1)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+h13b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).ne
     &.16)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdtq_lambda4_15_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h12b = 1,noab
      DO h13b = h12b,noab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h12b-1)+int_mb(k_spin+h13
     &b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h12b-1),ie
     &or(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+p1b-1),int_mb(k_sym+p2b-
     &1)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+h13b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).ne
     &.16)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h13b - 1 + noab * (h12b - 1 + noab * (p2
     &b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + noab * (
     &h7b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) 
     &* int_mb(k_range+p2b-1) * int_mb(k_range+h12b-1) * int_mb(k_range+
     &h13b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_15_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h5 h6 h7 h8 h12 h13 p1 p2 )_ytt + = 2 * Sum ( p9 ) * t ( p9 h13 )_t * i2 ( h5 h6 h7 h8 h12 p1 p2 p9 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER h13b
      INTEGER h12b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h13b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER h12b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h13b = 1,noab
      DO h12b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1).ne
     &.16)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+h12b-1),int_mb(k_sym+h13b-
     &1)))))))) .eq. ieor(irrep_y,ieor(irrep_t,irrep_t))) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * int_m
     &b(k_range+p2b-1) * int_mb(k_range+h12b-1) * int_mb(k_range+h13b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_15_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h13b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p9b,h13b,p9b_1,h13b_1)
      CALL TCE_RESTRICTED_8(h5b,h6b,h7b,h8b,p1b,p2b,h12b,p9b,h5b_2,h6b_2
     &,h7b_2,h8b_2,p1b_2,p2b_2,h12b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * 
     &int_mb(k_range+p2b-1) * int_mb(k_range+h12b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_15_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_15_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h13b_
     &1 - 1 + noab * (p9b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h13b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_15_2',3,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_15_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_15_2',5,MA_ERR)
      IF ((h12b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (h12b_2 - 1 + noab * (p2b_2 - noab - 1 + nvab
     & * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 1 + noa
     &b * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+h12b-1
     &),int_mb(k_range+p9b-1),7,6,5,4,3,2,1,8,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_15_2',6,M
     &A_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_15_2
     &',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_15_2
     &',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_15_2',9,MA_ERR)
      IF ((h12b .le. h13b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h12b-1
     &),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h8b-1
     &),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1),int_mb(k_range+h5b-1
     &),int_mb(k_range+h13b-1),7,6,5,4,3,2,1,8,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h13b 
     &- 1 + noab * (h12b - 1 + noab * (p2b - noab - 1 + nvab * (p1b - no
     &ab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h6b - 1 + noa
     &b * (h5b - 1)))))))))
      END IF
      IF ((h13b .le. h12b)) THEN
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h12b-1
     &),int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h8b-1
     &),int_mb(k_range+h7b-1),int_mb(k_range+h6b-1),int_mb(k_range+h5b-1
     &),int_mb(k_range+h13b-1),7,6,5,4,3,2,8,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h12b 
     &- 1 + noab * (h13b - 1 + noab * (p2b - noab - 1 + nvab * (p1b - no
     &ab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h6b - 1 + noa
     &b * (h5b - 1)))))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_15_2',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_15_2
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdtq_lambda4_15_2_1(d_a,k_a_offset,d_b,k_b_offset,d_c
     &,k_c_offset)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 h6 h7 h8 h12 p1 p2 p9 )_yt + = -1 * Sum ( p11 ) * t ( p11 h12 )_t * y ( h5 h6 h7 h8 p1 p2 p9 p11 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER h12b
      INTEGER p9b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p11b
      INTEGER p11b_1
      INTEGER h12b_1
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h7b_2
      INTEGER h8b_2
      INTEGER p1b_2
      INTEGER p2b_2
      INTEGER p9b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h12b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p1b-1)+i
     &nt_mb(k_spin+p2b-1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+p9b-1).ne.
     &16)) THEN
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-
     &1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+p1b-1),ieo
     &r(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+h12b-1),int_mb(k_sym+p9b-1
     &)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      dimc = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb(k_ra
     &nge+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * int_m
     &b(k_range+p2b-1) * int_mb(k_range+h12b-1) * int_mb(k_range+p9b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_15_2_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),int_mb(k_sym+h12b-1)) .eq. irrep_t) 
     &THEN
      CALL TCE_RESTRICTED_2(p11b,h12b,p11b_1,h12b_1)
      CALL TCE_RESTRICTED_8(h5b,h6b,h7b,h8b,p1b,p2b,p9b,p11b,h5b_2,h6b_2
     &,h7b_2,h8b_2,p1b_2,p2b_2,p9b_2,p11b_2)
      dim_common = int_mb(k_range+p11b-1)
      dima_sort = int_mb(k_range+h12b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_mb
     &(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) * 
     &int_mb(k_range+p2b-1) * int_mb(k_range+p9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_15_2_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda4_15_2_1',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (p11b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p11b-1
     &),int_mb(k_range+h12b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda4_15_2_1',3
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda4_15_2_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda4_15_2_1',5,MA_ERR)
      IF ((p11b .lt. p9b) .and. (p9b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (p9b_2 - noab - 1 
     &+ nvab * (p11b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1
     &),int_mb(k_range+p2b-1),6,8,7,4,3,2,1,5,-1.0d0)
      END IF
      IF ((p9b .le. p11b) .and. (p11b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (p11b_2 - noab - 1
     & + nvab * (p9b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p11b-1),int_mb(k_range+p1b-1
     &),int_mb(k_range+p2b-1),5,8,7,4,3,2,1,6,1.0d0)
      END IF
      IF ((p9b .lt. p1b) .and. (p1b .le. p11b) .and. (p11b .lt. p2b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p11b_2 - noab - 1 + nvab * (p1b_2 - noab - 1
     & + nvab * (p9b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p11b-1
     &),int_mb(k_range+p2b-1),5,8,6,4,3,2,1,7,-1.0d0)
      END IF
      IF ((p9b .lt. p1b) .and. (p2b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1
     & + nvab * (p9b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p11b-1),5,7,6,4,3,2,1,8,1.0d0)
      END IF
      IF ((p11b .lt. p1b) .and. (p1b .le. p9b) .and. (p9b .lt. p2b)) THE
     &N
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 
     &+ nvab * (p11b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1
     &),int_mb(k_range+p2b-1),7,8,6,4,3,2,1,5,1.0d0)
      END IF
      IF ((p1b .le. p11b) .and. (p11b .lt. p9b) .and. (p9b .lt. p2b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p11b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p11b-1),int_mb(k_range+p9b-1
     &),int_mb(k_range+p2b-1),7,8,5,4,3,2,1,6,-1.0d0)
      END IF
      IF ((p1b .le. p9b) .and. (p9b .le. p11b) .and. (p11b .lt. p2b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (p11b_2 - noab - 1 + nvab * (p9b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p11b-1
     &),int_mb(k_range+p2b-1),6,8,5,4,3,2,1,7,1.0d0)
      END IF
      IF ((p1b .le. p9b) .and. (p9b .lt. p2b) .and. (p2b .le. p11b)) THE
     &N
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p9b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p11b-1),6,7,5,4,3,2,1,8,-1.0d0)
      END IF
      IF ((p11b .lt. p1b) .and. (p2b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p1b_2 - noab - 1 
     &+ nvab * (p11b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+p1b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p9b-1),8,7,6,4,3,2,1,5,-1.0d0)
      END IF
      IF ((p1b .le. p11b) .and. (p11b .lt. p2b) .and. (p2b .le. p9b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (p2b_2 - noab - 1 + nvab * (p11b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p11b-1),int_mb(k_range+p2b-1
     &),int_mb(k_range+p9b-1),8,7,5,4,3,2,1,6,1.0d0)
      END IF
      IF ((p2b .le. p11b) .and. (p11b .lt. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (p11b_2 - noab - 1 + nvab * (p2b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p11b-1
     &),int_mb(k_range+p9b-1),8,6,5,4,3,2,1,7,-1.0d0)
      END IF
      IF ((p2b .le. p9b) .and. (p9b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (p2b_2 - noab - 1
     & + nvab * (p1b_2 - noab - 1 + nvab * (h8b_2 - 1 + noab * (h7b_2 - 
     &1 + noab * (h6b_2 - 1 + noab * (h5b_2 - 1)))))))))
      CALL TCE_SORT_8(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h6b-1),int_mb(k_range+h7b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+p1b-1),int_mb(k_range+p2b-1),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p11b-1),7,6,5,4,3,2,1,8,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda4_15_2_1',6
     &,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda4_15_2
     &_1',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda4_15_2
     &_1',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda4_15_2_1',9,MA_ERR)
      CALL TCE_SORT_8(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+p1b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h7b-1),int_mb(k_range+h6b-1),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h12b-1),7,6,5,4,3,2,8,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h12b - 1 + noab * (p2b - noab - 1 + nvab * (p1
     &b - noab - 1 + nvab * (h8b - 1 + noab * (h7b - 1 + noab * (h6b - 1
     & + noab * (h5b - 1)))))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda4_15_2_1',1
     &0,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda4_15_2
     &_1',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdtq_lambda4_15_2_1(l_a_offset,k_a_offset,size
     &)
C     $Id: ccsdtq_lambda4.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h5 h6 h7 h8 h12 p1 p2 p9 )_yt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h5b
      INTEGER h6b
      INTEGER h7b
      INTEGER h8b
      INTEGER p1b
      INTEGER p2b
      INTEGER h12b
      INTEGER p9b
      length = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h12b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h12b-1)+int_mb(k_spin+p1b
     &-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h12b-1),ie
     &or(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+p9b-1
     &)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p9b-1).ne.
     &16)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdtq_lambda4_15_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h5b = 1,noab
      DO h6b = h5b,noab
      DO h7b = h6b,noab
      DO h8b = h7b,noab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h12b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)+int_mb(k_spin+h7b-1)
     &+int_mb(k_spin+h8b-1) .eq. int_mb(k_spin+h12b-1)+int_mb(k_spin+p1b
     &-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h5b-1),ieor(int_mb(k_sym+h6b-1),ieor(int_mb(
     &k_sym+h7b-1),ieor(int_mb(k_sym+h8b-1),ieor(int_mb(k_sym+h12b-1),ie
     &or(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+p9b-1
     &)))))))) .eq. ieor(irrep_y,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1
     &)+int_mb(k_spin+h7b-1)+int_mb(k_spin+h8b-1)+int_mb(k_spin+h12b-1)+
     &int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)+int_mb(k_spin+p9b-1).ne.
     &16)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p9b - noab - 1 + nvab * (h12b - 1 + noab
     & * (p2b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (h8b - 1 + no
     &ab * (h7b - 1 + noab * (h6b - 1 + noab * (h5b - 1)))))))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h5b-1) * int_mb(k_range+h6b-1) * int_
     &mb(k_range+h7b-1) * int_mb(k_range+h8b-1) * int_mb(k_range+p1b-1) 
     &* int_mb(k_range+p2b-1) * int_mb(k_range+h12b-1) * int_mb(k_range+
     &p9b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
c#endif
