      SUBROUTINE ccsdtq_lambda1_18(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c
     &_offset)
C     $Id: ccsdtq_lambda1_18.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h2 p1 )_vty + = 1/2 * Sum ( p14 p11 h15 h12 h13 ) * y ( h12 h13 h15 p1 p11 p14 )_y * i1 ( h2 p11 p14 h12 h13 h15 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h2b
      INTEGER p1b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h12b
      INTEGER h13b
      INTEGER h15b
      INTEGER p11b
      INTEGER p14b
      INTEGER h12b_1
      INTEGER h13b_1
      INTEGER h15b_1
      INTEGER p1b_1
      INTEGER p11b_1
      INTEGER p14b_1
      INTEGER h2b_2
      INTEGER p11b_2
      INTEGER p14b_2
      INTEGER h12b_2
      INTEGER h13b_2
      INTEGER h15b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperh(3)
      INTEGER isuperh
      INTEGER nsubp(2)
      INTEGER isubp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h2b = 1,noab
      DO p1b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+p1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h2b-1) .eq. int_mb(k_spin+p1b-1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),int_mb(k_sym+p1b-1)) .eq. ieor(irrep_
     &v,ieor(irrep_t,irrep_y))) THEN
      dimc = int_mb(k_range+h2b-1) * int_mb(k_range+p1b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_18',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h12b = 1,noab
      DO h13b = h12b,noab
      DO h15b = h13b,noab
      DO p11b = noab+1,noab+nvab
      DO p14b = p11b,noab+nvab
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h15b
     &-1) .eq. int_mb(k_spin+p1b-1)+int_mb(k_spin+p11b-1)+int_mb(k_spin+
     &p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_m
     &b(k_sym+h15b-1),ieor(int_mb(k_sym+p1b-1),ieor(int_mb(k_sym+p11b-1)
     &,int_mb(k_sym+p14b-1)))))) .eq. irrep_y) THEN
      CALL TCE_RESTRICTED_6(h12b,h13b,h15b,p1b,p11b,p14b,h12b_1,h13b_1,h
     &15b_1,p1b_1,p11b_1,p14b_1)
      CALL TCE_RESTRICTED_6(h2b,p11b,p14b,h12b,h13b,h15b,h2b_2,p11b_2,p1
     &4b_2,h12b_2,h13b_2,h15b_2)
      dim_common = int_mb(k_range+h12b-1) * int_mb(k_range+h13b-1) * int
     &_mb(k_range+h15b-1) * int_mb(k_range+p11b-1) * int_mb(k_range+p14b
     &-1)
      dima_sort = int_mb(k_range+p1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_18',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdtq_lambda1_18',2,MA_ERR)
      IF ((p14b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p1b_1
     & - noab - 1 + nvab * (p14b_1 - noab - 1 + nvab * (p11b_1 - noab - 
     &1 + nvab * (h15b_1 - 1 + noab * (h13b_1 - 1 + noab * (h12b_1 - 1))
     &)))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h13b-1),int_mb(k_range+h15b-1),int_mb(k_range+p11
     &b-1),int_mb(k_range+p14b-1),int_mb(k_range+p1b-1),6,5,4,3,2,1,1.0d
     &0)
      END IF
      IF ((p11b .lt. p1b) .and. (p1b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p14b_
     &1 - noab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (p11b_1 - noab - 
     &1 + nvab * (h15b_1 - 1 + noab * (h13b_1 - 1 + noab * (h12b_1 - 1))
     &)))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h13b-1),int_mb(k_range+h15b-1),int_mb(k_range+p11
     &b-1),int_mb(k_range+p1b-1),int_mb(k_range+p14b-1),5,6,4,3,2,1,-1.0
     &d0)
      END IF
      IF ((p1b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p14b_
     &1 - noab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p1b_1 - noab - 
     &1 + nvab * (h15b_1 - 1 + noab * (h13b_1 - 1 + noab * (h12b_1 - 1))
     &)))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h13b-1),int_mb(k_range+h15b-1),int_mb(k_range+p1b
     &-1),int_mb(k_range+p11b-1),int_mb(k_range+p14b-1),4,6,5,3,2,1,1.0d
     &0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdtq_lambda1_18',3,MA_
     &ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdtq_lambda1_18',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdtq_lambda1_18',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(h15b_
     &2 - 1 + noab * (h13b_2 - 1 + noab * (h12b_2 - 1 + noab * (p14b_2 -
     & noab - 1 + nvab * (p11b_2 - noab - 1 + nvab * (h2b_2 - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+p14b-1),int_mb(k_range+h12b
     &-1),int_mb(k_range+h13b-1),int_mb(k_range+h15b-1),1,3,2,6,5,4,1.0d
     &0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdtq_lambda1_18',6,MA_
     &ERR)
      nsuperh(1) = 1
      nsuperh(2) = 1
      nsuperh(3) = 1
      isuperh = 1
      IF (h12b .eq. h13b) THEN
      nsuperh(isuperh) = nsuperh(isuperh) + 1
      ELSE
      isuperh = isuperh + 1
      END IF
      IF (h13b .eq. h15b) THEN
      nsuperh(isuperh) = nsuperh(isuperh) + 1
      ELSE
      isuperh = isuperh + 1
      END IF
      nsubp(1) = 1
      nsubp(2) = 1
      isubp = 1
      IF (p11b .eq. p14b) THEN
      nsubp(isubp) = nsubp(isubp) + 1
      ELSE
      isubp = isubp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,12.0d0/FACTORIAL
     &(nsuperh(1))/FACTORIAL(nsuperh(2))/FACTORIAL(nsuperh(3))/FACTORIAL
     &(nsubp(1))/FACTORIAL(nsubp(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(
     &k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdtq_lambda1_18',
     &7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdtq_lambda1_18',
     &8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdtq_lambda1_18',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+p1b-1),1,2,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p1b -
     & noab - 1 + nvab * (h2b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdtq_lambda1_18',10,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdtq_lambda1_18',
     &11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
