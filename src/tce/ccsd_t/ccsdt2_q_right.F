      SUBROUTINE ccsdt2_q_right(a_i0,d_f1,d_i1_1,d_i1_2,d_i1_3,d_i1_4,d_
     &i1_5,d_i1_6,d_t1,d_t2,d_t3,d_v2,k_f1_offset,k_i1_offset_1,k_i1_off
     &set_2,k_i1_offset_3,k_i1_offset_4,k_i1_offset_5,k_i1_offset_6,k_t1
     &_offset,k_t2_offset,k_t3_offset,k_v2_offset,l_i1_offset_1,l_i1_off
     &set_2,l_i1_offset_3,l_i1_offset_4,l_i1_offset_5,l_i1_offset_6,t_h1
     &b,t_h2b,t_h3b,t_h4b,t_p5b,t_p6b,t_p7b,t_p8b,toggle)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p5 p6 p7 p8 h1 h2 h3 h4 )_vt + = -1 * P( 24 ) * Sum ( h14 ) * t ( p5 p6 p7 h1 h2 h14 )_t * i1 ( h14 p8 h3 h4 )_v
C         i1 ( h14 p5 h1 h2 )_v + = 1 * v ( h14 p5 h1 h2 )_v
C         i1 ( h14 p5 h1 h2 )_vt + = 1 * Sum ( h12 ) * t ( p5 h12 )_t * i2 ( h12 h14 h1 h2 )_v
C             i2 ( h12 h14 h1 h2 )_v + = 1 * v ( h12 h14 h1 h2 )_v
C             i2 ( h12 h14 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( p9 ) * t ( p9 h1 )_t * i3 ( h12 h14 h2 p9 )_v
C                 i3 ( h12 h14 h1 p9 )_v + = 1 * v ( h12 h14 h1 p9 )_v
C                 i3 ( h12 h14 h1 p9 )_vt + = -1/2 * Sum ( p10 ) * t ( p10 h1 )_t * v ( h12 h14 p9 p10 )_v
C             i2 ( h12 h14 h1 h2 )_vt + = 1/2 * Sum ( p10 p11 ) * t ( p10 p11 h1 h2 )_t * v ( h12 h14 p10 p11 )_v
C         i1 ( h14 p5 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( p11 ) * t ( p11 h1 )_t * i2 ( h14 p5 h2 p11 )_v
C             i2 ( h14 p5 h1 p11 )_v + = 1 * v ( h14 p5 h1 p11 )_v
C             i2 ( h14 p5 h1 p11 )_vt + = 1/2 * Sum ( p10 ) * t ( p10 h1 )_t * v ( h14 p5 p10 p11 )_v
C         i1 ( h14 p5 h1 h2 )_ft + = -1 * Sum ( p10 ) * t ( p5 p10 h1 h2 )_t * i2 ( h14 p10 )_f
C             i2 ( h14 p10 )_f + = 1 * f ( h14 p10 )_f
C             i2 ( h14 p10 )_vt + = -1 * Sum ( h12 p11 ) * t ( p11 h12 )_t * v ( h12 h14 p10 p11 )_v
C         i1 ( h14 p5 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( h11 p10 ) * t ( p5 p10 h1 h11 )_t * i2 ( h11 h14 h2 p10 )_v
C             i2 ( h11 h14 h1 p10 )_v + = 1 * v ( h11 h14 h1 p10 )_v
C             i2 ( h11 h14 h1 p10 )_vt + = -1 * Sum ( p12 ) * t ( p12 h1 )_t * v ( h11 h14 p10 p12 )_v
C         i1 ( h14 p5 h1 h2 )_vt + = 1/2 * Sum ( p10 p11 ) * t ( p10 p11 h1 h2 )_t * v ( h14 p5 p10 p11 )_v
C         i1 ( h14 p5 h1 h2 )_vt + = 1/2 * Sum ( h12 p10 p11 ) * t ( p5 p10 p11 h1 h2 h12 )_t * v ( h12 h14 p10 p11 )_v
C     i0 ( p5 p6 p7 p8 h1 h2 h3 h4 )_vt + = -1 * P( 24 ) * Sum ( p14 ) * t ( p5 p6 p14 h1 h2 h3 )_t * i1 ( p7 p8 h4 p14 )_v
C         i1 ( p5 p6 h1 p14 )_v + = 1 * v ( p5 p6 h1 p14 )_v
C         i1 ( p5 p6 h1 p14 )_vt + = -1 * P( 2 ) * Sum ( h13 ) * t ( p5 h13 )_t * i2 ( h13 p6 h1 p14 )_v
C             i2 ( h13 p5 h1 p14 )_v + = 1 * v ( h13 p5 h1 p14 )_v
C             i2 ( h13 p5 h1 p14 )_vt + = 1/2 * Sum ( h12 ) * t ( p5 h12 )_t * i3 ( h12 h13 h1 p14 )_v
C                 i3 ( h12 h13 h1 p14 )_v + = 1 * v ( h12 h13 h1 p14 )_v
C                 i3 ( h12 h13 h1 p14 )_vt + = 1 * Sum ( p9 ) * t ( p9 h1 )_t * v ( h12 h13 p9 p14 )_v
C             i2 ( h13 p5 h1 p14 )_vt + = 1 * Sum ( p9 ) * t ( p9 h1 )_t * v ( h13 p5 p9 p14 )_v
C             i2 ( h13 p5 h1 p14 )_vt + = -1 * Sum ( h11 p10 ) * t ( p5 p10 h1 h11 )_t * v ( h11 h13 p10 p14 )_v
C         i1 ( p5 p6 h1 p14 )_vt + = 1 * Sum ( p10 ) * t ( p10 h1 )_t * v ( p5 p6 p10 p14 )_v
C         i1 ( p5 p6 h1 p14 )_ft + = -1 * Sum ( h13 ) * t ( p5 p6 h1 h13 )_t * i2 ( h13 p14 )_f
C             i2 ( h13 p14 )_f + = 1 * f ( h13 p14 )_f
C             i2 ( h13 p14 )_vt + = 1 * Sum ( h12 p11 ) * t ( p11 h12 )_t * v ( h12 h13 p11 p14 )_v
C         i1 ( p5 p6 h1 p14 )_vt + = 1/2 * Sum ( h10 h11 ) * t ( p5 p6 h10 h11 )_t * i2 ( h10 h11 h1 p14 )_v
C             i2 ( h10 h11 h1 p14 )_v + = 1 * v ( h10 h11 h1 p14 )_v
C             i2 ( h10 h11 h1 p14 )_vt + = 1 * Sum ( p12 ) * t ( p12 h1 )_t * v ( h10 h11 p12 p14 )_v
C         i1 ( p5 p6 h1 p14 )_vt + = 1 * P( 2 ) * Sum ( h11 p10 ) * t ( p5 p10 h1 h11 )_t * v ( h11 p6 p10 p14 )_v
C         i1 ( p5 p6 h1 p14 )_vt + = 1/2 * Sum ( h11 h12 p10 ) * t ( p5 p6 p10 h1 h11 h12 )_t * v ( h11 h12 p10 p14 )_v
C     i0 ( p5 p6 p7 p8 h1 h2 h3 h4 )_vtt + = 3/2 * P( 24 ) * Sum ( h14 ) * t ( p5 p6 h1 h14 )_t * i1 ( h14 p7 p8 h2 h3 h4 )_vt
C         i1 ( h14 p5 p6 h1 h2 h3 )_vt + = 1/3 * P( 3 ) * Sum ( h10 ) * t ( p5 p6 h1 h10 )_t * i2 ( h10 h14 h2 h3 )_v
C             i2 ( h10 h14 h1 h2 )_v + = 1 * v ( h10 h14 h1 h2 )_v
C             i2 ( h10 h14 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( p11 ) * t ( p11 h1 )_t * i3 ( h10 h14 h2 p11 )_v
C                 i3 ( h10 h14 h1 p11 )_v + = 1 * v ( h10 h14 h1 p11 )_v
C                 i3 ( h10 h14 h1 p11 )_vt + = -1/2 * Sum ( p12 ) * t ( p12 h1 )_t * v ( h10 h14 p11 p12 )_v
C             i2 ( h10 h14 h1 h2 )_vt + = 1/2 * Sum ( p11 p12 ) * t ( p11 p12 h1 h2 )_t * v ( h10 h14 p11 p12 )_v
C         i1 ( h14 p5 p6 h1 h2 h3 )_vt + = -2/3 * P( 6 ) * Sum ( p9 ) * t ( p5 p9 h1 h2 )_t * i2 ( h14 p6 h3 p9 )_v
C             i2 ( h14 p5 h1 p9 )_v + = 1 * v ( h14 p5 h1 p9 )_v
C             i2 ( h14 p5 h1 p9 )_vt + = 1 * Sum ( h10 ) * t ( p5 h10 )_t * i3 ( h10 h14 h1 p9 )_v
C                 i3 ( h10 h14 h1 p9 )_v + = 1 * v ( h10 h14 h1 p9 )_v
C                 i3 ( h10 h14 h1 p9 )_vt + = -1 * Sum ( p11 ) * t ( p11 h1 )_t * v ( h10 h14 p9 p11 )_v
C             i2 ( h14 p5 h1 p9 )_vt + = -1 * Sum ( p11 ) * t ( p11 h1 )_t * v ( h14 p5 p9 p11 )_v
C             i2 ( h14 p5 h1 p9 )_vt + = 1 * Sum ( h12 p11 ) * t ( p5 p11 h1 h12 )_t * v ( h12 h14 p9 p11 )_v
C         i1 ( h14 p5 p6 h1 h2 h3 )_vt + = 2/3 * P( 3 ) * Sum ( h10 p9 ) * t ( p5 p6 p9 h1 h2 h10 )_t * i2 ( h10 h14 h3 p9 )_v
C             i2 ( h10 h14 h1 p9 )_v + = 1 * v ( h10 h14 h1 p9 )_v
C             i2 ( h10 h14 h1 p9 )_vt + = -1 * Sum ( p12 ) * t ( p12 h1 )_t * v ( h10 h14 p9 p12 )_v
C         i1 ( h14 p5 p6 h1 h2 h3 )_vt + = 1/3 * P( 2 ) * Sum ( p9 p10 ) * t ( p5 p9 p10 h1 h2 h3 )_t * i2 ( h14 p6 p9 p10 )_v
C             i2 ( h14 p5 p9 p10 )_v + = 1 * v ( h14 p5 p9 p10 )_v
C             i2 ( h14 p5 p9 p10 )_vt + = 1 * Sum ( h12 ) * t ( p5 h12 )_t * v ( h12 h14 p9 p10 )_v
C     i0 ( p5 p6 p7 p8 h1 h2 h3 h4 )_vtt + = 3/2 * P( 24 ) * Sum ( p14 ) * t ( p5 p14 h1 h2 )_t * i1 ( p6 p7 p8 h3 h4 p14 )_vt
C         i1 ( p5 p6 p7 h1 h2 p14 )_vt + = 1/3 * P( 3 ) * Sum ( p10 ) * t ( p5 p10 h1 h2 )_t * i2 ( p6 p7 p10 p14 )_v
C             i2 ( p5 p6 p10 p14 )_v + = 1 * v ( p5 p6 p10 p14 )_v
C             i2 ( p5 p6 p10 p14 )_vt + = -1 * P( 2 ) * Sum ( h11 ) * t ( p5 h11 )_t * i3 ( h11 p6 p10 p14 )_v
C                 i3 ( h11 p5 p10 p14 )_v + = 1 * v ( h11 p5 p10 p14 )_v
C                 i3 ( h11 p5 p10 p14 )_vt + = -1/2 * Sum ( h12 ) * t ( p5 h12 )_t * v ( h11 h12 p10 p14 )_v
C             i2 ( p5 p6 p10 p14 )_vt + = 1/2 * Sum ( h11 h12 ) * t ( p5 p6 h11 h12 )_t * v ( h11 h12 p10 p14 )_v
C         i1 ( p5 p6 p7 h1 h2 p14 )_vt + = 1/3 * P( 2 ) * Sum ( h9 h10 ) * t ( p5 p6 p7 h1 h9 h10 )_t * i2 ( h9 h10 h2 p14 )_v
C             i2 ( h9 h10 h1 p14 )_v + = 1 * v ( h9 h10 h1 p14 )_v
C             i2 ( h9 h10 h1 p14 )_vt + = 1 * Sum ( p12 ) * t ( p12 h1 )_t * v ( h9 h10 p12 p14 )_v
C         i1 ( p5 p6 p7 h1 h2 p14 )_vt + = 2/3 * P( 3 ) * Sum ( h10 p9 ) * t ( p5 p6 p9 h1 h2 h10 )_t * i2 ( h10 p7 p9 p14 )_v
C             i2 ( h10 p5 p9 p14 )_v + = 1 * v ( h10 p5 p9 p14 )_v
C             i2 ( h10 p5 p9 p14 )_vt + = -1 * Sum ( h12 ) * t ( p5 h12 )_t * v ( h10 h12 p9 p14 )_v
C     i0 ( p5 p6 p7 p8 h1 h2 h3 h4 )_vtt + = 1/4 * P( 16 ) * Sum ( h11 h12 ) * t ( p5 p6 p7 h1 h11 h12 )_t * i1 ( h11 h12 p8 h2 h3 h4 )_vt
C         i1 ( h11 h12 p5 h1 h2 h3 )_vt + = 1 * Sum ( p9 p10 ) * t ( p5 p9 p10 h1 h2 h3 )_t * v ( h11 h12 p9 p10 )_v
C     i0 ( p5 p6 p7 p8 h1 h2 h3 h4 )_vtt + = 1/2 * P( 36 ) * Sum ( h10 p9 ) * t ( p5 p6 p9 h1 h2 h10 )_t * i1 ( h10 p7 p8 h3 h4 p9 )_vt
C         i1 ( h10 p5 p6 h1 h2 p9 )_vt + = 1 * Sum ( h12 p11 ) * t ( p5 p6 p11 h1 h2 h12 )_t * v ( h10 h12 p9 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "util.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER t_p5b
      INTEGER t_p6b
      INTEGER t_p7b
      INTEGER t_p8b
      INTEGER t_h1b
      INTEGER t_h2b
      INTEGER t_h3b
      INTEGER t_h4b
      INTEGER toggle
      INTEGER d_t3
      INTEGER k_t3_offset
      INTEGER d_i1_1
      INTEGER k_i1_offset_1
      INTEGER l_i1_offset_1
      INTEGER d_i1_2
      INTEGER k_i1_offset_2
      INTEGER l_i1_offset_2
      INTEGER d_t2
      INTEGER k_t2_offset
      INTEGER d_i1_3
      INTEGER k_i1_offset_3
      INTEGER l_i1_offset_3
      INTEGER d_i1_4
      INTEGER k_i1_offset_4
      INTEGER l_i1_offset_4
      INTEGER d_i1_5
      INTEGER k_i1_offset_5
      INTEGER l_i1_offset_5
      INTEGER d_i1_6
      INTEGER k_i1_offset_6
      INTEGER l_i1_offset_6
      INTEGER d_v2
      INTEGER k_v2_offset
      INTEGER size_i1_1
      INTEGER d_t1
      INTEGER k_t1_offset
      INTEGER d_i2
      INTEGER k_i2_offset
      INTEGER l_i2_offset
      INTEGER size_i2
      INTEGER d_i3
      INTEGER k_i3_offset
      INTEGER l_i3_offset
      INTEGER size_i3
      INTEGER d_f1
      INTEGER k_f1_offset
      INTEGER size_i1_2
      INTEGER size_i1_3
      INTEGER size_i1_4
      INTEGER size_i1_5
      INTEGER size_i1_6
      DOUBLE PRECISION a_i0(*)
      CHARACTER*255 filename
      IF (toggle .eq. 3) THEN
      CALL DELETEFILE(d_i1_6)
      IF (.not.MA_POP_STACK(l_i1_offset_6)) CALL ERRQUIT('ccsdt2_q_right
     &',-1,MA_ERR)
      END IF
      IF (toggle .eq. 3) THEN
      CALL DELETEFILE(d_i1_5)
      IF (.not.MA_POP_STACK(l_i1_offset_5)) CALL ERRQUIT('ccsdt2_q_right
     &',-1,MA_ERR)
      END IF
      IF (toggle .eq. 3) THEN
      CALL DELETEFILE(d_i1_4)
      IF (.not.MA_POP_STACK(l_i1_offset_4)) CALL ERRQUIT('ccsdt2_q_right
     &',-1,MA_ERR)
      END IF
      IF (toggle .eq. 3) THEN
      CALL DELETEFILE(d_i1_3)
      IF (.not.MA_POP_STACK(l_i1_offset_3)) CALL ERRQUIT('ccsdt2_q_right
     &',-1,MA_ERR)
      END IF
      IF (toggle .eq. 3) THEN
      CALL DELETEFILE(d_i1_2)
      IF (.not.MA_POP_STACK(l_i1_offset_2)) CALL ERRQUIT('ccsdt2_q_right
     &',-1,MA_ERR)
      END IF
      IF (toggle .eq. 3) THEN
      CALL DELETEFILE(d_i1_1)
      IF (.not.MA_POP_STACK(l_i1_offset_1)) CALL ERRQUIT('ccsdt2_q_right
     &',-1,MA_ERR)
      END IF
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_1_1(l_i1_offset_1,k_
     &i1_offset_1,size_i1_1)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_1_1_i1',filen
     &ame)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i1_1,size_i1_1)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_1_1(d_v2,k_v2_offset,d_i1_1
     &,k_i1_offset_1)
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_1_2_1(l_i2_offset,k_
     &i2_offset,size_i2)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_1_2_1_i2',fil
     &ename)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_1_2_1(d_v2,k_v2_offset,d_i2
     &,k_i2_offset)
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_1_2_2_1(l_i3_offset,
     &k_i3_offset,size_i3)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_1_2_2_1_i3',f
     &ilename)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i3,size_i3)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_1_2_2_1(d_v2,k_v2_offset,d_
     &i3,k_i3_offset)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_1_2_2_2(d_t1,k_t1_offset,d_
     &v2,k_v2_offset,d_i3,k_i3_offset)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i3,size_i3)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_1_2_2(d_t1,k_t1_offset,d_i3
     &,k_i3_offset,d_i2,k_i2_offset)
      IF (toggle .eq. 1) THEN
      CALL DELETEFILE(d_i3)
      IF (.not.MA_POP_STACK(l_i3_offset)) CALL ERRQUIT('ccsdt2_q_right',
     &-1,MA_ERR)
      END IF
      IF (toggle .eq. 1) CALL ccsdt2_q_right_1_2_3(d_t2,k_t2_offset,d_v2
     &,k_v2_offset,d_i2,k_i2_offset)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_1_2(d_t1,k_t1_offset,d_i2,k
     &_i2_offset,d_i1_1,k_i1_offset_1)
      IF (toggle .eq. 1) THEN
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdt2_q_right',
     &-1,MA_ERR)
      END IF
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_1_3_1(l_i2_offset,k_
     &i2_offset,size_i2)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_1_3_1_i2',fil
     &ename)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_1_3_1(d_v2,k_v2_offset,d_i2
     &,k_i2_offset)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_1_3_2(d_t1,k_t1_offset,d_v2
     &,k_v2_offset,d_i2,k_i2_offset)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_1_3(d_t1,k_t1_offset,d_i2,k
     &_i2_offset,d_i1_1,k_i1_offset_1)
      IF (toggle .eq. 1) THEN
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdt2_q_right',
     &-1,MA_ERR)
      END IF
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_1_4_1(l_i2_offset,k_
     &i2_offset,size_i2)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_1_4_1_i2',fil
     &ename)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_1_4_1(d_f1,k_f1_offset,d_i2
     &,k_i2_offset)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_1_4_2(d_t1,k_t1_offset,d_v2
     &,k_v2_offset,d_i2,k_i2_offset)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_1_4(d_t2,k_t2_offset,d_i2,k
     &_i2_offset,d_i1_1,k_i1_offset_1)
      IF (toggle .eq. 1) THEN
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdt2_q_right',
     &-1,MA_ERR)
      END IF
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_1_5_1(l_i2_offset,k_
     &i2_offset,size_i2)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_1_5_1_i2',fil
     &ename)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_1_5_1(d_v2,k_v2_offset,d_i2
     &,k_i2_offset)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_1_5_2(d_t1,k_t1_offset,d_v2
     &,k_v2_offset,d_i2,k_i2_offset)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_1_5(d_t2,k_t2_offset,d_i2,k
     &_i2_offset,d_i1_1,k_i1_offset_1)
      IF (toggle .eq. 1) THEN
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdt2_q_right',
     &-1,MA_ERR)
      END IF
      IF (toggle .eq. 1) CALL ccsdt2_q_right_1_6(d_t2,k_t2_offset,d_v2,k
     &_v2_offset,d_i1_1,k_i1_offset_1)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_1_7(d_t3,k_t3_offset,d_v2,k
     &_v2_offset,d_i1_1,k_i1_offset_1)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i1_1,size_i1_1)
      IF (toggle .eq. 2) CALL ccsdt2_q_right_1(d_t3,k_t3_offset,d_i1_1,k
     &_i1_offset_1,a_i0,t_p5b,t_p6b,t_p7b,t_p8b,t_h1b,t_h2b,t_h3b,t_h4b)
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_2_1(l_i1_offset_2,k_
     &i1_offset_2,size_i1_2)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_2_1_i1',filen
     &ame)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i1_2,size_i1_2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_2_1(d_v2,k_v2_offset,d_i1_2
     &,k_i1_offset_2)
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_2_2_1(l_i2_offset,k_
     &i2_offset,size_i2)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_2_2_1_i2',fil
     &ename)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_2_2_1(d_v2,k_v2_offset,d_i2
     &,k_i2_offset)
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_2_2_2_1(l_i3_offset,
     &k_i3_offset,size_i3)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_2_2_2_1_i3',f
     &ilename)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i3,size_i3)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_2_2_2_1(d_v2,k_v2_offset,d_
     &i3,k_i3_offset)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_2_2_2_2(d_t1,k_t1_offset,d_
     &v2,k_v2_offset,d_i3,k_i3_offset)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i3,size_i3)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_2_2_2(d_t1,k_t1_offset,d_i3
     &,k_i3_offset,d_i2,k_i2_offset)
      IF (toggle .eq. 1) THEN
      CALL DELETEFILE(d_i3)
      IF (.not.MA_POP_STACK(l_i3_offset)) CALL ERRQUIT('ccsdt2_q_right',
     &-1,MA_ERR)
      END IF
      IF (toggle .eq. 1) CALL ccsdt2_q_right_2_2_3(d_t1,k_t1_offset,d_v2
     &,k_v2_offset,d_i2,k_i2_offset)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_2_2_4(d_t2,k_t2_offset,d_v2
     &,k_v2_offset,d_i2,k_i2_offset)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_2_2(d_t1,k_t1_offset,d_i2,k
     &_i2_offset,d_i1_2,k_i1_offset_2)
      IF (toggle .eq. 1) THEN
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdt2_q_right',
     &-1,MA_ERR)
      END IF
      IF (toggle .eq. 1) CALL ccsdt2_q_right_2_3(d_t1,k_t1_offset,d_v2,k
     &_v2_offset,d_i1_2,k_i1_offset_2)
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_2_4_1(l_i2_offset,k_
     &i2_offset,size_i2)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_2_4_1_i2',fil
     &ename)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_2_4_1(d_f1,k_f1_offset,d_i2
     &,k_i2_offset)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_2_4_2(d_t1,k_t1_offset,d_v2
     &,k_v2_offset,d_i2,k_i2_offset)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_2_4(d_t2,k_t2_offset,d_i2,k
     &_i2_offset,d_i1_2,k_i1_offset_2)
      IF (toggle .eq. 1) THEN
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdt2_q_right',
     &-1,MA_ERR)
      END IF
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_2_5_1(l_i2_offset,k_
     &i2_offset,size_i2)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_2_5_1_i2',fil
     &ename)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_2_5_1(d_v2,k_v2_offset,d_i2
     &,k_i2_offset)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_2_5_2(d_t1,k_t1_offset,d_v2
     &,k_v2_offset,d_i2,k_i2_offset)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_2_5(d_t2,k_t2_offset,d_i2,k
     &_i2_offset,d_i1_2,k_i1_offset_2)
      IF (toggle .eq. 1) THEN
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdt2_q_right',
     &-1,MA_ERR)
      END IF
      IF (toggle .eq. 1) CALL ccsdt2_q_right_2_6(d_t2,k_t2_offset,d_v2,k
     &_v2_offset,d_i1_2,k_i1_offset_2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_2_7(d_t3,k_t3_offset,d_v2,k
     &_v2_offset,d_i1_2,k_i1_offset_2)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i1_2,size_i1_2)
      IF (toggle .eq. 2) CALL ccsdt2_q_right_2(d_t3,k_t3_offset,d_i1_2,k
     &_i1_offset_2,a_i0,t_p5b,t_p6b,t_p7b,t_p8b,t_h1b,t_h2b,t_h3b,t_h4b)
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_3_1(l_i1_offset_3,k_
     &i1_offset_3,size_i1_3)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_3_1_i1',filen
     &ame)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i1_3,size_i1_3)
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_3_1_1(l_i2_offset,k_
     &i2_offset,size_i2)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_3_1_1_i2',fil
     &ename)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_3_1_1(d_v2,k_v2_offset,d_i2
     &,k_i2_offset)
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_3_1_2_1(l_i3_offset,
     &k_i3_offset,size_i3)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_3_1_2_1_i3',f
     &ilename)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i3,size_i3)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_3_1_2_1(d_v2,k_v2_offset,d_
     &i3,k_i3_offset)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_3_1_2_2(d_t1,k_t1_offset,d_
     &v2,k_v2_offset,d_i3,k_i3_offset)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i3,size_i3)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_3_1_2(d_t1,k_t1_offset,d_i3
     &,k_i3_offset,d_i2,k_i2_offset)
      IF (toggle .eq. 1) THEN
      CALL DELETEFILE(d_i3)
      IF (.not.MA_POP_STACK(l_i3_offset)) CALL ERRQUIT('ccsdt2_q_right',
     &-1,MA_ERR)
      END IF
      IF (toggle .eq. 1) CALL ccsdt2_q_right_3_1_3(d_t2,k_t2_offset,d_v2
     &,k_v2_offset,d_i2,k_i2_offset)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_3_1(d_t2,k_t2_offset,d_i2,k
     &_i2_offset,d_i1_3,k_i1_offset_3)
      IF (toggle .eq. 1) THEN
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdt2_q_right',
     &-1,MA_ERR)
      END IF
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_3_2_1(l_i2_offset,k_
     &i2_offset,size_i2)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_3_2_1_i2',fil
     &ename)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_3_2_1(d_v2,k_v2_offset,d_i2
     &,k_i2_offset)
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_3_2_2_1(l_i3_offset,
     &k_i3_offset,size_i3)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_3_2_2_1_i3',f
     &ilename)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i3,size_i3)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_3_2_2_1(d_v2,k_v2_offset,d_
     &i3,k_i3_offset)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_3_2_2_2(d_t1,k_t1_offset,d_
     &v2,k_v2_offset,d_i3,k_i3_offset)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i3,size_i3)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_3_2_2(d_t1,k_t1_offset,d_i3
     &,k_i3_offset,d_i2,k_i2_offset)
      IF (toggle .eq. 1) THEN
      CALL DELETEFILE(d_i3)
      IF (.not.MA_POP_STACK(l_i3_offset)) CALL ERRQUIT('ccsdt2_q_right',
     &-1,MA_ERR)
      END IF
      IF (toggle .eq. 1) CALL ccsdt2_q_right_3_2_3(d_t1,k_t1_offset,d_v2
     &,k_v2_offset,d_i2,k_i2_offset)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_3_2_4(d_t2,k_t2_offset,d_v2
     &,k_v2_offset,d_i2,k_i2_offset)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_3_2(d_t2,k_t2_offset,d_i2,k
     &_i2_offset,d_i1_3,k_i1_offset_3)
      IF (toggle .eq. 1) THEN
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdt2_q_right',
     &-1,MA_ERR)
      END IF
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_3_3_1(l_i2_offset,k_
     &i2_offset,size_i2)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_3_3_1_i2',fil
     &ename)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_3_3_1(d_v2,k_v2_offset,d_i2
     &,k_i2_offset)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_3_3_2(d_t1,k_t1_offset,d_v2
     &,k_v2_offset,d_i2,k_i2_offset)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_3_3(d_t3,k_t3_offset,d_i2,k
     &_i2_offset,d_i1_3,k_i1_offset_3)
      IF (toggle .eq. 1) THEN
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdt2_q_right',
     &-1,MA_ERR)
      END IF
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_3_4_1(l_i2_offset,k_
     &i2_offset,size_i2)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_3_4_1_i2',fil
     &ename)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_3_4_1(d_v2,k_v2_offset,d_i2
     &,k_i2_offset)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_3_4_2(d_t1,k_t1_offset,d_v2
     &,k_v2_offset,d_i2,k_i2_offset)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_3_4(d_t3,k_t3_offset,d_i2,k
     &_i2_offset,d_i1_3,k_i1_offset_3)
      IF (toggle .eq. 1) THEN
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdt2_q_right',
     &-1,MA_ERR)
      END IF
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i1_3,size_i1_3)
      IF (toggle .eq. 2) CALL ccsdt2_q_right_3(d_t2,k_t2_offset,d_i1_3,k
     &_i1_offset_3,a_i0,t_p5b,t_p6b,t_p7b,t_p8b,t_h1b,t_h2b,t_h3b,t_h4b)
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_4_1(l_i1_offset_4,k_
     &i1_offset_4,size_i1_4)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_4_1_i1',filen
     &ame)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i1_4,size_i1_4)
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_4_1_1(l_i2_offset,k_
     &i2_offset,size_i2)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_4_1_1_i2',fil
     &ename)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_4_1_1(d_v2,k_v2_offset,d_i2
     &,k_i2_offset)
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_4_1_2_1(l_i3_offset,
     &k_i3_offset,size_i3)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_4_1_2_1_i3',f
     &ilename)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i3,size_i3)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_4_1_2_1(d_v2,k_v2_offset,d_
     &i3,k_i3_offset)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_4_1_2_2(d_t1,k_t1_offset,d_
     &v2,k_v2_offset,d_i3,k_i3_offset)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i3,size_i3)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_4_1_2(d_t1,k_t1_offset,d_i3
     &,k_i3_offset,d_i2,k_i2_offset)
      IF (toggle .eq. 1) THEN
      CALL DELETEFILE(d_i3)
      IF (.not.MA_POP_STACK(l_i3_offset)) CALL ERRQUIT('ccsdt2_q_right',
     &-1,MA_ERR)
      END IF
      IF (toggle .eq. 1) CALL ccsdt2_q_right_4_1_3(d_t2,k_t2_offset,d_v2
     &,k_v2_offset,d_i2,k_i2_offset)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_4_1(d_t2,k_t2_offset,d_i2,k
     &_i2_offset,d_i1_4,k_i1_offset_4)
      IF (toggle .eq. 1) THEN
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdt2_q_right',
     &-1,MA_ERR)
      END IF
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_4_2_1(l_i2_offset,k_
     &i2_offset,size_i2)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_4_2_1_i2',fil
     &ename)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_4_2_1(d_v2,k_v2_offset,d_i2
     &,k_i2_offset)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_4_2_2(d_t1,k_t1_offset,d_v2
     &,k_v2_offset,d_i2,k_i2_offset)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_4_2(d_t3,k_t3_offset,d_i2,k
     &_i2_offset,d_i1_4,k_i1_offset_4)
      IF (toggle .eq. 1) THEN
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdt2_q_right',
     &-1,MA_ERR)
      END IF
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_4_3_1(l_i2_offset,k_
     &i2_offset,size_i2)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_4_3_1_i2',fil
     &ename)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_4_3_1(d_v2,k_v2_offset,d_i2
     &,k_i2_offset)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_4_3_2(d_t1,k_t1_offset,d_v2
     &,k_v2_offset,d_i2,k_i2_offset)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i2,size_i2)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_4_3(d_t3,k_t3_offset,d_i2,k
     &_i2_offset,d_i1_4,k_i1_offset_4)
      IF (toggle .eq. 1) THEN
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('ccsdt2_q_right',
     &-1,MA_ERR)
      END IF
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i1_4,size_i1_4)
      IF (toggle .eq. 2) CALL ccsdt2_q_right_4(d_t2,k_t2_offset,d_i1_4,k
     &_i1_offset_4,a_i0,t_p5b,t_p6b,t_p7b,t_p8b,t_h1b,t_h2b,t_h3b,t_h4b)
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_5_1(l_i1_offset_5,k_
     &i1_offset_5,size_i1_5)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_5_1_i1',filen
     &ame)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i1_5,size_i1_5)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_5_1(d_t3,k_t3_offset,d_v2,k
     &_v2_offset,d_i1_5,k_i1_offset_5)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i1_5,size_i1_5)
      IF (toggle .eq. 2) CALL ccsdt2_q_right_5(d_t3,k_t3_offset,d_i1_5,k
     &_i1_offset_5,a_i0,t_p5b,t_p6b,t_p7b,t_p8b,t_h1b,t_h2b,t_h3b,t_h4b)
      IF (toggle .eq. 1) CALL OFFSET_ccsdt2_q_right_6_1(l_i1_offset_6,k_
     &i1_offset_6,size_i1_6)
      IF (toggle .eq. 1) CALL TCE_FILENAME('ccsdt2_q_right_6_1_i1',filen
     &ame)
      IF (toggle .eq. 1) CALL CREATEFILE(filename,d_i1_6,size_i1_6)
      IF (toggle .eq. 1) CALL ccsdt2_q_right_6_1(d_t3,k_t3_offset,d_v2,k
     &_v2_offset,d_i1_6,k_i1_offset_6)
      IF (toggle .eq. 1) CALL RECONCILEFILE(d_i1_6,size_i1_6)
      IF (toggle .eq. 2) CALL ccsdt2_q_right_6(d_t3,k_t3_offset,d_i1_6,k
     &_i1_offset_6,a_i0,t_p5b,t_p6b,t_p7b,t_p8b,t_h1b,t_h2b,t_h3b,t_h4b)
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_1(d_a,k_a_offset,d_b,k_b_offset,a_c,t_p5
     &b,t_p6b,t_p7b,t_p8b,t_h1b,t_h2b,t_h3b,t_h4b)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p5 p6 p7 p8 h1 h2 h3 h4 )_vt + = -1 * P( 24 ) * Sum ( h14 ) * t ( p5 p6 p7 h1 h2 h14 )_t * i1 ( h14 p8 h3 h4 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER t_p5b
      INTEGER t_p6b
      INTEGER t_p7b
      INTEGER t_p8b
      INTEGER t_h1b
      INTEGER t_h2b
      INTEGER t_h3b
      INTEGER t_h4b
      INTEGER p5b
      INTEGER p6b
      INTEGER p7b
      INTEGER p8b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER h4b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h14b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h14b_1
      INTEGER p8b_2
      INTEGER h14b_2
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      DOUBLE PRECISION a_c(*)
      LOGICAL skipped
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO p7b = p6b,noab+nvab
      DO p8b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = 1,noab
      DO h4b = h3b,noab
      skipped = .true.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p8b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p8b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p8b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p8b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p8b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p8b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF (.not.skipped) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1)+i
     &nt_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-1)
     &+int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-
     &1)+int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+p8b-1),ieor(int_mb(k_sym+h1b-1),ieo
     &r(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h4b-1)
     &))))))) .eq. ieor(irrep_v,irrep_t)) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+p7b-1) * int_mb(k_range+p8b-1) * int_mb(k_range+h1b-1) * int_m
     &b(k_range+h2b-1) * int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h14b = 1,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h14b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h14b-1)))))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_6(p5b,p6b,p7b,h1b,h2b,h14b,p5b_1,p6b_1,p7b_1,h
     &1b_1,h2b_1,h14b_1)
      CALL TCE_RESTRICTED_4(p8b,h14b,h3b,h4b,p8b_2,h14b_2,h3b_2,h4b_2)
      dim_common = int_mb(k_range+h14b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb
     &(k_range+p7b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p8b-1) * int_mb(k_range+h3b-1) * int_mb
     &(k_range+h4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_1',2,MA_ERR)
      IF ((h14b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h14b_1 - 1 + noab * (p7b_1 - no
     &ab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p7b-1),int_mb(k_range+h14b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),6,5,3,2,1,4,1.0d0)
      END IF
      IF ((h1b .le. h14b) .and. (h14b .lt. h2b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h14b_1 - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - no
     &ab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p7b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+h2b-1),6,4,3,2,1,5,-1.0d0)
      END IF
      IF ((h2b .le. h14b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h14b_
     &1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - no
     &ab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p7b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h2b-1),int_mb(k_range+h14b-1),5,4,3,2,1,6,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_1',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_1',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(h4b_2
     & - 1 + noab * (h3b_2 - 1 + noab * (h14b_2 - 1 + noab * (p8b_2 - no
     &ab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p8b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+h3b-1),int_mb(k_range+h4b-1
     &),4,3,1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_1',6,MA_E
     &RR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_1',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_1',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,6,3,5,4,2,1,-1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,6,3,2,5,4,1,-1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,6,3,5,2,4,1,1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,6,3,2,5,1,4,1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,6,3,5,2,1,4,-1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,6,3,2,1,5,4,-1.0d0)
      END IF
      IF ((t_p5b .eq. p8b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),3,8,7,6,5,4,2,1,1.0d0)
      END IF
      IF ((t_p5b .eq. p8b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),3,8,7,6,2,5,4,1,1.0d0)
      END IF
      IF ((t_p5b .eq. p8b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),3,8,7,6,5,2,4,1,-1.0d0)
      END IF
      IF ((t_p5b .eq. p8b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),3,8,7,6,2,5,1,4,-1.0d0)
      END IF
      IF ((t_p5b .eq. p8b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),3,8,7,6,5,2,1,4,1.0d0)
      END IF
      IF ((t_p5b .eq. p8b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),3,8,7,6,2,1,5,4,1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,3,7,6,5,4,2,1,-1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,3,7,6,2,5,4,1,-1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,3,7,6,5,2,4,1,1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,3,7,6,2,5,1,4,1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,3,7,6,5,2,1,4,-1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,3,7,6,2,1,5,4,-1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,3,6,5,4,2,1,1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,3,6,2,5,4,1,1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,3,6,5,2,4,1,-1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,3,6,2,5,1,4,-1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,3,6,5,2,1,4,1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+h2b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,3,6,2,1,5,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_1',9
     &,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_1_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h14 p5 h1 h2 )_v + = 1 * v ( h14 p5 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h14b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER p5b_1
      INTEGER h14b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+h2b-1)
      CALL TCE_RESTRICTED_4(p5b,h14b,h1b,h2b,p5b_1,h14b_1,h1b_1,h2b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_1_1',1,MA_ERR)
      IF ((h14b .le. p5b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (p5b_1 - 1 + (noab
     &+nvab) * (h14b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1
     &),4,3,1,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_1_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_1_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h14b-1),int_mb(k_range+p5b-1
     &),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab * (p5b - noab - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_1_1',4,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_1_1'
     &,5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_1_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h14 p5 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p5b
      INTEGER h14b
      INTEGER h1b
      INTEGER h2b
      length = 0
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h14b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h14b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h14b-1)+int_mb(k_spin+p5b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_1_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h14b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h14b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h14b-1)+int_mb(k_spin+p5b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h2b - 1 + noab * (h1b - 1 + noab * (h14b
     & - 1 + noab * (p5b - noab - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_1_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h14 p5 h1 h2 )_vt + = 1 * Sum ( h12 ) * t ( p5 h12 )_t * i2 ( h12 h14 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h14b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h12b
      INTEGER p5b_1
      INTEGER h12b_1
      INTEGER h14b_2
      INTEGER h12b_2
      INTEGER h1b_2
      INTEGER h2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h12b = 1,noab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h12b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p5b,h12b,p5b_1,h12b_1)
      CALL TCE_RESTRICTED_4(h14b,h12b,h1b,h2b,h14b_2,h12b_2,h1b_2,h2b_2)
      dim_common = int_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p5b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h14b-1) * int_mb(k_range+h1b-1) * int_m
     &b(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_1_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h12b-1),1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_1_2',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_1_2',5,MA_ERR)
      IF ((h12b .le. h14b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(h2b_2
     & - 1 + noab * (h1b_2 - 1 + noab * (h14b_2 - 1 + noab * (h12b_2 - 1
     &)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-
     &1),4,3,2,1,1.0d0)
      END IF
      IF ((h14b .lt. h12b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(h2b_2
     & - 1 + noab * (h1b_2 - 1 + noab * (h12b_2 - 1 + noab * (h14b_2 - 1
     &)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-
     &1),4,3,1,2,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_1_2',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_1_2'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_1_2'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_1_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h14b-1),int_mb(k_range+p5b-1
     &),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab * (p5b - noab - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_1_2',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_1_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_1_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h12 h14 h1 h2 )_v + = 1 * v ( h12 h14 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h12b
      INTEGER h14b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER h12b_1
      INTEGER h14b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h12b = 1,noab
      DO h14b = h12b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+h12b-1) * int_mb(k_range+h14b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+h2b-1)
      CALL TCE_RESTRICTED_4(h12b,h14b,h1b,h2b,h12b_1,h14b_1,h1b_1,h2b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h12b-1) * int_mb(k_range+h14b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_1_2_1',1,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h14b_1 - 1 + (noa
     &b+nvab) * (h12b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-
     &1),4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_1_2_1',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_1_2_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h14b-1),int_mb(k_range+h12b-
     &1),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab * (h12b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_1_2_1',4,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_1_2_
     &1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_1_2_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h12 h14 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h12b
      INTEGER h14b
      INTEGER h1b
      INTEGER h2b
      length = 0
      DO h12b = 1,noab
      DO h14b = h12b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_1_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h12b = 1,noab
      DO h14b = h12b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h2b - 1 + noab * (h1b - 1 + noab * (h14b
     & - 1 + noab * (h12b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h12b-1) * int_mb(k_range+h14b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_1_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h12 h14 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( p9 ) * t ( p9 h1 )_t * i3 ( h12 h14 h2 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h12b
      INTEGER h14b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h12b_2
      INTEGER h14b_2
      INTEGER h2b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h12b = 1,noab
      DO h14b = h12b,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+h12b-1) * int_mb(k_range+h14b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p9b,h1b,p9b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h12b,h14b,h2b,p9b,h12b_2,h14b_2,h2b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h12b-1) * int_mb(k_range+h14b-1) * int_
     &mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_1_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p9b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_1_2_2',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_1_2_2',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (h2b_2 - 1 + noab * (h14b_2 - 1 + noab * (h12
     &b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+h2b-1),int_mb(k_range+p9b-
     &1),3,2,1,4,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_1_2_2',6,
     &MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_1_2_
     &2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_1_2_
     &2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_1_2_2',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+h12b-1),int_mb(k_range+h1b-
     &1),3,2,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab * (h12b - 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+h12b-1),int_mb(k_range+h1b-
     &1),3,2,1,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (h14b - 1 + noab * (h12b - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_1_2_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_1_2_
     &2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_1_2_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h12 h14 h1 p9 )_v + = 1 * v ( h12 h14 h1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h12b
      INTEGER h14b
      INTEGER h1b
      INTEGER p9b
      INTEGER dimc
      INTEGER h12b_1
      INTEGER h14b_1
      INTEGER h1b_1
      INTEGER p9b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h12b = 1,noab
      DO h14b = h12b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+h12b-1) * int_mb(k_range+h14b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+p9b-1)
      CALL TCE_RESTRICTED_4(h12b,h14b,h1b,p9b,h12b_1,h14b_1,h1b_1,p9b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h12b-1) * int_mb(k_range+h14b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p9b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_2_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_1_2_2_1',1,MA_ERR)
      IF ((h1b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p9b_1
     & - 1 + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h14b_1 - 1 + (noa
     &b+nvab) * (h12b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+h1b-1),int_mb(k_range+p9b-
     &1),4,3,2,1,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_1_2_2_1',
     &2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_1_2_2_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h14b-1),int_mb(k_range+h12b-
     &1),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h14b - 1 + noab * (h12b - 1)
     &))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_1_2_2_1',
     &4,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_1_2_
     &2_1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_1_2_2_1(l_a_offset,k_a_offset,siz
     &e)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h12 h14 h1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h12b
      INTEGER h14b
      INTEGER h1b
      INTEGER p9b
      length = 0
      DO h12b = 1,noab
      DO h14b = h12b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_1_2_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h12b = 1,noab
      DO h14b = h12b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p9b - noab - 1 + nvab * (h1b - 1 + noab 
     &* (h14b - 1 + noab * (h12b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h12b-1) * int_mb(k_range+h14b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+p9b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_1_2_2_2(d_a,k_a_offset,d_b,k_b_offset,d_
     &c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h12 h14 h1 p9 )_vt + = -1/2 * Sum ( p10 ) * t ( p10 h1 )_t * v ( h12 h14 p9 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h12b
      INTEGER h14b
      INTEGER h1b
      INTEGER p9b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p10b
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h12b_2
      INTEGER h14b_2
      INTEGER p9b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h12b = 1,noab
      DO h14b = h12b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+h12b-1) * int_mb(k_range+h14b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+p9b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_2_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p10b,h1b,p10b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h12b,h14b,p9b,p10b,h12b_2,h14b_2,p9b_2,p10b_
     &2)
      dim_common = int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h12b-1) * int_mb(k_range+h14b-1) * int_
     &mb(k_range+p9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_2_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_1_2_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p10b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_1_2_2_2',
     &3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_2_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_1_2_2_2',5,MA_ERR)
      IF ((p10b .lt. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h14b_2 - 1 + (no
     &ab+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+p10b-1),int_mb(k_range+p9b
     &-1),4,2,1,3,-1.0d0)
      END IF
      IF ((p9b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h14b_2 - 1 + (no
     &ab+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+p9b-1),int_mb(k_range+p10b
     &-1),3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_1_2_2_2',
     &6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_1_2_
     &2_2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_1_2_
     &2_2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_1_2_2_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+h12b-1),int_mb(k_range+h1b-
     &1),3,2,4,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h14b - 1 + noab * (h12b - 1)
     &))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_1_2_2_2',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_1_2_
     &2_2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_1_2_3(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h12 h14 h1 h2 )_vt + = 1/2 * Sum ( p10 p11 ) * t ( p10 p11 h1 h2 )_t * v ( h12 h14 p10 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h12b
      INTEGER h14b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p10b
      INTEGER p11b
      INTEGER p10b_1
      INTEGER p11b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h12b_2
      INTEGER h14b_2
      INTEGER p10b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL nxtask
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h12b = 1,noab
      DO h14b = h12b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+h12b-1) * int_mb(k_range+h14b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_2_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p10b = noab+1,noab+nvab
      DO p11b = p10b,noab+nvab
      IF (int_mb(k_spin+p10b-1)+int_mb(k_spin+p11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),ieor(int_mb(k_sym+p11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p10b,p11b,h1b,h2b,p10b_1,p11b_1,h1b_1,h2b_1)
      CALL TCE_RESTRICTED_4(h12b,h14b,p10b,p11b,h12b_2,h14b_2,p10b_2,p11
     &b_2)
      dim_common = int_mb(k_range+p10b-1) * int_mb(k_range+p11b-1)
      dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h12b-1) * int_mb(k_range+h14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_2_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_1_2_3',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p11b_1 - noab - 1 + nvab * (p10
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p11b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-
     &1),4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_1_2_3',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_2_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_1_2_3',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h14b_2 - 1 + (n
     &oab+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+p10b-1),int_mb(k_range+p11
     &b-1),2,1,4,3,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_1_2_3',6,
     &MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p10b .eq. p11b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_1_2_
     &3',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_1_2_
     &3',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_1_2_3',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h14b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-
     &1),2,1,4,3,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab * (h12b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_1_2_3',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_1_2_
     &3',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_1_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h14 p5 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( p11 ) * t ( p11 h1 )_t * i2 ( h14 p5 h2 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h14b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p11b
      INTEGER p11b_1
      INTEGER h1b_1
      INTEGER p5b_2
      INTEGER h14b_2
      INTEGER h2b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p11b,h1b,p11b_1,h1b_1)
      CALL TCE_RESTRICTED_4(p5b,h14b,h2b,p11b,p5b_2,h14b_2,h2b_2,p11b_2)
      dim_common = int_mb(k_range+p11b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int_m
     &b(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_1_3',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p11b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p11b-1
     &),int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_1_3',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_1_3',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - noab - 1 + nvab * (h2b_2 - 1 + noab * (h14b_2 - 1 + noab * (p5
     &b_2 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+h2b-1),int_mb(k_range+p11b-
     &1),3,2,1,4,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_1_3',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_1_3'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_1_3'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_1_3',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+p5b-1),int_mb(k_range+h1b-1
     &),3,2,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab * (p5b - noab - 1))
     &)))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+p5b-1),int_mb(k_range+h1b-1
     &),3,2,1,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (h14b - 1 + noab * (p5b - noab - 1))
     &)))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_1_3',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_1_3'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_1_3_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h14 p5 h1 p11 )_v + = 1 * v ( h14 p5 h1 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h14b
      INTEGER h1b
      INTEGER p11b
      INTEGER dimc
      INTEGER p5b_1
      INTEGER h14b_1
      INTEGER h1b_1
      INTEGER p11b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p11b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p11b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+p11b-1)
      CALL TCE_RESTRICTED_4(p5b,h14b,h1b,p11b,p5b_1,h14b_1,h1b_1,p11b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+p11b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_3_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_1_3_1',1,MA_ERR)
      IF ((h14b .le. p5b) .and. (h1b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p11b_
     &1 - 1 + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (p5b_1 - 1 + (noa
     &b+nvab) * (h14b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+h1b-1),int_mb(k_range+p11b-
     &1),4,3,1,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_1_3_1',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_1_3_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p11b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+h14b-1),int_mb(k_range+p5b-
     &1),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p11b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (h14b - 1 + noab * (p5b - no
     &ab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_1_3_1',4,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_1_3_
     &1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_1_3_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h14 p5 h1 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p5b
      INTEGER h14b
      INTEGER h1b
      INTEGER p11b
      length = 0
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+h14b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+h14b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p11b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h14b-1)+int_mb(k_spin+p5b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p11b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_1_3_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+h14b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+h14b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p11b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h14b-1)+int_mb(k_spin+p5b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p11b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p11b - noab - 1 + nvab * (h1b - 1 + noab
     & * (h14b - 1 + noab * (p5b - noab - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+p11b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_1_3_2(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h14 p5 h1 p11 )_vt + = 1/2 * Sum ( p10 ) * t ( p10 h1 )_t * v ( h14 p5 p10 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h14b
      INTEGER h1b
      INTEGER p11b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p10b
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER p5b_2
      INTEGER h14b_2
      INTEGER p11b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p11b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p11b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+p11b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_3_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p10b,h1b,p10b_1,h1b_1)
      CALL TCE_RESTRICTED_4(p5b,h14b,p11b,p10b,p5b_2,h14b_2,p11b_2,p10b_
     &2)
      dim_common = int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int_m
     &b(k_range+p11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_3_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_1_3_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p10b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_1_3_2',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_3_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_1_3_2',5,MA_ERR)
      IF ((h14b .le. p5b) .and. (p10b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (p5b_2 - 1 + (no
     &ab+nvab) * (h14b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+p10b-1),int_mb(k_range+p11b
     &-1),4,1,2,3,1.0d0)
      END IF
      IF ((h14b .le. p5b) .and. (p11b .lt. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (p5b_2 - 1 + (no
     &ab+nvab) * (h14b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+p11b-1),int_mb(k_range+p10b
     &-1),3,1,2,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_1_3_2',6,
     &MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_1_3_
     &2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_1_3_
     &2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_1_3_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p11b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+p5b-1),int_mb(k_range+h1b-
     &1),3,2,4,1,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p11b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (h14b - 1 + noab * (p5b - no
     &ab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_1_3_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_1_3_
     &2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_1_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h14 p5 h1 h2 )_ft + = -1 * Sum ( p10 ) * t ( p5 p10 h1 h2 )_t * i2 ( h14 p10 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h14b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p10b
      INTEGER p5b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h14b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_f,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_4',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p5b,p10b,h1b,h2b,p5b_1,p10b_1,h1b_1,h2b_1)
      CALL TCE_RESTRICTED_2(h14b,p10b,h14b_2,p10b_2)
      dim_common = int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_1_4',2,MA_ERR)
      IF ((p10b .lt. p5b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p10b
     &_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1
     &),4,3,2,1,-1.0d0)
      END IF
      IF ((p5b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p5b
     &_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1
     &),4,3,1,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_1_4',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_1_4',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - noab - 1 + nvab * (h14b_2 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+p10b-1),1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_1_4',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_1_4'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_1_4'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_1_4',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h14b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1
     &),4,1,3,2,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab * (p5b - noab - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_1_4',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_1_4'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_1_4_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h14 p10 )_f + = 1 * f ( h14 p10 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h14b
      INTEGER p10b
      INTEGER dimc
      INTEGER h14b_1
      INTEGER p10b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h14b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h14b-1)+int_mb(k_spin+p10b
     &-1).ne.4)) THEN
      IF (int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h14b-1),int_mb(k_sym+p10b-1)) .eq. irrep_f) 
     &THEN
      dimc = int_mb(k_range+h14b-1) * int_mb(k_range+p10b-1)
      CALL TCE_RESTRICTED_2(h14b,p10b,h14b_1,p10b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h14b-1) * int_mb(k_range+p10b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_4_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_1_4_1',1,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p10b_
     &1 - 1 + (noab+nvab) * (h14b_1 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+p10b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_1_4_1',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_1_4_1',3,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p10b-1
     &),int_mb(k_range+h14b-1),2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p10b 
     &- noab - 1 + nvab * (h14b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_1_4_1',4,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_1_4_
     &1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_1_4_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h14 p10 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h14b
      INTEGER p10b
      length = 0
      DO h14b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h14b-1),int_mb(k_sym+p10b-1)) .eq. irrep_f) 
     &THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h14b-1)+int_mb(k_spin+p10b
     &-1).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_1_4_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h14b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h14b-1),int_mb(k_sym+p10b-1)) .eq. irrep_f) 
     &THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h14b-1)+int_mb(k_spin+p10b
     &-1).ne.4)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p10b - noab - 1 + nvab * (h14b - 1)
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h14b-1) * int_mb(k_range+p10b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_1_4_2(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h14 p10 )_vt + = -1 * Sum ( h12 p11 ) * t ( p11 h12 )_t * v ( h12 h14 p10 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h14b
      INTEGER p10b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p11b
      INTEGER h12b
      INTEGER p11b_1
      INTEGER h12b_1
      INTEGER h14b_2
      INTEGER h12b_2
      INTEGER p10b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h14b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h14b-1)+int_mb(k_spin+p10b
     &-1).ne.4)) THEN
      IF (int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h14b-1),int_mb(k_sym+p10b-1)) .eq. ieor(irre
     &p_v,irrep_t)) THEN
      dimc = int_mb(k_range+h14b-1) * int_mb(k_range+p10b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_4_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p11b = noab+1,noab+nvab
      DO h12b = 1,noab
      IF (int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),int_mb(k_sym+h12b-1)) .eq. irrep_t) 
     &THEN
      CALL TCE_RESTRICTED_2(p11b,h12b,p11b_1,h12b_1)
      CALL TCE_RESTRICTED_4(h14b,h12b,p10b,p11b,h14b_2,h12b_2,p10b_2,p11
     &b_2)
      dim_common = int_mb(k_range+p11b-1) * int_mb(k_range+h12b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h14b-1) * int_mb(k_range+p10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_4_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_1_4_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (p11b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p11b-1
     &),int_mb(k_range+h12b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_1_4_2',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_4_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_1_4_2',5,MA_ERR)
      IF ((h12b .le. h14b) .and. (p11b .lt. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h14b_2 - 1 + (n
     &oab+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+p11b-1),int_mb(k_range+p10
     &b-1),4,2,1,3,-1.0d0)
      END IF
      IF ((h12b .le. h14b) .and. (p10b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h14b_2 - 1 + (n
     &oab+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+p10b-1),int_mb(k_range+p11
     &b-1),3,2,1,4,1.0d0)
      END IF
      IF ((h14b .lt. h12b) .and. (p11b .lt. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (n
     &oab+nvab) * (h14b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+p11b-1),int_mb(k_range+p10
     &b-1),4,1,2,3,1.0d0)
      END IF
      IF ((h14b .lt. h12b) .and. (p10b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (n
     &oab+nvab) * (h14b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+p10b-1),int_mb(k_range+p11
     &b-1),3,1,2,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_1_4_2',6,
     &MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_1_4_
     &2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_1_4_
     &2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_1_4_2',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p10b-1
     &),int_mb(k_range+h14b-1),2,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p10b 
     &- noab - 1 + nvab * (h14b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_1_4_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_1_4_
     &2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_1_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h14 p5 h1 h2 )_vt + = 1 * P( 2 ) * Sum ( h11 p10 ) * t ( p5 p10 h1 h11 )_t * i2 ( h11 h14 h2 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h14b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p10b
      INTEGER h11b
      INTEGER p5b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h11b_1
      INTEGER h14b_2
      INTEGER h11b_2
      INTEGER h2b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_5',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p10b = noab+1,noab+nvab
      DO h11b = 1,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h11b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h11b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p5b,p10b,h1b,h11b,p5b_1,p10b_1,h1b_1,h11b_1)
      CALL TCE_RESTRICTED_4(h14b,h11b,h2b,p10b,h14b_2,h11b_2,h2b_2,p10b_
     &2)
      dim_common = int_mb(k_range+p10b-1) * int_mb(k_range+h11b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h14b-1) * int_mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_5',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_1_5',2,MA_ERR)
      IF ((p10b .lt. p5b) .and. (h11b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h11b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p10
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+h11b-1),int_mb(k_range+h1b-
     &1),4,2,3,1,1.0d0)
      END IF
      IF ((p10b .lt. p5b) .and. (h1b .le. h11b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h11b_
     &1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p10
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+h1b-1),int_mb(k_range+h11b-
     &1),3,2,4,1,-1.0d0)
      END IF
      IF ((p5b .le. p10b) .and. (h11b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h11b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p5
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+h11b-1),int_mb(k_range+h1b-
     &1),4,1,3,2,-1.0d0)
      END IF
      IF ((p5b .le. p10b) .and. (h1b .le. h11b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h11b_
     &1 - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p5
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+h1b-1),int_mb(k_range+h11b-
     &1),3,1,4,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_1_5',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_5',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_1_5',5,MA_ERR)
      IF ((h11b .le. h14b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - noab - 1 + nvab * (h2b_2 - 1 + noab * (h14b_2 - 1 + noab * (h1
     &1b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+h2b-1),int_mb(k_range+p10b
     &-1),3,2,1,4,1.0d0)
      END IF
      IF ((h14b .lt. h11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - noab - 1 + nvab * (h2b_2 - 1 + noab * (h11b_2 - 1 + noab * (h1
     &4b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+h2b-1),int_mb(k_range+p10b
     &-1),3,1,2,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_1_5',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_1_5'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_1_5'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_1_5',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1
     &),4,2,3,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab * (p5b - noab - 1))
     &)))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1
     &),4,2,1,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (h14b - 1 + noab * (p5b - noab - 1))
     &)))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_1_5',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_1_5'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_1_5_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 h14 h1 p10 )_v + = 1 * v ( h11 h14 h1 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER h14b
      INTEGER h1b
      INTEGER p10b
      INTEGER dimc
      INTEGER h11b_1
      INTEGER h14b_1
      INTEGER h1b_1
      INTEGER p10b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h11b = 1,noab
      DO h14b = h11b,noab
      DO h1b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p10b-1).ne.8)) THEN
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p10b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+h11b-1) * int_mb(k_range+h14b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+p10b-1)
      CALL TCE_RESTRICTED_4(h11b,h14b,h1b,p10b,h11b_1,h14b_1,h1b_1,p10b_
     &1)
      dim_common = 1
      dima_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h14b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p10b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_5_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_1_5_1',1,MA_ERR)
      IF ((h1b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p10b_
     &1 - 1 + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h14b_1 - 1 + (no
     &ab+nvab) * (h11b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+h1b-1),int_mb(k_range+p10b
     &-1),4,3,2,1,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_1_5_1',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_1_5_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p10b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+h14b-1),int_mb(k_range+h11b
     &-1),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p10b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (h14b - 1 + noab * (h11b - 1
     &)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_1_5_1',4,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_1_5_
     &1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_1_5_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 h14 h1 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h11b
      INTEGER h14b
      INTEGER h1b
      INTEGER p10b
      length = 0
      DO h11b = 1,noab
      DO h14b = h11b,noab
      DO h1b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p10b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p10b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_1_5_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h11b = 1,noab
      DO h14b = h11b,noab
      DO h1b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p10b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p10b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p10b - noab - 1 + nvab * (h1b - 1 + noab
     & * (h14b - 1 + noab * (h11b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h11b-1) * int_mb(k_range+h14b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+p10b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_1_5_2(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h11 h14 h1 p10 )_vt + = -1 * Sum ( p12 ) * t ( p12 h1 )_t * v ( h11 h14 p10 p12 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h11b
      INTEGER h14b
      INTEGER h1b
      INTEGER p10b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p12b
      INTEGER p12b_1
      INTEGER h1b_1
      INTEGER h11b_2
      INTEGER h14b_2
      INTEGER p10b_2
      INTEGER p12b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h11b = 1,noab
      DO h14b = h11b,noab
      DO h1b = 1,noab
      DO p10b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p10b-1).ne.8)) THEN
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p10b-1)))) .eq. ieor(irrep_v,irrep_t))
     & THEN
      dimc = int_mb(k_range+h11b-1) * int_mb(k_range+h14b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+p10b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_5_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p12b = noab+1,noab+nvab
      IF (int_mb(k_spin+p12b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p12b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p12b,h1b,p12b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h11b,h14b,p10b,p12b,h11b_2,h14b_2,p10b_2,p12
     &b_2)
      dim_common = int_mb(k_range+p12b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h14b-1) * int_
     &mb(k_range+p10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_5_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_1_5_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p12b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p12b-1
     &),int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_1_5_2',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_5_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_1_5_2',5,MA_ERR)
      IF ((p12b .lt. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p12b_2 - 1 + (noab+nvab) * (h14b_2 - 1 + (n
     &oab+nvab) * (h11b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+p12b-1),int_mb(k_range+p10
     &b-1),4,2,1,3,-1.0d0)
      END IF
      IF ((p10b .le. p12b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p12b_
     &2 - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h14b_2 - 1 + (n
     &oab+nvab) * (h11b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+p10b-1),int_mb(k_range+p12
     &b-1),3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_1_5_2',6,
     &MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_1_5_
     &2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_1_5_
     &2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_1_5_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p10b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+h11b-1),int_mb(k_range+h1b
     &-1),3,2,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p10b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (h14b - 1 + noab * (h11b - 1
     &)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_1_5_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_1_5_
     &2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_1_6(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h14 p5 h1 h2 )_vt + = 1/2 * Sum ( p10 p11 ) * t ( p10 p11 h1 h2 )_t * v ( h14 p5 p10 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h14b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p10b
      INTEGER p11b
      INTEGER p10b_1
      INTEGER p11b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER p5b_2
      INTEGER h14b_2
      INTEGER p10b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL nxtask
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_6',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p10b = noab+1,noab+nvab
      DO p11b = p10b,noab+nvab
      IF (int_mb(k_spin+p10b-1)+int_mb(k_spin+p11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),ieor(int_mb(k_sym+p11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p10b,p11b,h1b,h2b,p10b_1,p11b_1,h1b_1,h2b_1)
      CALL TCE_RESTRICTED_4(p5b,h14b,p10b,p11b,p5b_2,h14b_2,p10b_2,p11b_
     &2)
      dim_common = int_mb(k_range+p10b-1) * int_mb(k_range+p11b-1)
      dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_6',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_1_6',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p11b_1 - noab - 1 + nvab * (p10
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p11b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-
     &1),4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_1_6',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_6',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_1_6',5,MA_ERR)
      IF ((h14b .le. p5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (p5b_2 - 1 + (no
     &ab+nvab) * (h14b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+p10b-1),int_mb(k_range+p11b
     &-1),1,2,4,3,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_1_6',6,MA
     &_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p10b .eq. p11b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_1_6'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_1_6'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_1_6',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h14b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1
     &),2,1,4,3,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab * (p5b - noab - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_1_6',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_1_6'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_1_7(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h14 p5 h1 h2 )_vt + = 1/2 * Sum ( h12 p10 p11 ) * t ( p5 p10 p11 h1 h2 h12 )_t * v ( h12 h14 p10 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h14b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p10b
      INTEGER p11b
      INTEGER h12b
      INTEGER p5b_1
      INTEGER p10b_1
      INTEGER p11b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h12b_1
      INTEGER h14b_2
      INTEGER h12b_2
      INTEGER p10b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL nxtask
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_7',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p10b = noab+1,noab+nvab
      DO p11b = p10b,noab+nvab
      DO h12b = 1,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p10b-1)+int_mb(k_spin+p11b-
     &1) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h1
     &2b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+p11b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),i
     &nt_mb(k_sym+h12b-1)))))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_6(p5b,p10b,p11b,h1b,h2b,h12b,p5b_1,p10b_1,p11b
     &_1,h1b_1,h2b_1,h12b_1)
      CALL TCE_RESTRICTED_4(h14b,h12b,p10b,p11b,h14b_2,h12b_2,p10b_2,p11
     &b_2)
      dim_common = int_mb(k_range+p10b-1) * int_mb(k_range+p11b-1) * int
     &_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_7',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_1_7',2,MA_ERR)
      IF ((p11b .lt. p5b) .and. (h12b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h12b_1 - 1 + noab * (p5b_1 - no
     &ab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p10b_1 - noab - 1))))
     &)))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p11b-1),int_mb(k_range+p5b-1),int_mb(k_range+h12b
     &-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),6,5,3,4,2,1,1.0d0)
      END IF
      IF ((p11b .lt. p5b) .and. (h1b .le. h12b) .and. (h12b .lt. h2b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h12b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - no
     &ab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p10b_1 - noab - 1))))
     &)))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p11b-1),int_mb(k_range+p5b-1),int_mb(k_range+h1b-
     &1),int_mb(k_range+h12b-1),int_mb(k_range+h2b-1),6,4,3,5,2,1,-1.0d0
     &)
      END IF
      IF ((p11b .lt. p5b) .and. (h2b .le. h12b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - no
     &ab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p10b_1 - noab - 1))))
     &)))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p11b-1),int_mb(k_range+p5b-1),int_mb(k_range+h1b-
     &1),int_mb(k_range+h2b-1),int_mb(k_range+h12b-1),5,4,3,6,2,1,1.0d0)
      END IF
      IF ((p10b .lt. p5b) .and. (p5b .le. p11b) .and. (h12b .lt. h1b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h12b_1 - 1 + noab * (p11b_1 - n
     &oab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p10b_1 - noab - 1))))
     &)))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+p11b-1),int_mb(k_range+h12b
     &-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),6,5,2,4,3,1,-1.0d0
     &)
      END IF
      IF ((p10b .lt. p5b) .and. (p5b .le. p11b) .and. (h1b .le. h12b) .a
     &nd. (h12b .lt. h2b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h12b_1 - 1 + noab * (h1b_1 - 1 + noab * (p11b_1 - n
     &oab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p10b_1 - noab - 1))))
     &)))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+p11b-1),int_mb(k_range+h1b-
     &1),int_mb(k_range+h12b-1),int_mb(k_range+h2b-1),6,4,2,5,3,1,1.0d0)
      END IF
      IF ((p10b .lt. p5b) .and. (p5b .le. p11b) .and. (h2b .le. h12b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p11b_1 - n
     &oab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p10b_1 - noab - 1))))
     &)))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+p11b-1),int_mb(k_range+h1b-
     &1),int_mb(k_range+h2b-1),int_mb(k_range+h12b-1),5,4,2,6,3,1,-1.0d0
     &)
      END IF
      IF ((p5b .le. p10b) .and. (h12b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h12b_1 - 1 + noab * (p11b_1 - n
     &oab - 1 + nvab * (p10b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))
     &)))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+p11b-1),int_mb(k_range+h12b
     &-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),6,5,1,4,3,2,1.0d0)
      END IF
      IF ((p5b .le. p10b) .and. (h1b .le. h12b) .and. (h12b .lt. h2b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h12b_1 - 1 + noab * (h1b_1 - 1 + noab * (p11b_1 - n
     &oab - 1 + nvab * (p10b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))
     &)))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+p11b-1),int_mb(k_range+h1b-
     &1),int_mb(k_range+h12b-1),int_mb(k_range+h2b-1),6,4,1,5,3,2,-1.0d0
     &)
      END IF
      IF ((p5b .le. p10b) .and. (h2b .le. h12b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p11b_1 - n
     &oab - 1 + nvab * (p10b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))
     &)))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+p11b-1),int_mb(k_range+h1b-
     &1),int_mb(k_range+h2b-1),int_mb(k_range+h12b-1),5,4,1,6,3,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_1_7',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_1_7',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_1_7',5,MA_ERR)
      IF ((h12b .le. h14b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h14b_2 - 1 + (n
     &oab+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+p10b-1),int_mb(k_range+p11
     &b-1),2,1,4,3,1.0d0)
      END IF
      IF ((h14b .lt. h12b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (n
     &oab+nvab) * (h14b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+p10b-1),int_mb(k_range+p11
     &b-1),1,2,4,3,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_1_7',6,MA
     &_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p10b .eq. p11b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_1_7'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_1_7'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_1_7',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h14b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1
     &),4,1,3,2,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab * (p5b - noab - 1))
     &)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_1_7',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_1_7'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_2(d_a,k_a_offset,d_b,k_b_offset,a_c,t_p5
     &b,t_p6b,t_p7b,t_p8b,t_h1b,t_h2b,t_h3b,t_h4b)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p5 p6 p7 p8 h1 h2 h3 h4 )_vt + = -1 * P( 24 ) * Sum ( p14 ) * t ( p5 p6 p14 h1 h2 h3 )_t * i1 ( p7 p8 h4 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER t_p5b
      INTEGER t_p6b
      INTEGER t_p7b
      INTEGER t_p8b
      INTEGER t_h1b
      INTEGER t_h2b
      INTEGER t_h3b
      INTEGER t_h4b
      INTEGER p5b
      INTEGER p6b
      INTEGER p7b
      INTEGER p8b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER h4b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p14b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER p14b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h3b_1
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER h4b_2
      INTEGER p14b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      DOUBLE PRECISION a_c(*)
      LOGICAL skipped
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO p7b = noab+1,noab+nvab
      DO p8b = p7b,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      DO h4b = 1,noab
      skipped = .true.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h4b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h3b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h4b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h3b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h4b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h3b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h4b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h3b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h4b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h3b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h4b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h3b)) skipped = .fals
     &e.
      IF (.not.skipped) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1)+i
     &nt_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-1)
     &+int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-
     &1)+int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+p8b-1),ieor(int_mb(k_sym+h1b-1),ieo
     &r(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h4b-1)
     &))))))) .eq. ieor(irrep_v,irrep_t)) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+p7b-1) * int_mb(k_range+p8b-1) * int_mb(k_range+h1b-1) * int_m
     &b(k_range+h2b-1) * int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p14b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p14b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p14b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_6(p5b,p6b,p14b,h1b,h2b,h3b,p5b_1,p6b_1,p14b_1,
     &h1b_1,h2b_1,h3b_1)
      CALL TCE_RESTRICTED_4(p7b,p8b,h4b,p14b,p7b_2,p8b_2,h4b_2,p14b_2)
      dim_common = int_mb(k_range+p14b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1) * int_mb
     &(k_range+h4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_2',2,MA_ERR)
      IF ((p14b .lt. p5b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h3b_1
     & - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noa
     &b - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p14b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p14b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h3b-1),6,5,4,3,2,1,1.0d0)
      END IF
      IF ((p5b .le. p14b) .and. (p14b .lt. p6b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h3b_1
     & - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noa
     &b - 1 + nvab * (p14b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p14b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h3b-1),6,5,4,3,1,2,-1.0d0)
      END IF
      IF ((p6b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h3b_1
     & - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p14b_1 - no
     &ab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p14b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h3b-1),6,5,4,2,1,3,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_2',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_2',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - noab - 1 + nvab * (h4b_2 - 1 + noab * (p8b_2 - noab - 1 + nvab
     & * (p7b_2 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p7b-1)
     &,int_mb(k_range+p8b-1),int_mb(k_range+h4b-1),int_mb(k_range+p14b-1
     &),3,2,1,4,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_2',6,MA_E
     &RR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_2',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_2',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,3,2,6,5,4,1,-1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h4b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,3,2,1,6,5,4,1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,3,2,6,1,5,4,-1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h3b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,3,2,6,5,1,4,1.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),3,8,7,2,6,5,4,1,-1.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h4b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),3,8,7,2,1,6,5,4,1.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),3,8,7,2,6,1,5,4,-1.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h3b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),3,8,7,2,6,5,1,4,1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,3,7,2,6,5,4,1,1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h4b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,3,7,2,1,6,5,4,-1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,3,7,2,6,1,5,4,1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h3b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,3,7,2,6,5,1,4,-1.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),3,8,2,7,6,5,4,1,1.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h4b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),3,8,2,7,1,6,5,4,-1.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),3,8,2,7,6,1,5,4,1.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h3b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),3,8,2,7,6,5,1,4,-1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,3,2,7,6,5,4,1,-1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h4b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,3,2,7,1,6,5,4,1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,3,2,7,6,1,5,4,-1.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h3b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,3,2,7,6,5,1,4,1.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),3,2,8,7,6,5,4,1,-1.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h4b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),3,2,8,7,1,6,5,4,1.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h3b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),3,2,8,7,6,1,5,4,-1.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h3b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h3b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),3,2,8,7,6,5,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_2',9
     &,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p5 p6 h1 p14 )_v + = 1 * v ( p5 p6 h1 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER p14b
      INTEGER dimc
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER p14b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+p14b-1)
      CALL TCE_RESTRICTED_4(p5b,p6b,h1b,p14b,p5b_1,p6b_1,h1b_1,p14b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+p14b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_2_1',1,MA_ERR)
      IF ((h1b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p14b_
     &1 - 1 + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (p6b_1 - 1 + (noa
     &b+nvab) * (p5b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+h1b-1),int_mb(k_range+p14b-1
     &),4,3,2,1,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_2_1',2,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_2_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1
     &),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (p6b - noab - 1 + nvab * (p5
     &b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_2_1',4,MA
     &_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_2_1'
     &,5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_2_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p5 p6 h1 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER p14b
      length = 0
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p14b - noab - 1 + nvab * (h1b - 1 + noab
     & * (p6b - noab - 1 + nvab * (p5b - noab - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p14b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p5 p6 h1 p14 )_vt + = -1 * P( 2 ) * Sum ( h13 ) * t ( p5 h13 )_t * i2 ( h13 p6 h1 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER p14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h13b
      INTEGER p5b_1
      INTEGER h13b_1
      INTEGER p6b_2
      INTEGER h13b_2
      INTEGER h1b_2
      INTEGER p14b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO p6b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+p14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h13b = 1,noab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h13b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p5b,h13b,p5b_1,h13b_1)
      CALL TCE_RESTRICTED_4(p6b,h13b,h1b,p14b,p6b_2,h13b_2,h1b_2,p14b_2)
      dim_common = int_mb(k_range+h13b-1)
      dima_sort = int_mb(k_range+p5b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p6b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+p14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h13b_
     &1 - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h13b-1),1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_2_2',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_2_2',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - noab - 1 + nvab * (h1b_2 - 1 + noab * (h13b_2 - 1 + noab * (p6
     &b_2 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h13b-1),int_mb(k_range+h1b-1),int_mb(k_range+p14b-
     &1),4,3,1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_2_2',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_2_2'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_2_2'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_2_2',9,MA_ERR)
      IF ((p5b .le. p6b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1
     &),4,3,2,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (p6b - noab - 1 + nvab * (p5
     &b - noab - 1)))))
      END IF
      IF ((p6b .le. p5b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1
     &),3,4,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (p5b - noab - 1 + nvab * (p6
     &b - noab - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_2_2',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_2_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_2_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h13 p5 h1 p14 )_v + = 1 * v ( h13 p5 h1 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h13b
      INTEGER h1b
      INTEGER p14b
      INTEGER dimc
      INTEGER p5b_1
      INTEGER h13b_1
      INTEGER h1b_1
      INTEGER p14b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h13b = 1,noab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h13b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h13b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h13b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+p14b-1)
      CALL TCE_RESTRICTED_4(p5b,h13b,h1b,p14b,p5b_1,h13b_1,h1b_1,p14b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h13b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+p14b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_2_2_1',1,MA_ERR)
      IF ((h13b .le. p5b) .and. (h1b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p14b_
     &1 - 1 + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (p5b_1 - 1 + (noa
     &b+nvab) * (h13b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h13b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+h1b-1),int_mb(k_range+p14b-
     &1),4,3,1,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_2_2_1',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_2_2_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+h13b-1),int_mb(k_range+p5b-
     &1),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (h13b - 1 + noab * (p5b - no
     &ab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_2_2_1',4,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_2_2_
     &1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_2_2_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h13 p5 h1 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p5b
      INTEGER h13b
      INTEGER h1b
      INTEGER p14b
      length = 0
      DO p5b = noab+1,noab+nvab
      DO h13b = 1,noab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (int_mb(k_spin+h13b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h13b-1)+int_mb(k_spin+p5b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_2_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p5b = noab+1,noab+nvab
      DO h13b = 1,noab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (int_mb(k_spin+h13b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h13b-1)+int_mb(k_spin+p5b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p14b - noab - 1 + nvab * (h1b - 1 + noab
     & * (h13b - 1 + noab * (p5b - noab - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p5b-1) * int_mb(k_range+h13b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+p14b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_2_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h13 p5 h1 p14 )_vt + = 1/2 * Sum ( h12 ) * t ( p5 h12 )_t * i3 ( h12 h13 h1 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h13b
      INTEGER h1b
      INTEGER p14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h12b
      INTEGER p5b_1
      INTEGER h12b_1
      INTEGER h13b_2
      INTEGER h12b_2
      INTEGER h1b_2
      INTEGER p14b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h13b = 1,noab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h13b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h13b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h13b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+p14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h12b = 1,noab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h12b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p5b,h12b,p5b_1,h12b_1)
      CALL TCE_RESTRICTED_4(h13b,h12b,h1b,p14b,h13b_2,h12b_2,h1b_2,p14b_
     &2)
      dim_common = int_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p5b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h13b-1) * int_mb(k_range+h1b-1) * int_m
     &b(k_range+p14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_2_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h12b-1),1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_2_2_2',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_2_2_2',5,MA_ERR)
      IF ((h12b .le. h13b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - noab - 1 + nvab * (h1b_2 - 1 + noab * (h13b_2 - 1 + noab * (h1
     &2b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h13b-1),int_mb(k_range+h1b-1),int_mb(k_range+p14b
     &-1),4,3,2,1,1.0d0)
      END IF
      IF ((h13b .lt. h12b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - noab - 1 + nvab * (h1b_2 - 1 + noab * (h12b_2 - 1 + noab * (h1
     &3b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h13b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+h1b-1),int_mb(k_range+p14b
     &-1),4,3,1,2,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_2_2_2',6,
     &MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_2_2_
     &2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_2_2_
     &2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_2_2_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+h13b-1),int_mb(k_range+p5b-
     &1),4,3,2,1,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (h13b - 1 + noab * (p5b - no
     &ab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_2_2_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_2_2_
     &2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_2_2_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h12 h13 h1 p14 )_v + = 1 * v ( h12 h13 h1 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h12b
      INTEGER h13b
      INTEGER h1b
      INTEGER p14b
      INTEGER dimc
      INTEGER h12b_1
      INTEGER h13b_1
      INTEGER h1b_1
      INTEGER p14b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h12b = 1,noab
      DO h13b = h12b,noab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+h12b-1) * int_mb(k_range+h13b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+p14b-1)
      CALL TCE_RESTRICTED_4(h12b,h13b,h1b,p14b,h12b_1,h13b_1,h1b_1,p14b_
     &1)
      dim_common = 1
      dima_sort = int_mb(k_range+h12b-1) * int_mb(k_range+h13b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p14b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_2_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_2_2_2_1',1,MA_ERR)
      IF ((h1b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p14b_
     &1 - 1 + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h13b_1 - 1 + (no
     &ab+nvab) * (h12b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h13b-1),int_mb(k_range+h1b-1),int_mb(k_range+p14b
     &-1),4,3,2,1,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_2_2_2_1',
     &2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_2_2_2_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+h13b-1),int_mb(k_range+h12b
     &-1),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (h13b - 1 + noab * (h12b - 1
     &)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_2_2_2_1',
     &4,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_2_2_
     &2_1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_2_2_2_1(l_a_offset,k_a_offset,siz
     &e)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h12 h13 h1 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h12b
      INTEGER h13b
      INTEGER h1b
      INTEGER p14b
      length = 0
      DO h12b = 1,noab
      DO h13b = h12b,noab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_2_2_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h12b = 1,noab
      DO h13b = h12b,noab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p14b - noab - 1 + nvab * (h1b - 1 + noab
     & * (h13b - 1 + noab * (h12b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h12b-1) * int_mb(k_range+h13b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+p14b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_2_2_2_2(d_a,k_a_offset,d_b,k_b_offset,d_
     &c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h12 h13 h1 p14 )_vt + = 1 * Sum ( p9 ) * t ( p9 h1 )_t * v ( h12 h13 p9 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h12b
      INTEGER h13b
      INTEGER h1b
      INTEGER p14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h12b_2
      INTEGER h13b_2
      INTEGER p14b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h12b = 1,noab
      DO h13b = h12b,noab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h13b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. ieor(irrep_v,irrep_t))
     & THEN
      dimc = int_mb(k_range+h12b-1) * int_mb(k_range+h13b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+p14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_2_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p9b,h1b,p9b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h12b,h13b,p14b,p9b,h12b_2,h13b_2,p14b_2,p9b_
     &2)
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h12b-1) * int_mb(k_range+h13b-1) * int_
     &mb(k_range+p14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_2_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_2_2_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p9b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_2_2_2_2',
     &3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_2_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_2_2_2_2',5,MA_ERR)
      IF ((p9b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h13b_2 - 1 + (no
     &ab+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h13b-1),int_mb(k_range+p9b-1),int_mb(k_range+p14b
     &-1),4,2,1,3,1.0d0)
      END IF
      IF ((p14b .lt. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p14b_2 - 1 + (noab+nvab) * (h13b_2 - 1 + (no
     &ab+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h13b-1),int_mb(k_range+p14b-1),int_mb(k_range+p9b
     &-1),3,2,1,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_2_2_2_2',
     &6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_2_2_
     &2_2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_2_2_
     &2_2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_2_2_2_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+h13b-1),int_mb(k_range+h12b-1),int_mb(k_range+h1b
     &-1),3,2,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (h13b - 1 + noab * (h12b - 1
     &)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_2_2_2_2',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_2_2_
     &2_2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_2_2_3(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h13 p5 h1 p14 )_vt + = 1 * Sum ( p9 ) * t ( p9 h1 )_t * v ( h13 p5 p9 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h13b
      INTEGER h1b
      INTEGER p14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER p5b_2
      INTEGER h13b_2
      INTEGER p14b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h13b = 1,noab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h13b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h13b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h13b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+p14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_2_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p9b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) TH
     &EN
      CALL TCE_RESTRICTED_2(p9b,h1b,p9b_1,h1b_1)
      CALL TCE_RESTRICTED_4(p5b,h13b,p14b,p9b,p5b_2,h13b_2,p14b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h13b-1) * int_m
     &b(k_range+p14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_2_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_2_2_3',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p9b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_2_2_3',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_2_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_2_2_3',5,MA_ERR)
      IF ((h13b .le. p5b) .and. (p9b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (p5b_2 - 1 + (noa
     &b+nvab) * (h13b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h13b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+p9b-1),int_mb(k_range+p14b-
     &1),4,1,2,3,1.0d0)
      END IF
      IF ((h13b .le. p5b) .and. (p14b .lt. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p14b_2 - 1 + (noab+nvab) * (p5b_2 - 1 + (noa
     &b+nvab) * (h13b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h13b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+p14b-1),int_mb(k_range+p9b-
     &1),3,1,2,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_2_2_3',6,
     &MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_2_2_
     &3',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_2_2_
     &3',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_2_2_3',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+h13b-1),int_mb(k_range+p5b-1),int_mb(k_range+h1b-
     &1),3,2,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (h13b - 1 + noab * (p5b - no
     &ab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_2_2_3',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_2_2_
     &3',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_2_2_4(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h13 p5 h1 p14 )_vt + = -1 * Sum ( h11 p10 ) * t ( p5 p10 h1 h11 )_t * v ( h11 h13 p10 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h13b
      INTEGER h1b
      INTEGER p14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p10b
      INTEGER h11b
      INTEGER p5b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h11b_1
      INTEGER h13b_2
      INTEGER h11b_2
      INTEGER p14b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h13b = 1,noab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h13b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h13b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h13b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+p14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_2_4',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p10b = noab+1,noab+nvab
      DO h11b = 1,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h11b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h11b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p5b,p10b,h1b,h11b,p5b_1,p10b_1,h1b_1,h11b_1)
      CALL TCE_RESTRICTED_4(h13b,h11b,p14b,p10b,h13b_2,h11b_2,p14b_2,p10
     &b_2)
      dim_common = int_mb(k_range+p10b-1) * int_mb(k_range+h11b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h13b-1) * int_mb(k_range+p14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_2_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_2_2_4',2,MA_ERR)
      IF ((p10b .lt. p5b) .and. (h11b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h11b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p10
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+h11b-1),int_mb(k_range+h1b-
     &1),4,2,3,1,1.0d0)
      END IF
      IF ((p10b .lt. p5b) .and. (h1b .le. h11b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h11b_
     &1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p10
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+h1b-1),int_mb(k_range+h11b-
     &1),3,2,4,1,-1.0d0)
      END IF
      IF ((p5b .le. p10b) .and. (h11b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h11b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p5
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+h11b-1),int_mb(k_range+h1b-
     &1),4,1,3,2,-1.0d0)
      END IF
      IF ((p5b .le. p10b) .and. (h1b .le. h11b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h11b_
     &1 - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p5
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+h1b-1),int_mb(k_range+h11b-
     &1),3,1,4,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_2_2_4',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_2_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_2_2_4',5,MA_ERR)
      IF ((h11b .le. h13b) .and. (p10b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h13b_2 - 1 + (n
     &oab+nvab) * (h11b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h13b-1),int_mb(k_range+p10b-1),int_mb(k_range+p14
     &b-1),4,2,1,3,1.0d0)
      END IF
      IF ((h11b .le. h13b) .and. (p14b .lt. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p14b_2 - 1 + (noab+nvab) * (h13b_2 - 1 + (n
     &oab+nvab) * (h11b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h13b-1),int_mb(k_range+p14b-1),int_mb(k_range+p10
     &b-1),3,2,1,4,-1.0d0)
      END IF
      IF ((h13b .lt. h11b) .and. (p10b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (n
     &oab+nvab) * (h13b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h13b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+p10b-1),int_mb(k_range+p14
     &b-1),4,1,2,3,-1.0d0)
      END IF
      IF ((h13b .lt. h11b) .and. (p14b .lt. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p14b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (n
     &oab+nvab) * (h13b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h13b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+p14b-1),int_mb(k_range+p10
     &b-1),3,1,2,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_2_2_4',6,
     &MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_2_2_
     &4',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_2_2_
     &4',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_2_2_4',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+h13b-1),int_mb(k_range+h1b-1),int_mb(k_range+p5b-
     &1),4,2,3,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (h13b - 1 + noab * (p5b - no
     &ab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_2_2_4',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_2_2_
     &4',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_2_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p5 p6 h1 p14 )_vt + = 1 * Sum ( p10 ) * t ( p10 h1 )_t * v ( p5 p6 p10 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER p14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p10b
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER p5b_2
      INTEGER p6b_2
      INTEGER p14b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+p14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p10b,h1b,p10b_1,h1b_1)
      CALL TCE_RESTRICTED_4(p5b,p6b,p14b,p10b,p5b_2,p6b_2,p14b_2,p10b_2)
      dim_common = int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb
     &(k_range+p14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_2_3',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p10b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_2_3',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_2_3',5,MA_ERR)
      IF ((p10b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (p6b_2 - 1 + (no
     &ab+nvab) * (p5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p10b-1),int_mb(k_range+p14b-
     &1),4,2,1,3,1.0d0)
      END IF
      IF ((p14b .lt. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p14b_2 - 1 + (noab+nvab) * (p6b_2 - 1 + (no
     &ab+nvab) * (p5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p14b-1),int_mb(k_range+p10b-
     &1),3,2,1,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_2_3',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_2_3'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_2_3'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_2_3',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1),int_mb(k_range+h1b-1
     &),3,2,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (p6b - noab - 1 + nvab * (p5
     &b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_2_3',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_2_3'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_2_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p5 p6 h1 p14 )_ft + = -1 * Sum ( h13 ) * t ( p5 p6 h1 h13 )_t * i2 ( h13 p14 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER p14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h13b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h13b_1
      INTEGER h13b_2
      INTEGER p14b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. ieor(irrep_f,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+p14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_4',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h13b = 1,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h13b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p5b,p6b,h1b,h13b,p5b_1,p6b_1,h1b_1,h13b_1)
      CALL TCE_RESTRICTED_2(h13b,p14b,h13b_2,p14b_2)
      dim_common = int_mb(k_range+h13b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb
     &(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_2_4',2,MA_ERR)
      IF ((h13b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h13b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b
     &_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+h13b-1),int_mb(k_range+h1b-1
     &),4,2,1,3,-1.0d0)
      END IF
      IF ((h1b .le. h13b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h13b_
     &1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b
     &_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+h1b-1),int_mb(k_range+h13b-1
     &),3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_2_4',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_2_4',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - noab - 1 + nvab * (h13b_2 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h13b-1
     &),int_mb(k_range+p14b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_2_4',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_2_4'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_2_4'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_2_4',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1
     &),4,3,2,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (p6b - noab - 1 + nvab * (p5
     &b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_2_4',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_2_4'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_2_4_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h13 p14 )_f + = 1 * f ( h13 p14 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h13b
      INTEGER p14b
      INTEGER dimc
      INTEGER h13b_1
      INTEGER p14b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h13b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h13b-1)+int_mb(k_spin+p14b
     &-1).ne.4)) THEN
      IF (int_mb(k_spin+h13b-1) .eq. int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h13b-1),int_mb(k_sym+p14b-1)) .eq. irrep_f) 
     &THEN
      dimc = int_mb(k_range+h13b-1) * int_mb(k_range+p14b-1)
      CALL TCE_RESTRICTED_2(h13b,p14b,h13b_1,p14b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h13b-1) * int_mb(k_range+p14b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_4_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_2_4_1',1,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p14b_
     &1 - 1 + (noab+nvab) * (h13b_1 - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h13b-1
     &),int_mb(k_range+p14b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_2_4_1',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_2_4_1',3,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+h13b-1),2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h13b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_2_4_1',4,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_2_4_
     &1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_2_4_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h13 p14 )_f
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h13b
      INTEGER p14b
      length = 0
      DO h13b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (int_mb(k_spin+h13b-1) .eq. int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h13b-1),int_mb(k_sym+p14b-1)) .eq. irrep_f) 
     &THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h13b-1)+int_mb(k_spin+p14b
     &-1).ne.4)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_2_4_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h13b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (int_mb(k_spin+h13b-1) .eq. int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h13b-1),int_mb(k_sym+p14b-1)) .eq. irrep_f) 
     &THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h13b-1)+int_mb(k_spin+p14b
     &-1).ne.4)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p14b - noab - 1 + nvab * (h13b - 1)
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h13b-1) * int_mb(k_range+p14b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_2_4_2(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h13 p14 )_vt + = 1 * Sum ( h12 p11 ) * t ( p11 h12 )_t * v ( h12 h13 p11 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h13b
      INTEGER p14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p11b
      INTEGER h12b
      INTEGER p11b_1
      INTEGER h12b_1
      INTEGER h13b_2
      INTEGER h12b_2
      INTEGER p14b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h13b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h13b-1)+int_mb(k_spin+p14b
     &-1).ne.4)) THEN
      IF (int_mb(k_spin+h13b-1) .eq. int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h13b-1),int_mb(k_sym+p14b-1)) .eq. ieor(irre
     &p_v,irrep_t)) THEN
      dimc = int_mb(k_range+h13b-1) * int_mb(k_range+p14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_4_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p11b = noab+1,noab+nvab
      DO h12b = 1,noab
      IF (int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),int_mb(k_sym+h12b-1)) .eq. irrep_t) 
     &THEN
      CALL TCE_RESTRICTED_2(p11b,h12b,p11b_1,h12b_1)
      CALL TCE_RESTRICTED_4(h13b,h12b,p14b,p11b,h13b_2,h12b_2,p14b_2,p11
     &b_2)
      dim_common = int_mb(k_range+p11b-1) * int_mb(k_range+h12b-1)
      dima_sort = 1
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h13b-1) * int_mb(k_range+p14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_4_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_2_4_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (p11b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p11b-1
     &),int_mb(k_range+h12b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_2_4_2',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_4_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_2_4_2',5,MA_ERR)
      IF ((h12b .le. h13b) .and. (p11b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - 1 + (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h13b_2 - 1 + (n
     &oab+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h13b-1),int_mb(k_range+p11b-1),int_mb(k_range+p14
     &b-1),4,2,1,3,1.0d0)
      END IF
      IF ((h12b .le. h13b) .and. (p14b .lt. p11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - 1 + (noab+nvab) * (p14b_2 - 1 + (noab+nvab) * (h13b_2 - 1 + (n
     &oab+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h13b-1),int_mb(k_range+p14b-1),int_mb(k_range+p11
     &b-1),3,2,1,4,-1.0d0)
      END IF
      IF ((h13b .lt. h12b) .and. (p11b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - 1 + (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (n
     &oab+nvab) * (h13b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h13b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+p11b-1),int_mb(k_range+p14
     &b-1),4,1,2,3,-1.0d0)
      END IF
      IF ((h13b .lt. h12b) .and. (p14b .lt. p11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - 1 + (noab+nvab) * (p14b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (n
     &oab+nvab) * (h13b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h13b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+p14b-1),int_mb(k_range+p11
     &b-1),3,1,2,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_2_4_2',6,
     &MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_2_4_
     &2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_2_4_
     &2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_2_4_2',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+h13b-1),2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h13b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_2_4_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_2_4_
     &2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_2_5(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p5 p6 h1 p14 )_vt + = 1/2 * Sum ( h10 h11 ) * t ( p5 p6 h10 h11 )_t * i2 ( h10 h11 h1 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER p14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h10b
      INTEGER h11b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h10b_1
      INTEGER h11b_1
      INTEGER h10b_2
      INTEGER h11b_2
      INTEGER h1b_2
      INTEGER p14b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL nxtask
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+p14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_5',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h10b = 1,noab
      DO h11b = h10b,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &10b-1)+int_mb(k_spin+h11b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h10b-1),int_mb(k_sym+h11b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p5b,p6b,h10b,h11b,p5b_1,p6b_1,h10b_1,h11b_1)
      CALL TCE_RESTRICTED_4(h10b,h11b,h1b,p14b,h10b_2,h11b_2,h1b_2,p14b_
     &2)
      dim_common = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h1b-1) * int_mb(k_range+p14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_5',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_2_5',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h11b_
     &1 - 1 + noab * (h10b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+h10b-1),int_mb(k_range+h11b-
     &1),2,1,4,3,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_2_5',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_5',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_2_5',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - noab - 1 + nvab * (h1b_2 - 1 + noab * (h11b_2 - 1 + noab * (h1
     &0b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+h1b-1),int_mb(k_range+p14b
     &-1),4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_2_5',6,MA
     &_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h10b .eq. h11b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_2_5'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_2_5'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_2_5',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1
     &),4,3,2,1,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (p6b - noab - 1 + nvab * (p5
     &b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_2_5',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_2_5'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_2_5_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h11 h1 p14 )_v + = 1 * v ( h10 h11 h1 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER p14b
      INTEGER dimc
      INTEGER h10b_1
      INTEGER h11b_1
      INTEGER h1b_1
      INTEGER p14b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+p14b-1)
      CALL TCE_RESTRICTED_4(h10b,h11b,h1b,p14b,h10b_1,h11b_1,h1b_1,p14b_
     &1)
      dim_common = 1
      dima_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p14b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_5_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_2_5_1',1,MA_ERR)
      IF ((h1b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p14b_
     &1 - 1 + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h11b_1 - 1 + (no
     &ab+nvab) * (h10b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+h1b-1),int_mb(k_range+p14b
     &-1),4,3,2,1,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_2_5_1',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_2_5_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+h11b-1),int_mb(k_range+h10b
     &-1),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * (h10b - 1
     &)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_2_5_1',4,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_2_5_
     &1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_2_5_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h11 h1 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER p14b
      length = 0
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_2_5_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p14b - noab - 1 + nvab * (h1b - 1 + noab
     & * (h11b - 1 + noab * (h10b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+p14b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_2_5_2(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h11 h1 p14 )_vt + = 1 * Sum ( p12 ) * t ( p12 h1 )_t * v ( h10 h11 p12 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h11b
      INTEGER h1b
      INTEGER p14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p12b
      INTEGER p12b_1
      INTEGER h1b_1
      INTEGER h10b_2
      INTEGER h11b_2
      INTEGER p14b_2
      INTEGER p12b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. ieor(irrep_v,irrep_t))
     & THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+p14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_5_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p12b = noab+1,noab+nvab
      IF (int_mb(k_spin+p12b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p12b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p12b,h1b,p12b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h10b,h11b,p14b,p12b,h10b_2,h11b_2,p14b_2,p12
     &b_2)
      dim_common = int_mb(k_range+p12b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * int_
     &mb(k_range+p14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_5_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_2_5_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p12b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p12b-1
     &),int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_2_5_2',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_5_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_2_5_2',5,MA_ERR)
      IF ((p12b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - 1 + (noab+nvab) * (p12b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (n
     &oab+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+p12b-1),int_mb(k_range+p14
     &b-1),4,2,1,3,1.0d0)
      END IF
      IF ((p14b .lt. p12b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p12b_
     &2 - 1 + (noab+nvab) * (p14b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (n
     &oab+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+p14b-1),int_mb(k_range+p12
     &b-1),3,2,1,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_2_5_2',6,
     &MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_2_5_
     &2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_2_5_
     &2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_2_5_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+h10b-1),int_mb(k_range+h1b
     &-1),3,2,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (h11b - 1 + noab * (h10b - 1
     &)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_2_5_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_2_5_
     &2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_2_6(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p5 p6 h1 p14 )_vt + = 1 * P( 2 ) * Sum ( h11 p10 ) * t ( p5 p10 h1 h11 )_t * v ( h11 p6 p10 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER p14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p10b
      INTEGER h11b
      INTEGER p5b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h11b_1
      INTEGER p6b_2
      INTEGER h11b_2
      INTEGER p14b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO p6b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+p14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_6',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p10b = noab+1,noab+nvab
      DO h11b = 1,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h11b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h11b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p5b,p10b,h1b,h11b,p5b_1,p10b_1,h1b_1,h11b_1)
      CALL TCE_RESTRICTED_4(p6b,h11b,p14b,p10b,p6b_2,h11b_2,p14b_2,p10b_
     &2)
      dim_common = int_mb(k_range+p10b-1) * int_mb(k_range+h11b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p6b-1) * int_mb(k_range+p14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_6',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_2_6',2,MA_ERR)
      IF ((p10b .lt. p5b) .and. (h11b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h11b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p10
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+h11b-1),int_mb(k_range+h1b-
     &1),4,2,3,1,1.0d0)
      END IF
      IF ((p10b .lt. p5b) .and. (h1b .le. h11b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h11b_
     &1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p10
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+h1b-1),int_mb(k_range+h11b-
     &1),3,2,4,1,-1.0d0)
      END IF
      IF ((p5b .le. p10b) .and. (h11b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h11b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p5
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+h11b-1),int_mb(k_range+h1b-
     &1),4,1,3,2,-1.0d0)
      END IF
      IF ((p5b .le. p10b) .and. (h1b .le. h11b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h11b_
     &1 - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p5
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+h1b-1),int_mb(k_range+h11b-
     &1),3,1,4,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_2_6',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_6',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_2_6',5,MA_ERR)
      IF ((h11b .le. p6b) .and. (p10b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (p6b_2 - 1 + (no
     &ab+nvab) * (h11b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+p6b-1),int_mb(k_range+p10b-1),int_mb(k_range+p14b
     &-1),4,2,1,3,1.0d0)
      END IF
      IF ((h11b .le. p6b) .and. (p14b .lt. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p14b_2 - 1 + (noab+nvab) * (p6b_2 - 1 + (no
     &ab+nvab) * (h11b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+p6b-1),int_mb(k_range+p14b-1),int_mb(k_range+p10b
     &-1),3,2,1,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_2_6',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_2_6'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_2_6'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_2_6',9,MA_ERR)
      IF ((p5b .le. p6b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1
     &),4,2,3,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (p6b - noab - 1 + nvab * (p5
     &b - noab - 1)))))
      END IF
      IF ((p6b .le. p5b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1
     &),2,4,3,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (p5b - noab - 1 + nvab * (p6
     &b - noab - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_2_6',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_2_6'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_2_7(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p5 p6 h1 p14 )_vt + = 1/2 * Sum ( h11 h12 p10 ) * t ( p5 p6 p10 h1 h11 h12 )_t * v ( h11 h12 p10 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER p6b
      INTEGER h1b
      INTEGER p14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p10b
      INTEGER h11b
      INTEGER h12b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h11b_1
      INTEGER h12b_1
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER p14b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL nxtask
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+h1b-1) * int_mb(k_range+p14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_7',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p10b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h12b = h11b,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p10b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h1
     &2b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p10b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h11b-1),i
     &nt_mb(k_sym+h12b-1)))))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_6(p5b,p6b,p10b,h1b,h11b,h12b,p5b_1,p6b_1,p10b_
     &1,h1b_1,h11b_1,h12b_1)
      CALL TCE_RESTRICTED_4(h11b,h12b,p14b,p10b,h11b_2,h12b_2,p14b_2,p10
     &b_2)
      dim_common = int_mb(k_range+p10b-1) * int_mb(k_range+h11b-1) * int
     &_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb
     &(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_7',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_2_7',2,MA_ERR)
      IF ((p10b .lt. p5b) .and. (h12b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h12b_1 - 1 + noab * (h11b_1 - 1 + noab * (p6b_1 - n
     &oab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p10b_1 - noab - 1))))
     &)))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),int_mb(k_range+h11b-
     &1),int_mb(k_range+h12b-1),int_mb(k_range+h1b-1),6,3,2,5,4,1,1.0d0)
      END IF
      IF ((p10b .lt. p5b) .and. (h11b .lt. h1b) .and. (h1b .le. h12b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h1b_1 - 1 + noab * (h11b_1 - 1 + noab * (p6b_1 - n
     &oab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p10b_1 - noab - 1))))
     &)))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),int_mb(k_range+h11b-
     &1),int_mb(k_range+h1b-1),int_mb(k_range+h12b-1),5,3,2,6,4,1,-1.0d0
     &)
      END IF
      IF ((p10b .lt. p5b) .and. (h1b .le. h11b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h11b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - n
     &oab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p10b_1 - noab - 1))))
     &)))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+h12b-1),4,3,2,6,5,1,1.0d0)
      END IF
      IF ((p5b .le. p10b) .and. (p10b .lt. p6b) .and. (h12b .lt. h1b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h12b_1 - 1 + noab * (h11b_1 - 1 + noab * (p6b_1 - n
     &oab - 1 + nvab * (p10b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))
     &)))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+p6b-1),int_mb(k_range+h11b-
     &1),int_mb(k_range+h12b-1),int_mb(k_range+h1b-1),6,3,1,5,4,2,-1.0d0
     &)
      END IF
      IF ((p5b .le. p10b) .and. (p10b .lt. p6b) .and. (h11b .lt. h1b) .a
     &nd. (h1b .le. h12b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h1b_1 - 1 + noab * (h11b_1 - 1 + noab * (p6b_1 - n
     &oab - 1 + nvab * (p10b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))
     &)))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+p6b-1),int_mb(k_range+h11b-
     &1),int_mb(k_range+h1b-1),int_mb(k_range+h12b-1),5,3,1,6,4,2,1.0d0)
      END IF
      IF ((p5b .le. p10b) .and. (p10b .lt. p6b) .and. (h1b .le. h11b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h11b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - n
     &oab - 1 + nvab * (p10b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))
     &)))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+h12b-1),4,3,1,6,5,2,-1.0d0
     &)
      END IF
      IF ((p6b .le. p10b) .and. (h12b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h12b_1 - 1 + noab * (h11b_1 - 1 + noab * (p10b_1 - 
     &noab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))
     &)))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p10b-1),int_mb(k_range+h11b-
     &1),int_mb(k_range+h12b-1),int_mb(k_range+h1b-1),6,2,1,5,4,3,1.0d0)
      END IF
      IF ((p6b .le. p10b) .and. (h11b .lt. h1b) .and. (h1b .le. h12b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h1b_1 - 1 + noab * (h11b_1 - 1 + noab * (p10b_1 - 
     &noab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))
     &)))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p10b-1),int_mb(k_range+h11b-
     &1),int_mb(k_range+h1b-1),int_mb(k_range+h12b-1),5,2,1,6,4,3,-1.0d0
     &)
      END IF
      IF ((p6b .le. p10b) .and. (h1b .le. h11b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h11b_1 - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - 
     &noab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))
     &)))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p10b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+h12b-1),4,2,1,6,5,3,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_2_7',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_2_7',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_2_7',5,MA_ERR)
      IF ((p10b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (n
     &oab+nvab) * (h11b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+p10b-1),int_mb(k_range+p14
     &b-1),4,2,1,3,1.0d0)
      END IF
      IF ((p14b .lt. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p14b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (n
     &oab+nvab) * (h11b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+p14b-1),int_mb(k_range+p10
     &b-1),3,2,1,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_2_7',6,MA
     &_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h11b .eq. h12b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_2_7'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_2_7'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_2_7',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1
     &),4,3,2,1,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (p6b - noab - 1 + nvab * (p5
     &b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_2_7',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_2_7'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_3(d_a,k_a_offset,d_b,k_b_offset,a_c,t_p5
     &b,t_p6b,t_p7b,t_p8b,t_h1b,t_h2b,t_h3b,t_h4b)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p5 p6 p7 p8 h1 h2 h3 h4 )_vtt + = 3/2 * P( 24 ) * Sum ( h14 ) * t ( p5 p6 h1 h14 )_t * i1 ( h14 p7 p8 h2 h3 h4 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER t_p5b
      INTEGER t_p6b
      INTEGER t_p7b
      INTEGER t_p8b
      INTEGER t_h1b
      INTEGER t_h2b
      INTEGER t_h3b
      INTEGER t_h4b
      INTEGER p5b
      INTEGER p6b
      INTEGER p7b
      INTEGER p8b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER h4b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h14b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h14b_1
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER h14b_2
      INTEGER h2b_2
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      DOUBLE PRECISION a_c(*)
      LOGICAL skipped
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO p7b = noab+1,noab+nvab
      DO p8b = p7b,noab+nvab
      DO h1b = 1,noab
      DO h2b = 1,noab
      DO h3b = h2b,noab
      DO h4b = h3b,noab
      skipped = .true.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h1b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h1b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h1b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h1b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h1b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h1b)) skipped = .fals
     &e.
      IF (.not.skipped) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1)+i
     &nt_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-1)
     &+int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-
     &1)+int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+p8b-1),ieor(int_mb(k_sym+h1b-1),ieo
     &r(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h4b-1)
     &))))))) .eq. ieor(irrep_v,ieor(irrep_t,irrep_t))) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+p7b-1) * int_mb(k_range+p8b-1) * int_mb(k_range+h1b-1) * int_m
     &b(k_range+h2b-1) * int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h14b = 1,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h14b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p5b,p6b,h1b,h14b,p5b_1,p6b_1,h1b_1,h14b_1)
      CALL TCE_RESTRICTED_6(p7b,p8b,h14b,h2b,h3b,h4b,p7b_2,p8b_2,h14b_2,
     &h2b_2,h3b_2,h4b_2)
      dim_common = int_mb(k_range+h14b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb
     &(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1) * int_mb
     &(k_range+h2b-1) * int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_3',2,MA_ERR)
      IF ((h14b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h14b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b
     &_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+h14b-1),int_mb(k_range+h1b-1
     &),4,2,1,3,-1.0d0)
      END IF
      IF ((h1b .le. h14b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h14b_
     &1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b
     &_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+h1b-1),int_mb(k_range+h14b-1
     &),3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_3',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_3',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(h4b_2
     & - 1 + noab * (h3b_2 - 1 + noab * (h2b_2 - 1 + noab * (h14b_2 - 1 
     &+ noab * (p8b_2 - noab - 1 + nvab * (p7b_2 - noab - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p7b-1)
     &,int_mb(k_range+p8b-1),int_mb(k_range+h14b-1),int_mb(k_range+h2b-1
     &),int_mb(k_range+h3b-1),int_mb(k_range+h4b-1),6,5,4,2,1,3,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_3',6,MA_E
     &RR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_3',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_3',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,5,4,6,3,2,1,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,5,4,3,6,2,1,-3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,5,4,3,2,6,1,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h1b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,5,4,3,2,1,6,-3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),5,8,7,4,6,3,2,1,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),5,8,7,4,3,6,2,1,-3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),5,8,7,4,3,2,6,1,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h1b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),5,8,7,4,3,2,1,6,-3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,5,7,4,6,3,2,1,-3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,5,7,4,3,6,2,1,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,5,7,4,3,2,6,1,-3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h1b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,5,7,4,3,2,1,6,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),5,8,4,7,6,3,2,1,-3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),5,8,4,7,3,6,2,1,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),5,8,4,7,3,2,6,1,-3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h1b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),5,8,4,7,3,2,1,6,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,5,4,7,6,3,2,1,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,5,4,7,3,6,2,1,-3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,5,4,7,3,2,6,1,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h1b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,5,4,7,3,2,1,6,-3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),5,4,8,7,6,3,2,1,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),5,4,8,7,3,6,2,1,-3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),5,4,8,7,3,2,6,1,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h1b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+p7b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),5,4,8,7,3,2,1,6,-3.0d0/2.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_3',9
     &,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_3_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h14 p5 p6 h1 h2 h3 )_vt + = 1/3 * P( 3 ) * Sum ( h10 ) * t ( p5 p6 h1 h10 )_t * i2 ( h10 h14 h2 h3 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER p6b
      INTEGER h14b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h10b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h1b_1
      INTEGER h10b_1
      INTEGER h14b_2
      INTEGER h10b_2
      INTEGER h2b_2
      INTEGER h3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+h14b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h14b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h14b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+h14b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_
     &mb(k_range+h3b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h10b = 1,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h10b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p5b,p6b,h1b,h10b,p5b_1,p6b_1,h1b_1,h10b_1)
      CALL TCE_RESTRICTED_4(h14b,h10b,h2b,h3b,h14b_2,h10b_2,h2b_2,h3b_2)
      dim_common = int_mb(k_range+h10b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb
     &(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h14b-1) * int_mb(k_range+h2b-1) * int_m
     &b(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_3_1',2,MA_ERR)
      IF ((h10b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h10b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b
     &_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+h10b-1),int_mb(k_range+h1b-1
     &),4,2,1,3,-1.0d0)
      END IF
      IF ((h1b .le. h10b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5b
     &_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+h1b-1),int_mb(k_range+h10b-1
     &),3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_3_1',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_3_1',5,MA_ERR)
      IF ((h10b .le. h14b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(h3b_2
     & - 1 + noab * (h2b_2 - 1 + noab * (h14b_2 - 1 + noab * (h10b_2 - 1
     &)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+h2b-1),int_mb(k_range+h3b-
     &1),4,3,2,1,1.0d0)
      END IF
      IF ((h14b .lt. h10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(h3b_2
     & - 1 + noab * (h2b_2 - 1 + noab * (h10b_2 - 1 + noab * (h14b_2 - 1
     &)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),int_mb(k_range+h3b-
     &1),4,3,1,2,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_3_1',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_3_1'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_3_1'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_3_1',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h3b-1)
     &,int_mb(k_range+h2b-1),int_mb(k_range+h14b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1),6,5,3,4,2,1,1.0d0/3.
     &0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h3b -
     & 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab *
     & (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((h2b .le. h1b) .and. (h1b .le. h3b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h3b-1)
     &,int_mb(k_range+h2b-1),int_mb(k_range+h14b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1),6,5,3,2,4,1,-1.0d0/3
     &.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h3b -
     & 1 + noab * (h1b - 1 + noab * (h2b - 1 + noab * (h14b - 1 + noab *
     & (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((h3b .le. h1b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h3b-1)
     &,int_mb(k_range+h2b-1),int_mb(k_range+h14b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1),6,5,3,2,1,4,1.0d0/3.
     &0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h3b - 1 + noab * (h2b - 1 + noab * (h14b - 1 + noab *
     & (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_3_1',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_3_1'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_3_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h14 p5 p6 h1 h2 h3 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p5b
      INTEGER p6b
      INTEGER h14b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      length = 0
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (int_mb(k_spin+h14b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h14b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb
     &(k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h14b-1)+int_mb(k_spin+p5b-
     &1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_3_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (int_mb(k_spin+h14b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h14b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb
     &(k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h14b-1)+int_mb(k_spin+p5b-
     &1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h3b - 1 + noab * (h2b - 1 + noab * (h1b 
     &- 1 + noab * (h14b - 1 + noab * (p6b - noab - 1 + nvab * (p5b - no
     &ab - 1)))))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_
     &mb(k_range+h14b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
     & * int_mb(k_range+h3b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_3_1_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h14 h1 h2 )_v + = 1 * v ( h10 h14 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h14b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER h10b_1
      INTEGER h14b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h10b = 1,noab
      DO h14b = h10b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h14b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+h2b-1)
      CALL TCE_RESTRICTED_4(h10b,h14b,h1b,h2b,h10b_1,h14b_1,h1b_1,h2b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h14b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_1_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_3_1_1',1,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h14b_1 - 1 + (noa
     &b+nvab) * (h10b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-
     &1),4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_3_1_1',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_3_1_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h14b-1),int_mb(k_range+h10b-
     &1),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab * (h10b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_3_1_1',4,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_3_1_
     &1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_3_1_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h14 h1 h2 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h10b
      INTEGER h14b
      INTEGER h1b
      INTEGER h2b
      length = 0
      DO h10b = 1,noab
      DO h14b = h10b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_3_1_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h10b = 1,noab
      DO h14b = h10b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h2b - 1 + noab * (h1b - 1 + noab * (h14b
     & - 1 + noab * (h10b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h10b-1) * int_mb(k_range+h14b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_3_1_2(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h14 h1 h2 )_vt + = -1 * P( 2 ) * Sum ( p11 ) * t ( p11 h1 )_t * i3 ( h10 h14 h2 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h14b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p11b
      INTEGER p11b_1
      INTEGER h1b_1
      INTEGER h10b_2
      INTEGER h14b_2
      INTEGER h2b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h10b = 1,noab
      DO h14b = h10b,noab
      DO h1b = 1,noab
      DO h2b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h14b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_1_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p11b,h1b,p11b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h10b,h14b,h2b,p11b,h10b_2,h14b_2,h2b_2,p11b_
     &2)
      dim_common = int_mb(k_range+p11b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h14b-1) * int_
     &mb(k_range+h2b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_1_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_3_1_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p11b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p11b-1
     &),int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_3_1_2',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_1_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_3_1_2',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - noab - 1 + nvab * (h2b_2 - 1 + noab * (h14b_2 - 1 + noab * (h1
     &0b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+h2b-1),int_mb(k_range+p11b
     &-1),3,2,1,4,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_3_1_2',6,
     &MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_3_1_
     &2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_3_1_
     &2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_3_1_2',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+h10b-1),int_mb(k_range+h1b-
     &1),3,2,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab * (h10b - 1)))))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+h10b-1),int_mb(k_range+h1b-
     &1),3,2,1,4,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1 + noab * (h2b - 1 + noab * (h14b - 1 + noab * (h10b - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_3_1_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_3_1_
     &2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_3_1_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h10 h14 h1 p11 )_v + = 1 * v ( h10 h14 h1 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h14b
      INTEGER h1b
      INTEGER p11b
      INTEGER dimc
      INTEGER h10b_1
      INTEGER h14b_1
      INTEGER h1b_1
      INTEGER p11b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h10b = 1,noab
      DO h14b = h10b,noab
      DO h1b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p11b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p11b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h14b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+p11b-1)
      CALL TCE_RESTRICTED_4(h10b,h14b,h1b,p11b,h10b_1,h14b_1,h1b_1,p11b_
     &1)
      dim_common = 1
      dima_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h14b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p11b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_1_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_3_1_2_1',1,MA_ERR)
      IF ((h1b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p11b_
     &1 - 1 + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h14b_1 - 1 + (no
     &ab+nvab) * (h10b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+h1b-1),int_mb(k_range+p11b
     &-1),4,3,2,1,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_3_1_2_1',
     &2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_3_1_2_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p11b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+h14b-1),int_mb(k_range+h10b
     &-1),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p11b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (h14b - 1 + noab * (h10b - 1
     &)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_3_1_2_1',
     &4,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_3_1_
     &2_1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_3_1_2_1(l_a_offset,k_a_offset,siz
     &e)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h10 h14 h1 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h10b
      INTEGER h14b
      INTEGER h1b
      INTEGER p11b
      length = 0
      DO h10b = 1,noab
      DO h14b = h10b,noab
      DO h1b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p11b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p11b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_3_1_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h10b = 1,noab
      DO h14b = h10b,noab
      DO h1b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p11b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p11b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p11b - noab - 1 + nvab * (h1b - 1 + noab
     & * (h14b - 1 + noab * (h10b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h10b-1) * int_mb(k_range+h14b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+p11b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_3_1_2_2(d_a,k_a_offset,d_b,k_b_offset,d_
     &c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h10 h14 h1 p11 )_vt + = -1/2 * Sum ( p12 ) * t ( p12 h1 )_t * v ( h10 h14 p11 p12 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h14b
      INTEGER h1b
      INTEGER p11b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p12b
      INTEGER p12b_1
      INTEGER h1b_1
      INTEGER h10b_2
      INTEGER h14b_2
      INTEGER p11b_2
      INTEGER p12b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h10b = 1,noab
      DO h14b = h10b,noab
      DO h1b = 1,noab
      DO p11b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p11b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p11b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p11b-1)))) .eq. ieor(irrep_v,irrep_t))
     & THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h14b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+p11b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_1_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p12b = noab+1,noab+nvab
      IF (int_mb(k_spin+p12b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p12b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p12b,h1b,p12b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h10b,h14b,p11b,p12b,h10b_2,h14b_2,p11b_2,p12
     &b_2)
      dim_common = int_mb(k_range+p12b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h14b-1) * int_
     &mb(k_range+p11b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_1_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_3_1_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p12b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p12b-1
     &),int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_3_1_2_2',
     &3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_1_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_3_1_2_2',5,MA_ERR)
      IF ((p12b .lt. p11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - 1 + (noab+nvab) * (p12b_2 - 1 + (noab+nvab) * (h14b_2 - 1 + (n
     &oab+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+p12b-1),int_mb(k_range+p11
     &b-1),4,2,1,3,-1.0d0)
      END IF
      IF ((p11b .le. p12b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p12b_
     &2 - 1 + (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h14b_2 - 1 + (n
     &oab+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+p11b-1),int_mb(k_range+p12
     &b-1),3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_3_1_2_2',
     &6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_3_1_
     &2_2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_3_1_
     &2_2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_3_1_2_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p11b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+h10b-1),int_mb(k_range+h1b
     &-1),3,2,4,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p11b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (h14b - 1 + noab * (h10b - 1
     &)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_3_1_2_2',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_3_1_
     &2_2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_3_1_3(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h14 h1 h2 )_vt + = 1/2 * Sum ( p11 p12 ) * t ( p11 p12 h1 h2 )_t * v ( h10 h14 p11 p12 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h14b
      INTEGER h1b
      INTEGER h2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p11b
      INTEGER p12b
      INTEGER p11b_1
      INTEGER p12b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h10b_2
      INTEGER h14b_2
      INTEGER p11b_2
      INTEGER p12b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL nxtask
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h10b = 1,noab
      DO h14b = h10b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h14b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+h2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_1_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p11b = noab+1,noab+nvab
      DO p12b = p11b,noab+nvab
      IF (int_mb(k_spin+p11b-1)+int_mb(k_spin+p12b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),ieor(int_mb(k_sym+p12b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p11b,p12b,h1b,h2b,p11b_1,p12b_1,h1b_1,h2b_1)
      CALL TCE_RESTRICTED_4(h10b,h14b,p11b,p12b,h10b_2,h14b_2,p11b_2,p12
     &b_2)
      dim_common = int_mb(k_range+p11b-1) * int_mb(k_range+p12b-1)
      dima_sort = int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_1_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_3_1_3',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p12b_1 - noab - 1 + nvab * (p11
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p11b-1
     &),int_mb(k_range+p12b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-
     &1),4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_3_1_3',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_1_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_3_1_3',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p12b_
     &2 - 1 + (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h14b_2 - 1 + (n
     &oab+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+p11b-1),int_mb(k_range+p12
     &b-1),2,1,4,3,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_3_1_3',6,
     &MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p11b .eq. p12b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_3_1_
     &3',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_3_1_
     &3',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_3_1_3',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h14b-1
     &),int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-
     &1),2,1,4,3,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab * (h10b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_3_1_3',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_3_1_
     &3',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_3_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h14 p5 p6 h1 h2 h3 )_vt + = -2/3 * P( 6 ) * Sum ( p9 ) * t ( p5 p9 h1 h2 )_t * i2 ( h14 p6 h3 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER p6b
      INTEGER h14b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER p5b_1
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER p6b_2
      INTEGER h14b_2
      INTEGER h3b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO p6b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+h14b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h14b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h14b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+h14b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_
     &mb(k_range+h3b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p9b-1) .eq. int_mb(k_spin+h
     &1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p9b-1),ieor(int_mb(
     &k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p5b,p9b,h1b,h2b,p5b_1,p9b_1,h1b_1,h2b_1)
      CALL TCE_RESTRICTED_4(p6b,h14b,h3b,p9b,p6b_2,h14b_2,h3b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p6b-1) * int_mb(k_range+h14b-1) * int_m
     &b(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_3_2',2,MA_ERR)
      IF ((p9b .lt. p5b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p9b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,4,3,2,1,-1.0d0)
      END IF
      IF ((p5b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p9b_1 - noab - 1 + nvab * (p5b_
     &1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1)
     &,4,3,1,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_3_2',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_3_2',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (h3b_2 - 1 + noab * (h14b_2 - 1 + noab * (p6b
     &_2 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+h3b-1),int_mb(k_range+p9b-1
     &),3,2,1,4,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_3_2',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_3_2'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_3_2'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_3_2',9,MA_ERR)
      IF ((p5b .le. p6b) .and. (h2b .le. h3b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h3b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+p6b-1),int_mb(k_range+h2b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1),6,3,2,5,4,1,-2.0d0/3
     &.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h3b -
     & 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab *
     & (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p5b .le. p6b) .and. (h3b .le. h1b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h3b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+p6b-1),int_mb(k_range+h2b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1),6,3,2,1,5,4,-2.0d0/3
     &.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (h14b - 1 + noab *
     & (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p5b .le. p6b) .and. (h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h3b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+p6b-1),int_mb(k_range+h2b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1),6,3,2,5,1,4,2.0d0/3.
     &0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab *
     & (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p6b .le. p5b) .and. (h2b .le. h3b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h3b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+p6b-1),int_mb(k_range+h2b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1),3,6,2,5,4,1,2.0d0/3.
     &0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h3b -
     & 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab *
     & (p5b - noab - 1 + nvab * (p6b - noab - 1)))))))
      END IF
      IF ((p6b .le. p5b) .and. (h3b .le. h1b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h3b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+p6b-1),int_mb(k_range+h2b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1),3,6,2,1,5,4,2.0d0/3.
     &0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (h14b - 1 + noab *
     & (p5b - noab - 1 + nvab * (p6b - noab - 1)))))))
      END IF
      IF ((p6b .le. p5b) .and. (h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h3b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+p6b-1),int_mb(k_range+h2b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1),3,6,2,5,1,4,-2.0d0/3
     &.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab *
     & (p5b - noab - 1 + nvab * (p6b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_3_2',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_3_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_3_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h14 p5 h1 p9 )_v + = 1 * v ( h14 p5 h1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h14b
      INTEGER h1b
      INTEGER p9b
      INTEGER dimc
      INTEGER p5b_1
      INTEGER h14b_1
      INTEGER h1b_1
      INTEGER p9b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+p9b-1)
      CALL TCE_RESTRICTED_4(p5b,h14b,h1b,p9b,p5b_1,h14b_1,h1b_1,p9b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+p9b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_3_2_1',1,MA_ERR)
      IF ((h14b .le. p5b) .and. (h1b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p9b_1
     & - 1 + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (p5b_1 - 1 + (noab
     &+nvab) * (h14b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+h1b-1),int_mb(k_range+p9b-1
     &),4,3,1,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_3_2_1',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_3_2_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h14b-1),int_mb(k_range+p5b-1
     &),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h14b - 1 + noab * (p5b - noa
     &b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_3_2_1',4,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_3_2_
     &1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_3_2_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h14 p5 h1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p5b
      INTEGER h14b
      INTEGER h1b
      INTEGER p9b
      length = 0
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h14b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h14b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h14b-1)+int_mb(k_spin+p5b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_3_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h14b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h14b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h14b-1)+int_mb(k_spin+p5b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p9b - noab - 1 + nvab * (h1b - 1 + noab 
     &* (h14b - 1 + noab * (p5b - noab - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+p9b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_3_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h14 p5 h1 p9 )_vt + = 1 * Sum ( h10 ) * t ( p5 h10 )_t * i3 ( h10 h14 h1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h14b
      INTEGER h1b
      INTEGER p9b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h10b
      INTEGER p5b_1
      INTEGER h10b_1
      INTEGER h14b_2
      INTEGER h10b_2
      INTEGER h1b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+p9b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h10b = 1,noab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h10b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h10b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p5b,h10b,p5b_1,h10b_1)
      CALL TCE_RESTRICTED_4(h14b,h10b,h1b,p9b,h14b_2,h10b_2,h1b_2,p9b_2)
      dim_common = int_mb(k_range+h10b-1)
      dima_sort = int_mb(k_range+p5b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h14b-1) * int_mb(k_range+h1b-1) * int_m
     &b(k_range+p9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_3_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h10b-1),1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_3_2_2',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_3_2_2',5,MA_ERR)
      IF ((h10b .le. h14b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (h1b_2 - 1 + noab * (h14b_2 - 1 + noab * (h10
     &b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+h1b-1),int_mb(k_range+p9b-
     &1),4,3,2,1,1.0d0)
      END IF
      IF ((h14b .lt. h10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (h1b_2 - 1 + noab * (h10b_2 - 1 + noab * (h14
     &b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+h10b-1),int_mb(k_range+h1b-1),int_mb(k_range+p9b-
     &1),4,3,1,2,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_3_2_2',6,
     &MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_3_2_
     &2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_3_2_
     &2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_3_2_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h14b-1),int_mb(k_range+p5b-1
     &),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h14b - 1 + noab * (p5b - noa
     &b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_3_2_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_3_2_
     &2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_3_2_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h10 h14 h1 p9 )_v + = 1 * v ( h10 h14 h1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h14b
      INTEGER h1b
      INTEGER p9b
      INTEGER dimc
      INTEGER h10b_1
      INTEGER h14b_1
      INTEGER h1b_1
      INTEGER p9b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h10b = 1,noab
      DO h14b = h10b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h14b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+p9b-1)
      CALL TCE_RESTRICTED_4(h10b,h14b,h1b,p9b,h10b_1,h14b_1,h1b_1,p9b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h14b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p9b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_2_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_3_2_2_1',1,MA_ERR)
      IF ((h1b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p9b_1
     & - 1 + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h14b_1 - 1 + (noa
     &b+nvab) * (h10b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+h1b-1),int_mb(k_range+p9b-
     &1),4,3,2,1,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_3_2_2_1',
     &2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_3_2_2_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h14b-1),int_mb(k_range+h10b-
     &1),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h14b - 1 + noab * (h10b - 1)
     &))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_3_2_2_1',
     &4,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_3_2_
     &2_1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_3_2_2_1(l_a_offset,k_a_offset,siz
     &e)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h10 h14 h1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h10b
      INTEGER h14b
      INTEGER h1b
      INTEGER p9b
      length = 0
      DO h10b = 1,noab
      DO h14b = h10b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_3_2_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h10b = 1,noab
      DO h14b = h10b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p9b - noab - 1 + nvab * (h1b - 1 + noab 
     &* (h14b - 1 + noab * (h10b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h10b-1) * int_mb(k_range+h14b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+p9b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_3_2_2_2(d_a,k_a_offset,d_b,k_b_offset,d_
     &c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h10 h14 h1 p9 )_vt + = -1 * Sum ( p11 ) * t ( p11 h1 )_t * v ( h10 h14 p9 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h14b
      INTEGER h1b
      INTEGER p9b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p11b
      INTEGER p11b_1
      INTEGER h1b_1
      INTEGER h10b_2
      INTEGER h14b_2
      INTEGER p9b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h10b = 1,noab
      DO h14b = h10b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h14b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+p9b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_2_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p11b,h1b,p11b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h10b,h14b,p9b,p11b,h10b_2,h14b_2,p9b_2,p11b_
     &2)
      dim_common = int_mb(k_range+p11b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h14b-1) * int_
     &mb(k_range+p9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_2_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_3_2_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p11b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p11b-1
     &),int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_3_2_2_2',
     &3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_2_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_3_2_2_2',5,MA_ERR)
      IF ((p11b .lt. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h14b_2 - 1 + (no
     &ab+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+p11b-1),int_mb(k_range+p9b
     &-1),4,2,1,3,-1.0d0)
      END IF
      IF ((p9b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h14b_2 - 1 + (no
     &ab+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+p9b-1),int_mb(k_range+p11b
     &-1),3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_3_2_2_2',
     &6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_3_2_
     &2_2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_3_2_
     &2_2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_3_2_2_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+h10b-1),int_mb(k_range+h1b-
     &1),3,2,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h14b - 1 + noab * (h10b - 1)
     &))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_3_2_2_2',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_3_2_
     &2_2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_3_2_3(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h14 p5 h1 p9 )_vt + = -1 * Sum ( p11 ) * t ( p11 h1 )_t * v ( h14 p5 p9 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h14b
      INTEGER h1b
      INTEGER p9b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p11b
      INTEGER p11b_1
      INTEGER h1b_1
      INTEGER p5b_2
      INTEGER h14b_2
      INTEGER p9b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+p9b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_2_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p11b = noab+1,noab+nvab
      IF (int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p11b,h1b,p11b_1,h1b_1)
      CALL TCE_RESTRICTED_4(p5b,h14b,p9b,p11b,p5b_2,h14b_2,p9b_2,p11b_2)
      dim_common = int_mb(k_range+p11b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int_m
     &b(k_range+p9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_2_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_3_2_3',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p11b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p11b-1
     &),int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_3_2_3',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_2_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_3_2_3',5,MA_ERR)
      IF ((h14b .le. p5b) .and. (p11b .lt. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (p5b_2 - 1 + (noa
     &b+nvab) * (h14b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+p11b-1),int_mb(k_range+p9b-
     &1),4,1,2,3,-1.0d0)
      END IF
      IF ((h14b .le. p5b) .and. (p9b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (p5b_2 - 1 + (noa
     &b+nvab) * (h14b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+p9b-1),int_mb(k_range+p11b-
     &1),3,1,2,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_3_2_3',6,
     &MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_3_2_
     &3',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_3_2_
     &3',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_3_2_3',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+p5b-1),int_mb(k_range+h1b-1
     &),3,2,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h14b - 1 + noab * (p5b - noa
     &b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_3_2_3',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_3_2_
     &3',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_3_2_4(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h14 p5 h1 p9 )_vt + = 1 * Sum ( h12 p11 ) * t ( p5 p11 h1 h12 )_t * v ( h12 h14 p9 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h14b
      INTEGER h1b
      INTEGER p9b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p11b
      INTEGER h12b
      INTEGER p5b_1
      INTEGER p11b_1
      INTEGER h1b_1
      INTEGER h12b_1
      INTEGER h14b_2
      INTEGER h12b_2
      INTEGER p9b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. ieor(irrep_v,irrep_t)) T
     &HEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+p9b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_2_4',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p11b = noab+1,noab+nvab
      DO h12b = 1,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p11b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p11b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h12b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p5b,p11b,h1b,h12b,p5b_1,p11b_1,h1b_1,h12b_1)
      CALL TCE_RESTRICTED_4(h14b,h12b,p9b,p11b,h14b_2,h12b_2,p9b_2,p11b_
     &2)
      dim_common = int_mb(k_range+p11b-1) * int_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h14b-1) * int_mb(k_range+p9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_2_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_3_2_4',2,MA_ERR)
      IF ((p11b .lt. p5b) .and. (h12b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h12b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p11
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p11b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+h12b-1),int_mb(k_range+h1b-
     &1),4,2,3,1,1.0d0)
      END IF
      IF ((p11b .lt. p5b) .and. (h1b .le. h12b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p11
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p11b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+h1b-1),int_mb(k_range+h12b-
     &1),3,2,4,1,-1.0d0)
      END IF
      IF ((p5b .le. p11b) .and. (h12b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h12b_1 - 1 + noab * (p11b_1 - noab - 1 + nvab * (p5
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+h12b-1),int_mb(k_range+h1b-
     &1),4,1,3,2,-1.0d0)
      END IF
      IF ((p5b .le. p11b) .and. (h1b .le. h12b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h1b_1 - 1 + noab * (p11b_1 - noab - 1 + nvab * (p5
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+h1b-1),int_mb(k_range+h12b-
     &1),3,1,4,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_3_2_4',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_2_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_3_2_4',5,MA_ERR)
      IF ((h12b .le. h14b) .and. (p11b .lt. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h14b_2 - 1 + (no
     &ab+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+p11b-1),int_mb(k_range+p9b
     &-1),4,2,1,3,-1.0d0)
      END IF
      IF ((h12b .le. h14b) .and. (p9b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h14b_2 - 1 + (no
     &ab+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+p9b-1),int_mb(k_range+p11b
     &-1),3,2,1,4,1.0d0)
      END IF
      IF ((h14b .lt. h12b) .and. (p11b .lt. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (no
     &ab+nvab) * (h14b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+p11b-1),int_mb(k_range+p9b
     &-1),4,1,2,3,1.0d0)
      END IF
      IF ((h14b .lt. h12b) .and. (p9b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (no
     &ab+nvab) * (h14b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+p9b-1),int_mb(k_range+p11b
     &-1),3,1,2,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_3_2_4',6,
     &MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_3_2_
     &4',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_3_2_
     &4',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_3_2_4',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1
     &),4,2,3,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h14b - 1 + noab * (p5b - noa
     &b - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_3_2_4',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_3_2_
     &4',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_3_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h14 p5 p6 h1 h2 h3 )_vt + = 2/3 * P( 3 ) * Sum ( h10 p9 ) * t ( p5 p6 p9 h1 h2 h10 )_t * i2 ( h10 h14 h3 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER p6b
      INTEGER h14b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER h10b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h10b_1
      INTEGER h14b_2
      INTEGER h10b_2
      INTEGER h3b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+h14b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h14b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h14b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+h14b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_
     &mb(k_range+h3b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      DO h10b = 1,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p9b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h10b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p9b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h10b-1)))))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_6(p5b,p6b,p9b,h1b,h2b,h10b,p5b_1,p6b_1,p9b_1,h
     &1b_1,h2b_1,h10b_1)
      CALL TCE_RESTRICTED_4(h14b,h10b,h3b,p9b,h14b_2,h10b_2,h3b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+h10b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h14b-1) * int_mb(k_range+h3b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_3_3',2,MA_ERR)
      IF ((p9b .lt. p5b) .and. (h10b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h10b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p9b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),int_mb(k_range+h10b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),6,5,3,2,4,1,1.0d0)
      END IF
      IF ((p9b .lt. p5b) .and. (h1b .le. h10b) .and. (h10b .lt. h2b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h10b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p9b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),6,4,3,2,5,1,-1.0d0)
      END IF
      IF ((p9b .lt. p5b) .and. (h2b .le. h10b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p9b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h2b-1),int_mb(k_range+h10b-1),5,4,3,2,6,1,1.0d0)
      END IF
      IF ((p5b .le. p9b) .and. (p9b .lt. p6b) .and. (h10b .lt. h1b)) THE
     &N
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h10b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p9b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p6b-1),int_mb(k_range+h10b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),6,5,3,1,4,2,-1.0d0)
      END IF
      IF ((p5b .le. p9b) .and. (p9b .lt. p6b) .and. (h1b .le. h10b) .and
     &. (h10b .lt. h2b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h10b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p9b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),6,4,3,1,5,2,1.0d0)
      END IF
      IF ((p5b .le. p9b) .and. (p9b .lt. p6b) .and. (h2b .le. h10b)) THE
     &N
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p9b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h2b-1),int_mb(k_range+h10b-1),5,4,3,1,6,2,-1.0d0)
      END IF
      IF ((p6b .le. p9b) .and. (h10b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h10b_1 - 1 + noab * (p9b_1 - no
     &ab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p9b-1),int_mb(k_range+h10b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),6,5,2,1,4,3,1.0d0)
      END IF
      IF ((p6b .le. p9b) .and. (h1b .le. h10b) .and. (h10b .lt. h2b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h10b_1 - 1 + noab * (h1b_1 - 1 + noab * (p9b_1 - no
     &ab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p9b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),6,4,2,1,5,3,-1.0d0)
      END IF
      IF ((p6b .le. p9b) .and. (h2b .le. h10b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p9b_1 - no
     &ab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p9b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h2b-1),int_mb(k_range+h10b-1),5,4,2,1,6,3,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_3_3',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_3_3',5,MA_ERR)
      IF ((h10b .le. h14b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (h3b_2 - 1 + noab * (h14b_2 - 1 + noab * (h10
     &b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+h3b-1),int_mb(k_range+p9b-
     &1),3,2,1,4,1.0d0)
      END IF
      IF ((h14b .lt. h10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (h3b_2 - 1 + noab * (h10b_2 - 1 + noab * (h14
     &b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+h10b-1),int_mb(k_range+h3b-1),int_mb(k_range+p9b-
     &1),3,1,2,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_3_3',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_3_3'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_3_3'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_3_3',9,MA_ERR)
      IF ((h2b .le. h3b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h3b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1),6,5,2,4,3,1,2.0d0/3.
     &0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h3b -
     & 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab *
     & (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((h3b .le. h1b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h3b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1),6,5,2,1,4,3,2.0d0/3.
     &0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h1b - 1 + noab * (h3b - 1 + noab * (h14b - 1 + noab *
     & (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((h1b .le. h3b) .and. (h3b .le. h2b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h3b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1),6,5,2,4,1,3,-2.0d0/3
     &.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h2b -
     & 1 + noab * (h3b - 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab *
     & (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_3_3',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_3_3'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_3_3_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h14 h1 p9 )_v + = 1 * v ( h10 h14 h1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h14b
      INTEGER h1b
      INTEGER p9b
      INTEGER dimc
      INTEGER h10b_1
      INTEGER h14b_1
      INTEGER h1b_1
      INTEGER p9b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h10b = 1,noab
      DO h14b = h10b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h14b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+p9b-1)
      CALL TCE_RESTRICTED_4(h10b,h14b,h1b,p9b,h10b_1,h14b_1,h1b_1,p9b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h14b-1) * int_
     &mb(k_range+h1b-1) * int_mb(k_range+p9b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_3_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_3_3_1',1,MA_ERR)
      IF ((h1b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p9b_1
     & - 1 + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h14b_1 - 1 + (noa
     &b+nvab) * (h10b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+h1b-1),int_mb(k_range+p9b-
     &1),4,3,2,1,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_3_3_1',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_3_3_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h14b-1),int_mb(k_range+h10b-
     &1),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h14b - 1 + noab * (h10b - 1)
     &))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_3_3_1',4,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_3_3_
     &1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_3_3_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h14 h1 p9 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h10b
      INTEGER h14b
      INTEGER h1b
      INTEGER p9b
      length = 0
      DO h10b = 1,noab
      DO h14b = h10b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_3_3_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h10b = 1,noab
      DO h14b = h10b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p9b - noab - 1 + nvab * (h1b - 1 + noab 
     &* (h14b - 1 + noab * (h10b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h10b-1) * int_mb(k_range+h14b-1) * in
     &t_mb(k_range+h1b-1) * int_mb(k_range+p9b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_3_3_2(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 h14 h1 p9 )_vt + = -1 * Sum ( p12 ) * t ( p12 h1 )_t * v ( h10 h14 p9 p12 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h10b
      INTEGER h14b
      INTEGER h1b
      INTEGER p9b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p12b
      INTEGER p12b_1
      INTEGER h1b_1
      INTEGER h10b_2
      INTEGER h14b_2
      INTEGER p9b_2
      INTEGER p12b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h10b = 1,noab
      DO h14b = h10b,noab
      DO h1b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h1b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h1b-1),int_mb(k_sym+p9b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+h10b-1) * int_mb(k_range+h14b-1) * int_mb(k_
     &range+h1b-1) * int_mb(k_range+p9b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_3_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p12b = noab+1,noab+nvab
      IF (int_mb(k_spin+p12b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p12b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p12b,h1b,p12b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h10b,h14b,p9b,p12b,h10b_2,h14b_2,p9b_2,p12b_
     &2)
      dim_common = int_mb(k_range+p12b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+h14b-1) * int_
     &mb(k_range+p9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_3_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_3_3_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p12b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p12b-1
     &),int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_3_3_2',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_3_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_3_3_2',5,MA_ERR)
      IF ((p12b .lt. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p12b_2 - 1 + (noab+nvab) * (h14b_2 - 1 + (no
     &ab+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+p12b-1),int_mb(k_range+p9b
     &-1),4,2,1,3,-1.0d0)
      END IF
      IF ((p9b .le. p12b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p12b_
     &2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h14b_2 - 1 + (no
     &ab+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+p9b-1),int_mb(k_range+p12b
     &-1),3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_3_3_2',6,
     &MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_3_3_
     &2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_3_3_
     &2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_3_3_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+h10b-1),int_mb(k_range+h1b-
     &1),3,2,4,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h1b - 1 + noab * (h14b - 1 + noab * (h10b - 1)
     &))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_3_3_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_3_3_
     &2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_3_4(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h14 p5 p6 h1 h2 h3 )_vt + = 1/3 * P( 2 ) * Sum ( p9 p10 ) * t ( p5 p9 p10 h1 h2 h3 )_t * i2 ( h14 p6 p9 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER p6b
      INTEGER h14b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER p10b
      INTEGER p5b_1
      INTEGER p9b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h3b_1
      INTEGER p6b_2
      INTEGER h14b_2
      INTEGER p9b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL nxtask
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO p6b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+h14b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h14b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h14b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+h14b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_
     &mb(k_range+h3b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_4',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p9b-1),ieor(int_mb(
     &k_sym+p10b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_6(p5b,p9b,p10b,h1b,h2b,h3b,p5b_1,p9b_1,p10b_1,
     &h1b_1,h2b_1,h3b_1)
      CALL TCE_RESTRICTED_4(p6b,h14b,p9b,p10b,p6b_2,h14b_2,p9b_2,p10b_2)
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p6b-1) * int_mb(k_range+h14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_3_4',2,MA_ERR)
      IF ((p10b .lt. p5b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h3b_1
     & - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noa
     &b - 1 + nvab * (p10b_1 - noab - 1 + nvab * (p9b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+p5b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h3b-1),6,5,4,3,2,1,1.0d0)
      END IF
      IF ((p9b .lt. p5b) .and. (p5b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h3b_1
     & - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - no
     &ab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p9b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+p10b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h3b-1),6,5,4,2,3,1,-1.0d0)
      END IF
      IF ((p5b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h3b_1
     & - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - no
     &ab - 1 + nvab * (p9b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p10b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h3b-1),6,5,4,1,3,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_3_4',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_3_4',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (h14b_2 - 1 + noa
     &b * (p6b_2 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h14b-1),int_mb(k_range+p9b-1),int_mb(k_range+p10b-
     &1),2,1,4,3,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_3_4',6,MA
     &_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p9b .eq. p10b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_3_4'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_3_4'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_3_4',9,MA_ERR)
      IF ((p5b .le. p6b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h14b-1
     &),int_mb(k_range+p6b-1),int_mb(k_range+h3b-1),int_mb(k_range+h2b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1),6,2,1,5,4,3,1.0d0/3.
     &0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h3b -
     & 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab *
     & (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p6b .le. p5b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h14b-1
     &),int_mb(k_range+p6b-1),int_mb(k_range+h3b-1),int_mb(k_range+h2b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1),2,6,1,5,4,3,-1.0d0/3
     &.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h3b -
     & 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h14b - 1 + noab *
     & (p5b - noab - 1 + nvab * (p6b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_3_4',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_3_4'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_3_4_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h14 p5 p9 p10 )_v + = 1 * v ( h14 p5 p9 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h14b
      INTEGER p9b
      INTEGER p10b
      INTEGER dimc
      INTEGER p5b_1
      INTEGER h14b_1
      INTEGER p9b_1
      INTEGER p10b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-
     &1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+
     &p9b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_mb
     &(k_sym+p9b-1),int_mb(k_sym+p10b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int_mb(k_r
     &ange+p9b-1) * int_mb(k_range+p10b-1)
      CALL TCE_RESTRICTED_4(p5b,h14b,p9b,p10b,p5b_1,h14b_1,p9b_1,p10b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int_m
     &b(k_range+p9b-1) * int_mb(k_range+p10b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_4_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_3_4_1',1,MA_ERR)
      IF ((h14b .le. p5b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p10b_
     &1 - 1 + (noab+nvab) * (p9b_1 - 1 + (noab+nvab) * (p5b_1 - 1 + (noa
     &b+nvab) * (h14b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+p9b-1),int_mb(k_range+p10b-
     &1),4,3,1,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_3_4_1',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_3_4_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p10b-1
     &),int_mb(k_range+p9b-1),int_mb(k_range+h14b-1),int_mb(k_range+p5b-
     &1),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p10b 
     &- noab - 1 + nvab * (p9b - noab - 1 + nvab * (h14b - 1 + noab * (p
     &5b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_3_4_1',4,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_3_4_
     &1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_3_4_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h14 p5 p9 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p5b
      INTEGER h14b
      INTEGER p9b
      INTEGER p10b
      length = 0
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      IF (int_mb(k_spin+h14b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+
     &p9b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h14b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb
     &(k_sym+p9b-1),int_mb(k_sym+p10b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h14b-1)+int_mb(k_spin+p5b-
     &1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_3_4_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      IF (int_mb(k_spin+h14b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+
     &p9b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+h14b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb
     &(k_sym+p9b-1),int_mb(k_sym+p10b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h14b-1)+int_mb(k_spin+p5b-
     &1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p10b - noab - 1 + nvab * (p9b - noab - 1
     & + nvab * (h14b - 1 + noab * (p5b - noab - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int
     &_mb(k_range+p9b-1) * int_mb(k_range+p10b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_3_4_2(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h14 p5 p9 p10 )_vt + = 1 * Sum ( h12 ) * t ( p5 h12 )_t * v ( h12 h14 p9 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h14b
      INTEGER p9b
      INTEGER p10b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h12b
      INTEGER p5b_1
      INTEGER h12b_1
      INTEGER h14b_2
      INTEGER h12b_2
      INTEGER p9b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h14b = 1,noab
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-
     &1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin+
     &p9b-1)+int_mb(k_spin+p10b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_mb
     &(k_sym+p9b-1),int_mb(k_sym+p10b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h14b-1) * int_mb(k_r
     &ange+p9b-1) * int_mb(k_range+p10b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_4_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h12b = 1,noab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h12b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p5b,h12b,p5b_1,h12b_1)
      CALL TCE_RESTRICTED_4(h14b,h12b,p9b,p10b,h14b_2,h12b_2,p9b_2,p10b_
     &2)
      dim_common = int_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p5b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h14b-1) * int_mb(k_range+p9b-1) * int_m
     &b(k_range+p10b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_4_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_3_4_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h12b-1),1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_3_4_2',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_3_4_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_3_4_2',5,MA_ERR)
      IF ((h12b .le. h14b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h14b_2 - 1 + (no
     &ab+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h14b-1),int_mb(k_range+p9b-1),int_mb(k_range+p10b
     &-1),4,3,2,1,1.0d0)
      END IF
      IF ((h14b .lt. h12b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (no
     &ab+nvab) * (h14b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h14b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+p9b-1),int_mb(k_range+p10b
     &-1),4,3,1,2,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_3_4_2',6,
     &MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_3_4_
     &2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_3_4_
     &2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_3_4_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p10b-1
     &),int_mb(k_range+p9b-1),int_mb(k_range+h14b-1),int_mb(k_range+p5b-
     &1),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p10b 
     &- noab - 1 + nvab * (p9b - noab - 1 + nvab * (h14b - 1 + noab * (p
     &5b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_3_4_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_3_4_
     &2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_4(d_a,k_a_offset,d_b,k_b_offset,a_c,t_p5
     &b,t_p6b,t_p7b,t_p8b,t_h1b,t_h2b,t_h3b,t_h4b)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p5 p6 p7 p8 h1 h2 h3 h4 )_vtt + = 3/2 * P( 24 ) * Sum ( p14 ) * t ( p5 p14 h1 h2 )_t * i1 ( p6 p7 p8 h3 h4 p14 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER t_p5b
      INTEGER t_p6b
      INTEGER t_p7b
      INTEGER t_p8b
      INTEGER t_h1b
      INTEGER t_h2b
      INTEGER t_h3b
      INTEGER t_h4b
      INTEGER p5b
      INTEGER p6b
      INTEGER p7b
      INTEGER p8b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER h4b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p14b
      INTEGER p5b_1
      INTEGER p14b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER p6b_2
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER p14b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      DOUBLE PRECISION a_c(*)
      LOGICAL skipped
      DO p5b = noab+1,noab+nvab
      DO p6b = noab+1,noab+nvab
      DO p7b = p6b,noab+nvab
      DO p8b = p7b,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = 1,noab
      DO h4b = h3b,noab
      skipped = .true.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p5b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p5b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p5b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p5b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p5b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p5b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF (.not.skipped) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1)+i
     &nt_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-1)
     &+int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-
     &1)+int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+p8b-1),ieor(int_mb(k_sym+h1b-1),ieo
     &r(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h4b-1)
     &))))))) .eq. ieor(irrep_v,ieor(irrep_t,irrep_t))) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+p7b-1) * int_mb(k_range+p8b-1) * int_mb(k_range+h1b-1) * int_m
     &b(k_range+h2b-1) * int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p14b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p14b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p14b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p5b,p14b,h1b,h2b,p5b_1,p14b_1,h1b_1,h2b_1)
      CALL TCE_RESTRICTED_6(p6b,p7b,p8b,h3b,h4b,p14b,p6b_2,p7b_2,p8b_2,h
     &3b_2,h4b_2,p14b_2)
      dim_common = int_mb(k_range+p14b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p6b-1) * int_mb(k_range+p7b-1) * int_mb
     &(k_range+p8b-1) * int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_4',2,MA_ERR)
      IF ((p14b .lt. p5b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p14b
     &_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p14b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1
     &),4,3,2,1,-1.0d0)
      END IF
      IF ((p5b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p14b_1 - noab - 1 + nvab * (p5b
     &_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p14b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1
     &),4,3,1,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_4',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_4',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - noab - 1 + nvab * (h4b_2 - 1 + noab * (h3b_2 - 1 + noab * (p8b
     &_2 - noab - 1 + nvab * (p7b_2 - noab - 1 + nvab * (p6b_2 - noab - 
     &1)))))))
      CALL TCE_SORT_6(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p6b-1)
     &,int_mb(k_range+p7b-1),int_mb(k_range+p8b-1),int_mb(k_range+h3b-1)
     &,int_mb(k_range+h4b-1),int_mb(k_range+p14b-1),5,4,3,2,1,6,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_4',6,MA_E
     &RR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_4',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_4',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),8,5,4,3,7,6,2,1,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),8,5,4,3,2,7,6,1,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),8,5,4,3,7,2,6,1,-3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),8,5,4,3,2,7,1,6,-3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),8,5,4,3,7,2,1,6,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),8,5,4,3,2,1,7,6,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),5,8,4,3,7,6,2,1,-3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),5,8,4,3,2,7,6,1,-3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),5,8,4,3,7,2,6,1,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),5,8,4,3,2,7,1,6,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),5,8,4,3,7,2,1,6,-3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),5,8,4,3,2,1,7,6,-3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),5,4,8,3,7,6,2,1,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),5,4,8,3,2,7,6,1,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),5,4,8,3,7,2,6,1,-3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),5,4,8,3,2,7,1,6,-3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),5,4,8,3,7,2,1,6,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),5,4,8,3,2,1,7,6,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p5b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),5,4,3,8,7,6,2,1,-3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p5b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),5,4,3,8,2,7,6,1,-3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p5b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),5,4,3,8,7,2,6,1,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p5b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),5,4,3,8,2,7,1,6,3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p5b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),5,4,3,8,7,2,1,6,-3.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p6b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p5b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+p6b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_
     &mb(k_range+p5b-1),5,4,3,8,2,1,7,6,-3.0d0/2.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_4',9
     &,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_4_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p5 p6 p7 h1 h2 p14 )_vt + = 1/3 * P( 3 ) * Sum ( p10 ) * t ( p5 p10 h1 h2 )_t * i2 ( p6 p7 p10 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER p6b
      INTEGER p7b
      INTEGER h1b
      INTEGER h2b
      INTEGER p14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p10b
      INTEGER p5b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER p6b_2
      INTEGER p7b_2
      INTEGER p14b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO p6b = noab+1,noab+nvab
      DO p7b = p6b,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+p7b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+p14b-1).ne.12)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+p14b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+p14b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+p7b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_m
     &b(k_range+p14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p10b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+h2b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+h2b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p5b,p10b,h1b,h2b,p5b_1,p10b_1,h1b_1,h2b_1)
      CALL TCE_RESTRICTED_4(p6b,p7b,p14b,p10b,p6b_2,p7b_2,p14b_2,p10b_2)
      dim_common = int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p6b-1) * int_mb(k_range+p7b-1) * int_mb
     &(k_range+p14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_4_1',2,MA_ERR)
      IF ((p10b .lt. p5b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noab - 1 + nvab * (p10b
     &_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1
     &),4,3,2,1,-1.0d0)
      END IF
      IF ((p5b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p5b
     &_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1
     &),4,3,1,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_4_1',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_4_1',5,MA_ERR)
      IF ((p10b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - noab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (p7b_2 - noab - 
     &1 + nvab * (p6b_2 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p6b-1)
     &,int_mb(k_range+p7b-1),int_mb(k_range+p10b-1),int_mb(k_range+p14b-
     &1),4,2,1,3,1.0d0)
      END IF
      IF ((p14b .lt. p10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - noab - 1 + nvab * (p14b_2 - noab - 1 + nvab * (p7b_2 - noab - 
     &1 + nvab * (p6b_2 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p6b-1)
     &,int_mb(k_range+p7b-1),int_mb(k_range+p14b-1),int_mb(k_range+p10b-
     &1),3,2,1,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_4_1',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_4_1'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_4_1'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_4_1',9,MA_ERR)
      IF ((p5b .le. p6b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_mb(k_range+h2b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1),6,3,2,5,4,1,1.0d0/3.
     &0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h2b - 1 + noab * (h1b - 1 + noab * (p7b - noa
     &b - 1 + nvab * (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p6b .le. p5b) .and. (p5b .le. p7b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_mb(k_range+h2b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1),3,6,2,5,4,1,-1.0d0/3
     &.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h2b - 1 + noab * (h1b - 1 + noab * (p7b - noa
     &b - 1 + nvab * (p5b - noab - 1 + nvab * (p6b - noab - 1)))))))
      END IF
      IF ((p7b .le. p5b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_mb(k_range+h2b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1),3,2,6,5,4,1,1.0d0/3.
     &0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h2b - 1 + noab * (h1b - 1 + noab * (p5b - noa
     &b - 1 + nvab * (p7b - noab - 1 + nvab * (p6b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_4_1',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_4_1'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_4_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p5 p6 p7 h1 h2 p14 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p5b
      INTEGER p6b
      INTEGER p7b
      INTEGER h1b
      INTEGER h2b
      INTEGER p14b
      length = 0
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO p7b = p6b,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO p14b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+p14b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+p14b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+p7b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+p14b-1).ne.12)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_4_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO p7b = p6b,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO p14b = noab+1,noab+nvab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+p14b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+p14b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+p7b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+p14b-1).ne.12)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p14b - noab - 1 + nvab * (h2b - 1 + noab
     & * (h1b - 1 + noab * (p7b - noab - 1 + nvab * (p6b - noab - 1 + nv
     &ab * (p5b - noab - 1)))))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_
     &mb(k_range+p7b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1) 
     &* int_mb(k_range+p14b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_4_1_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( p5 p6 p10 p14 )_v + = 1 * v ( p5 p6 p10 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER p6b
      INTEGER p10b
      INTEGER p14b
      INTEGER dimc
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER p10b_1
      INTEGER p14b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO p10b = noab+1,noab+nvab
      DO p14b = p10b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+p10b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+p
     &10b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p10b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+p10b-1) * int_mb(k_range+p14b-1)
      CALL TCE_RESTRICTED_4(p5b,p6b,p10b,p14b,p5b_1,p6b_1,p10b_1,p14b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb
     &(k_range+p10b-1) * int_mb(k_range+p14b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_1_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_4_1_1',1,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p14b_
     &1 - 1 + (noab+nvab) * (p10b_1 - 1 + (noab+nvab) * (p6b_1 - 1 + (no
     &ab+nvab) * (p5b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p10b-1),int_mb(k_range+p14b-
     &1),4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_4_1_1',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_4_1_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+p10b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-
     &1),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (p10b - noab - 1 + nvab * (p6b - noab - 1 + nv
     &ab * (p5b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_4_1_1',4,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_4_1_
     &1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_4_1_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( p5 p6 p10 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p5b
      INTEGER p6b
      INTEGER p10b
      INTEGER p14b
      length = 0
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO p10b = noab+1,noab+nvab
      DO p14b = p10b,noab+nvab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+p
     &10b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p10b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+p10b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_4_1_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO p10b = noab+1,noab+nvab
      DO p14b = p10b,noab+nvab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+p
     &10b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p10b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+p10b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p14b - noab - 1 + nvab * (p10b - noab - 
     &1 + nvab * (p6b - noab - 1 + nvab * (p5b - noab - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_
     &mb(k_range+p10b-1) * int_mb(k_range+p14b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_4_1_2(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( p5 p6 p10 p14 )_vt + = -1 * P( 2 ) * Sum ( h11 ) * t ( p5 h11 )_t * i3 ( h11 p6 p10 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER p6b
      INTEGER p10b
      INTEGER p14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h11b
      INTEGER p5b_1
      INTEGER h11b_1
      INTEGER p6b_2
      INTEGER h11b_2
      INTEGER p10b_2
      INTEGER p14b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO p6b = noab+1,noab+nvab
      DO p10b = noab+1,noab+nvab
      DO p14b = p10b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+p10b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+p
     &10b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p10b-1),int_mb(k_sym+p14b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+p10b-1) * int_mb(k_range+p14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_1_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h11b = 1,noab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h11b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h11b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p5b,h11b,p5b_1,h11b_1)
      CALL TCE_RESTRICTED_4(p6b,h11b,p10b,p14b,p6b_2,h11b_2,p10b_2,p14b_
     &2)
      dim_common = int_mb(k_range+h11b-1)
      dima_sort = int_mb(k_range+p5b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p6b-1) * int_mb(k_range+p10b-1) * int_m
     &b(k_range+p14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_1_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_4_1_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h11b_
     &1 - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h11b-1),1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_4_1_2',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_1_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_4_1_2',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - noab - 1 + nvab * (p10b_2 - noab - 1 + nvab * (h11b_2 - 1 + no
     &ab * (p6b_2 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p6b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+p10b-1),int_mb(k_range+p14b
     &-1),4,3,1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_4_1_2',6,
     &MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_4_1_
     &2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_4_1_
     &2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_4_1_2',9,MA_ERR)
      IF ((p5b .le. p6b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+p10b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-
     &1),4,3,2,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (p10b - noab - 1 + nvab * (p6b - noab - 1 + nv
     &ab * (p5b - noab - 1)))))
      END IF
      IF ((p6b .le. p5b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+p10b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-
     &1),3,4,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (p10b - noab - 1 + nvab * (p5b - noab - 1 + nv
     &ab * (p6b - noab - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_4_1_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_4_1_
     &2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_4_1_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h11 p5 p10 p14 )_v + = 1 * v ( h11 p5 p10 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h11b
      INTEGER p10b
      INTEGER p14b
      INTEGER dimc
      INTEGER p5b_1
      INTEGER h11b_1
      INTEGER p10b_1
      INTEGER p14b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO p10b = noab+1,noab+nvab
      DO p14b = p10b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+p10b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &p10b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+p10b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h11b-1) * int_mb(k_r
     &ange+p10b-1) * int_mb(k_range+p14b-1)
      CALL TCE_RESTRICTED_4(p5b,h11b,p10b,p14b,p5b_1,h11b_1,p10b_1,p14b_
     &1)
      dim_common = 1
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+p10b-1) * int_mb(k_range+p14b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_1_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_4_1_2_1',1,MA_ERR)
      IF ((h11b .le. p5b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p14b_
     &1 - 1 + (noab+nvab) * (p10b_1 - 1 + (noab+nvab) * (p5b_1 - 1 + (no
     &ab+nvab) * (h11b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+p10b-1),int_mb(k_range+p14b
     &-1),4,3,1,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_4_1_2_1',
     &2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_4_1_2_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+p10b-1),int_mb(k_range+h11b-1),int_mb(k_range+p5b
     &-1),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (p10b - noab - 1 + nvab * (h11b - 1 + noab * (
     &p5b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_4_1_2_1',
     &4,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_4_1_
     &2_1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_4_1_2_1(l_a_offset,k_a_offset,siz
     &e)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h11 p5 p10 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p5b
      INTEGER h11b
      INTEGER p10b
      INTEGER p14b
      length = 0
      DO p5b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO p10b = noab+1,noab+nvab
      DO p14b = p10b,noab+nvab
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+
     &p10b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb
     &(k_sym+p10b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p5b-
     &1)+int_mb(k_spin+p10b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_4_1_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p5b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO p10b = noab+1,noab+nvab
      DO p14b = p10b,noab+nvab
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+
     &p10b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb
     &(k_sym+p10b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+p5b-
     &1)+int_mb(k_spin+p10b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p14b - noab - 1 + nvab * (p10b - noab - 
     &1 + nvab * (h11b - 1 + noab * (p5b - noab - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p5b-1) * int_mb(k_range+h11b-1) * int
     &_mb(k_range+p10b-1) * int_mb(k_range+p14b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_4_1_2_2(d_a,k_a_offset,d_b,k_b_offset,d_
     &c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h11 p5 p10 p14 )_vt + = -1/2 * Sum ( h12 ) * t ( p5 h12 )_t * v ( h11 h12 p10 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h11b
      INTEGER p10b
      INTEGER p14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h12b
      INTEGER p5b_1
      INTEGER h12b_1
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER p10b_2
      INTEGER p14b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO p10b = noab+1,noab+nvab
      DO p14b = p10b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+p10b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1) .eq. int_mb(k_spin+
     &p10b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+p10b-1),int_mb(k_sym+p14b-1)))) .eq. ieor(irrep_v,irrep_t))
     & THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h11b-1) * int_mb(k_r
     &ange+p10b-1) * int_mb(k_range+p14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_1_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h12b = 1,noab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h12b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p5b,h12b,p5b_1,h12b_1)
      CALL TCE_RESTRICTED_4(h11b,h12b,p10b,p14b,h11b_2,h12b_2,p10b_2,p14
     &b_2)
      dim_common = int_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p5b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+p10b-1) * int_
     &mb(k_range+p14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_1_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_4_1_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h12b-1),1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_4_1_2_2',
     &3,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_1_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_4_1_2_2',5,MA_ERR)
      IF ((h12b .lt. h11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h11b_2 - 1 + (n
     &oab+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+p10b-1),int_mb(k_range+p14
     &b-1),4,3,2,1,-1.0d0)
      END IF
      IF ((h11b .le. h12b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (n
     &oab+nvab) * (h11b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+p10b-1),int_mb(k_range+p14
     &b-1),4,3,1,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_4_1_2_2',
     &6,MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_4_1_
     &2_2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_4_1_
     &2_2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_4_1_2_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+p10b-1),int_mb(k_range+h11b-1),int_mb(k_range+p5b
     &-1),4,3,2,1,-1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (p10b - noab - 1 + nvab * (h11b - 1 + noab * (
     &p5b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_4_1_2_2',
     &10,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_4_1_
     &2_2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_4_1_3(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( p5 p6 p10 p14 )_vt + = 1/2 * Sum ( h11 h12 ) * t ( p5 p6 h11 h12 )_t * v ( h11 h12 p10 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER p6b
      INTEGER p10b
      INTEGER p14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h11b
      INTEGER h12b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER h11b_1
      INTEGER h12b_1
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER p10b_2
      INTEGER p14b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL nxtask
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO p10b = noab+1,noab+nvab
      DO p14b = p10b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+p10b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+p
     &10b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p10b-1),int_mb(k_sym+p14b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+p10b-1) * int_mb(k_range+p14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_1_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h11b = 1,noab
      DO h12b = h11b,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1) .eq. int_mb(k_spin+h
     &11b-1)+int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h11b-1),int_mb(k_sym+h12b-1)))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_4(p5b,p6b,h11b,h12b,p5b_1,p6b_1,h11b_1,h12b_1)
      CALL TCE_RESTRICTED_4(h11b,h12b,p10b,p14b,h11b_2,h12b_2,p10b_2,p14
     &b_2)
      dim_common = int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p10b-1) * int_mb(k_range+p14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_1_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_4_1_3',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h11b_1 - 1 + noab * (p6b_1 - noab - 1 + nvab * (p5
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+h11b-1),int_mb(k_range+h12b-
     &1),2,1,4,3,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_4_1_3',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_1_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_4_1_3',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - 1 + (noab+nvab) * (p10b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (n
     &oab+nvab) * (h11b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+p10b-1),int_mb(k_range+p14
     &b-1),4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_4_1_3',6,
     &MA_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h11b .eq. h12b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_4_1_
     &3',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_4_1_
     &3',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_4_1_3',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+p10b-1),int_mb(k_range+p6b-1),int_mb(k_range+p5b-
     &1),4,3,2,1,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (p10b - noab - 1 + nvab * (p6b - noab - 1 + nv
     &ab * (p5b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_4_1_3',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_4_1_
     &3',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_4_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p5 p6 p7 h1 h2 p14 )_vt + = 1/3 * P( 2 ) * Sum ( h9 h10 ) * t ( p5 p6 p7 h1 h9 h10 )_t * i2 ( h9 h10 h2 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER p6b
      INTEGER p7b
      INTEGER h1b
      INTEGER h2b
      INTEGER p14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h9b
      INTEGER h10b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h9b_1
      INTEGER h10b_1
      INTEGER h9b_2
      INTEGER h10b_2
      INTEGER h2b_2
      INTEGER p14b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubh(2)
      INTEGER isubh
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL nxtask
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO p7b = p6b,noab+nvab
      DO h1b = 1,noab
      DO h2b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+p7b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+p14b-1).ne.12)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+p14b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+p14b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+p7b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_m
     &b(k_range+p14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h9b = 1,noab
      DO h10b = h9b,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h9b-1),int
     &_mb(k_sym+h10b-1)))))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_6(p5b,p6b,p7b,h1b,h9b,h10b,p5b_1,p6b_1,p7b_1,h
     &1b_1,h9b_1,h10b_1)
      CALL TCE_RESTRICTED_4(h9b,h10b,h2b,p14b,h9b_2,h10b_2,h2b_2,p14b_2)
      dim_common = int_mb(k_range+h9b-1) * int_mb(k_range+h10b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb
     &(k_range+p7b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h2b-1) * int_mb(k_range+p14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_4_2',2,MA_ERR)
      IF ((h10b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h10b_1 - 1 + noab * (h9b_1 - 1 + noab * (p7b_1 - no
     &ab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p7b-1),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h1b-1),6,3,2,1,5,4,1.0d0)
      END IF
      IF ((h9b .lt. h1b) .and. (h1b .le. h10b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (h1b_1 - 1 + noab * (h9b_1 - 1 + noab * (p7b_1 - no
     &ab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p7b-1),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h10b-1),5,3,2,1,6,4,-1.0d0)
      END IF
      IF ((h1b .le. h9b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (h9b_1 - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - no
     &ab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p7b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h9b-1),int_mb(k_range+h10b-1),4,3,2,1,6,5,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_4_2',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_4_2',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - noab - 1 + nvab * (h2b_2 - 1 + noab * (h10b_2 - 1 + noab * (h9
     &b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),int_mb(k_range+p14b-
     &1),4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_4_2',6,MA
     &_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h9b .eq. h10b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_4_2'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_4_2'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_4_2',9,MA_ERR)
      IF ((h1b .le. h2b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p7b-1
     &),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1),6,5,4,3,2,1,1.0d0/3.
     &0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h2b - 1 + noab * (h1b - 1 + noab * (p7b - noa
     &b - 1 + nvab * (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((h2b .le. h1b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p7b-1
     &),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1),6,5,4,2,3,1,-1.0d0/3
     &.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (h2b - 1 + noab * (p7b - noa
     &b - 1 + nvab * (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_4_2',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_4_2'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_4_2_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h9 h10 h1 p14 )_v + = 1 * v ( h9 h10 h1 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h9b
      INTEGER h10b
      INTEGER h1b
      INTEGER p14b
      INTEGER dimc
      INTEGER h9b_1
      INTEGER h10b_1
      INTEGER h1b_1
      INTEGER p14b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h9b = 1,noab
      DO h10b = h9b,noab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+h9b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+p14b-1)
      CALL TCE_RESTRICTED_4(h9b,h10b,h1b,p14b,h9b_1,h10b_1,h1b_1,p14b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h9b-1) * int_mb(k_range+h10b-1) * int_m
     &b(k_range+h1b-1) * int_mb(k_range+p14b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_4_2_1',1,MA_ERR)
      IF ((h1b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p14b_
     &1 - 1 + (noab+nvab) * (h1b_1 - 1 + (noab+nvab) * (h10b_1 - 1 + (no
     &ab+nvab) * (h9b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h1b-1),int_mb(k_range+p14b-
     &1),4,3,2,1,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_4_2_1',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_4_2_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+h10b-1),int_mb(k_range+h9b-
     &1),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (h10b - 1 + noab * (h9b - 1)
     &))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_4_2_1',4,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_4_2_
     &1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_4_2_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h9 h10 h1 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h9b
      INTEGER h10b
      INTEGER h1b
      INTEGER p14b
      length = 0
      DO h9b = 1,noab
      DO h10b = h9b,noab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_4_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h9b = 1,noab
      DO h10b = h9b,noab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p14b - noab - 1 + nvab * (h1b - 1 + noab
     & * (h10b - 1 + noab * (h9b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h9b-1) * int_mb(k_range+h10b-1) * int
     &_mb(k_range+h1b-1) * int_mb(k_range+p14b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_4_2_2(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h9 h10 h1 p14 )_vt + = 1 * Sum ( p12 ) * t ( p12 h1 )_t * v ( h9 h10 p12 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h9b
      INTEGER h10b
      INTEGER h1b
      INTEGER p14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p12b
      INTEGER p12b_1
      INTEGER h1b_1
      INTEGER h9b_2
      INTEGER h10b_2
      INTEGER p14b_2
      INTEGER p12b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO h9b = 1,noab
      DO h10b = h9b,noab
      DO h1b = 1,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &h1b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+h1b-1),int_mb(k_sym+p14b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+h9b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+h1b-1) * int_mb(k_range+p14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_2_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p12b = noab+1,noab+nvab
      IF (int_mb(k_spin+p12b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p12b-1),int_mb(k_sym+h1b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p12b,h1b,p12b_1,h1b_1)
      CALL TCE_RESTRICTED_4(h9b,h10b,p14b,p12b,h9b_2,h10b_2,p14b_2,p12b_
     &2)
      dim_common = int_mb(k_range+p12b-1)
      dima_sort = int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h9b-1) * int_mb(k_range+h10b-1) * int_m
     &b(k_range+p14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_2_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_4_2_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (p12b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p12b-1
     &),int_mb(k_range+h1b-1),2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_4_2_2',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_2_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_4_2_2',5,MA_ERR)
      IF ((p12b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - 1 + (noab+nvab) * (p12b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (n
     &oab+nvab) * (h9b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p12b-1),int_mb(k_range+p14b
     &-1),4,2,1,3,1.0d0)
      END IF
      IF ((p14b .lt. p12b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p12b_
     &2 - 1 + (noab+nvab) * (p14b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (n
     &oab+nvab) * (h9b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p14b-1),int_mb(k_range+p12b
     &-1),3,2,1,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_4_2_2',6,
     &MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_4_2_
     &2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_4_2_
     &2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_4_2_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+h10b-1),int_mb(k_range+h9b-1),int_mb(k_range+h1b-
     &1),3,2,4,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h1b - 1 + noab * (h10b - 1 + noab * (h9b - 1)
     &))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_4_2_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_4_2_
     &2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_4_3(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p5 p6 p7 h1 h2 p14 )_vt + = 2/3 * P( 3 ) * Sum ( h10 p9 ) * t ( p5 p6 p9 h1 h2 h10 )_t * i2 ( h10 p7 p9 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER p6b
      INTEGER p7b
      INTEGER h1b
      INTEGER h2b
      INTEGER p14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER h10b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h10b_1
      INTEGER p7b_2
      INTEGER h10b_2
      INTEGER p14b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO p7b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO p14b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+p7b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+i
     &nt_mb(k_spin+p14b-1).ne.12)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+p14b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+p14b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+p7b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_m
     &b(k_range+p14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_3',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      DO h10b = 1,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p9b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h10b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p9b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h10b-1)))))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_6(p5b,p6b,p9b,h1b,h2b,h10b,p5b_1,p6b_1,p9b_1,h
     &1b_1,h2b_1,h10b_1)
      CALL TCE_RESTRICTED_4(p7b,h10b,p14b,p9b,p7b_2,h10b_2,p14b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+h10b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p7b-1) * int_mb(k_range+p14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_3',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_4_3',2,MA_ERR)
      IF ((p9b .lt. p5b) .and. (h10b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h10b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p9b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),int_mb(k_range+h10b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),6,5,3,2,4,1,1.0d0)
      END IF
      IF ((p9b .lt. p5b) .and. (h1b .le. h10b) .and. (h10b .lt. h2b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h10b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p9b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),6,4,3,2,5,1,-1.0d0)
      END IF
      IF ((p9b .lt. p5b) .and. (h2b .le. h10b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p9b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h2b-1),int_mb(k_range+h10b-1),5,4,3,2,6,1,1.0d0)
      END IF
      IF ((p5b .le. p9b) .and. (p9b .lt. p6b) .and. (h10b .lt. h1b)) THE
     &N
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h10b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p9b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p6b-1),int_mb(k_range+h10b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),6,5,3,1,4,2,-1.0d0)
      END IF
      IF ((p5b .le. p9b) .and. (p9b .lt. p6b) .and. (h1b .le. h10b) .and
     &. (h10b .lt. h2b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h10b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p9b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),6,4,3,1,5,2,1.0d0)
      END IF
      IF ((p5b .le. p9b) .and. (p9b .lt. p6b) .and. (h2b .le. h10b)) THE
     &N
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p9b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h2b-1),int_mb(k_range+h10b-1),5,4,3,1,6,2,-1.0d0)
      END IF
      IF ((p6b .le. p9b) .and. (h10b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h10b_1 - 1 + noab * (p9b_1 - no
     &ab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p9b-1),int_mb(k_range+h10b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),6,5,2,1,4,3,1.0d0)
      END IF
      IF ((p6b .le. p9b) .and. (h1b .le. h10b) .and. (h10b .lt. h2b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h10b_1 - 1 + noab * (h1b_1 - 1 + noab * (p9b_1 - no
     &ab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p9b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),6,4,2,1,5,3,-1.0d0)
      END IF
      IF ((p6b .le. p9b) .and. (h2b .le. h10b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p9b_1 - no
     &ab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p9b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h2b-1),int_mb(k_range+h10b-1),5,4,2,1,6,3,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_4_3',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_3',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_4_3',5,MA_ERR)
      IF ((p9b .le. p14b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (h10b_2 - 1 + noa
     &b * (p7b_2 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p7b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p9b-1),int_mb(k_range+p14b-
     &1),4,1,2,3,1.0d0)
      END IF
      IF ((p14b .lt. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (p14b_2 - noab - 1 + nvab * (h10b_2 - 1 + noa
     &b * (p7b_2 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p7b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p14b-1),int_mb(k_range+p9b-
     &1),3,1,2,4,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_4_3',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_4_3'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_4_3'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_4_3',9,MA_ERR)
      IF ((p6b .le. p7b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+p7b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1),6,5,2,4,3,1,2.0d0/3.
     &0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h2b - 1 + noab * (h1b - 1 + noab * (p7b - noa
     &b - 1 + nvab * (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF ((p7b .le. p5b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+p7b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1),2,6,5,4,3,1,2.0d0/3.
     &0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - noa
     &b - 1 + nvab * (p5b - noab - 1 + nvab * (p7b - noab - 1)))))))
      END IF
      IF ((p5b .le. p7b) .and. (p7b .le. p6b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+p7b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1),6,2,5,4,3,1,-2.0d0/3
     &.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (h2b - 1 + noab * (h1b - 1 + noab * (p6b - noa
     &b - 1 + nvab * (p7b - noab - 1 + nvab * (p5b - noab - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_4_3',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_4_3'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_4_3_1(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p5 p9 p14 )_v + = 1 * v ( h10 p5 p9 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h10b
      INTEGER p9b
      INTEGER p14b
      INTEGER dimc
      INTEGER p5b_1
      INTEGER h10b_1
      INTEGER p9b_1
      INTEGER p14b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO p9b = noab+1,noab+nvab
      DO p14b = p9b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &p9b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+p9b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+p9b-1) * int_mb(k_range+p14b-1)
      CALL TCE_RESTRICTED_4(p5b,h10b,p9b,p14b,p5b_1,h10b_1,p9b_1,p14b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h10b-1) * int_m
     &b(k_range+p9b-1) * int_mb(k_range+p14b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_3_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_4_3_1',1,MA_ERR)
      IF ((h10b .le. p5b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p14b_
     &1 - 1 + (noab+nvab) * (p9b_1 - 1 + (noab+nvab) * (p5b_1 - 1 + (noa
     &b+nvab) * (h10b_1 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+p9b-1),int_mb(k_range+p14b-
     &1),4,3,1,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_4_3_1',2,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_4_3_1',3,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+p9b-1),int_mb(k_range+h10b-1),int_mb(k_range+p5b-
     &1),4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (p9b - noab - 1 + nvab * (h10b - 1 + noab * (p
     &5b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_4_3_1',4,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_4_3_
     &1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_4_3_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p5 p9 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p5b
      INTEGER h10b
      INTEGER p9b
      INTEGER p14b
      length = 0
      DO p5b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO p9b = noab+1,noab+nvab
      DO p14b = p9b,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+
     &p9b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb
     &(k_sym+p9b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p5b-
     &1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_4_3_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p5b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO p9b = noab+1,noab+nvab
      DO p14b = p9b,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+
     &p9b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb
     &(k_sym+p9b-1),int_mb(k_sym+p14b-1)))) .eq. irrep_v) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p5b-
     &1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p14b - noab - 1 + nvab * (p9b - noab - 1
     & + nvab * (h10b - 1 + noab * (p5b - noab - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p5b-1) * int_mb(k_range+h10b-1) * int
     &_mb(k_range+p9b-1) * int_mb(k_range+p14b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_4_3_2(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h10 p5 p9 p14 )_vt + = -1 * Sum ( h12 ) * t ( p5 h12 )_t * v ( h10 h12 p9 p14 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h10b
      INTEGER p9b
      INTEGER p14b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h12b
      INTEGER p5b_1
      INTEGER h12b_1
      INTEGER h10b_2
      INTEGER h12b_2
      INTEGER p9b_2
      INTEGER p14b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h10b = 1,noab
      DO p9b = noab+1,noab+nvab
      DO p14b = p9b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h10b-
     &1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p14b-1).ne.8)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h10b-1) .eq. int_mb(k_spin+
     &p9b-1)+int_mb(k_spin+p14b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h10b-1),ieor(int_mb
     &(k_sym+p9b-1),int_mb(k_sym+p14b-1)))) .eq. ieor(irrep_v,irrep_t)) 
     &THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h10b-1) * int_mb(k_r
     &ange+p9b-1) * int_mb(k_range+p14b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_3_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h12b = 1,noab
      IF (int_mb(k_spin+p5b-1) .eq. int_mb(k_spin+h12b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),int_mb(k_sym+h12b-1)) .eq. irrep_t) T
     &HEN
      CALL TCE_RESTRICTED_2(p5b,h12b,p5b_1,h12b_1)
      CALL TCE_RESTRICTED_4(h10b,h12b,p9b,p14b,h10b_2,h12b_2,p9b_2,p14b_
     &2)
      dim_common = int_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p5b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+p9b-1) * int_m
     &b(k_range+p14b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_3_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_4_3_2',2,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (p5b_1 - noab - 1)))
      CALL TCE_SORT_2(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+h12b-1),1,2,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_4_3_2',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_4_3_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_4_3_2',5,MA_ERR)
      IF ((h12b .lt. h10b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (no
     &ab+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h10b-1),int_mb(k_range+p9b-1),int_mb(k_range+p14b
     &-1),4,3,2,1,-1.0d0)
      END IF
      IF ((h10b .le. h12b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p14b_
     &2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (no
     &ab+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+p9b-1),int_mb(k_range+p14b
     &-1),4,3,1,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_4_3_2',6,
     &MA_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_4_3_
     &2',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_4_3_
     &2',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_4_3_2',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p14b-1
     &),int_mb(k_range+p9b-1),int_mb(k_range+h10b-1),int_mb(k_range+p5b-
     &1),4,3,2,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p14b 
     &- noab - 1 + nvab * (p9b - noab - 1 + nvab * (h10b - 1 + noab * (p
     &5b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_4_3_2',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_4_3_
     &2',11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_5(d_a,k_a_offset,d_b,k_b_offset,a_c,t_p5
     &b,t_p6b,t_p7b,t_p8b,t_h1b,t_h2b,t_h3b,t_h4b)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p5 p6 p7 p8 h1 h2 h3 h4 )_vtt + = 1/4 * P( 16 ) * Sum ( h11 h12 ) * t ( p5 p6 p7 h1 h11 h12 )_t * i1 ( h11 h12 p8 h2 h3 h4 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER t_p5b
      INTEGER t_p6b
      INTEGER t_p7b
      INTEGER t_p8b
      INTEGER t_h1b
      INTEGER t_h2b
      INTEGER t_h3b
      INTEGER t_h4b
      INTEGER p5b
      INTEGER p6b
      INTEGER p7b
      INTEGER p8b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER h4b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h11b
      INTEGER h12b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER p7b_1
      INTEGER h1b_1
      INTEGER h11b_1
      INTEGER h12b_1
      INTEGER p8b_2
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER h2b_2
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubh(2)
      INTEGER isubh
      DOUBLE PRECISION FACTORIAL
      DOUBLE PRECISION a_c(*)
      LOGICAL skipped
      EXTERNAL FACTORIAL
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO p7b = p6b,noab+nvab
      DO p8b = noab+1,noab+nvab
      DO h1b = 1,noab
      DO h2b = 1,noab
      DO h3b = h2b,noab
      DO h4b = h3b,noab
      skipped = .true.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h1b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p8b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p8b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p8b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p8b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h1b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h1b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h1b)) skipped = .fals
     &e.
      IF (.not.skipped) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1)+i
     &nt_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-1)
     &+int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-
     &1)+int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+p8b-1),ieor(int_mb(k_sym+h1b-1),ieo
     &r(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h4b-1)
     &))))))) .eq. ieor(irrep_v,ieor(irrep_t,irrep_t))) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+p7b-1) * int_mb(k_range+p8b-1) * int_mb(k_range+h1b-1) * int_m
     &b(k_range+h2b-1) * int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_5',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h11b = 1,noab
      DO h12b = h11b,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h12
     &b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h11b-1),in
     &t_mb(k_sym+h12b-1)))))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_6(p5b,p6b,p7b,h1b,h11b,h12b,p5b_1,p6b_1,p7b_1,
     &h1b_1,h11b_1,h12b_1)
      CALL TCE_RESTRICTED_6(p8b,h11b,h12b,h2b,h3b,h4b,p8b_2,h11b_2,h12b_
     &2,h2b_2,h3b_2,h4b_2)
      dim_common = int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb
     &(k_range+p7b-1) * int_mb(k_range+h1b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p8b-1) * int_mb(k_range+h2b-1) * int_mb
     &(k_range+h3b-1) * int_mb(k_range+h4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_5',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_5',2,MA_ERR)
      IF ((h12b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h1b_1
     & - 1 + noab * (h12b_1 - 1 + noab * (h11b_1 - 1 + noab * (p7b_1 - n
     &oab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1)))))
     &))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p7b-1),int_mb(k_range+h11b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+h1b-1),6,3,2,1,5,4,1.0d0)
      END IF
      IF ((h11b .lt. h1b) .and. (h1b .le. h12b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h1b_1 - 1 + noab * (h11b_1 - 1 + noab * (p7b_1 - n
     &oab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1)))))
     &))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p7b-1),int_mb(k_range+h11b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+h12b-1),5,3,2,1,6,4,-1.0d0)
      END IF
      IF ((h1b .le. h11b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h11b_1 - 1 + noab * (h1b_1 - 1 + noab * (p7b_1 - n
     &oab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1)))))
     &))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p7b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h12b-1),4,3,2,1,6,5,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_5',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_5',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_5',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(h4b_2
     & - 1 + noab * (h3b_2 - 1 + noab * (h2b_2 - 1 + noab * (h12b_2 - 1 
     &+ noab * (h11b_2 - 1 + noab * (p8b_2 - noab - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p8b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h12b-1),int_mb(k_range+h2b-
     &1),int_mb(k_range+h3b-1),int_mb(k_range+h4b-1),6,5,4,1,3,2,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_5',6,MA_E
     &RR)
      nsubh(1) = 1
      nsubh(2) = 1
      isubh = 1
      IF (h11b .eq. h12b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2)),dbl_mb(k_a_sort),dim_common,dbl_mb(k
     &_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_5',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_5',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,6,4,5,3,2,1,1.0d0/4.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,6,4,3,5,2,1,-1.0d0/4.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,6,4,3,2,5,1,1.0d0/4.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h1b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,6,4,3,2,1,5,-1.0d0/4.0d0)
      END IF
      IF ((t_p5b .eq. p8b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),4,8,7,6,5,3,2,1,-1.0d0/4.0d0)
      END IF
      IF ((t_p5b .eq. p8b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),4,8,7,6,3,5,2,1,1.0d0/4.0d0)
      END IF
      IF ((t_p5b .eq. p8b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),4,8,7,6,3,2,5,1,-1.0d0/4.0d0)
      END IF
      IF ((t_p5b .eq. p8b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h1b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),4,8,7,6,3,2,1,5,1.0d0/4.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,4,7,6,5,3,2,1,1.0d0/4.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,4,7,6,3,5,2,1,-1.0d0/4.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,4,7,6,3,2,5,1,1.0d0/4.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h1b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,4,7,6,3,2,1,5,-1.0d0/4.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,4,6,5,3,2,1,-1.0d0/4.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,4,6,3,5,2,1,1.0d0/4.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,4,6,3,2,5,1,-1.0d0/4.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p7b) .and. (t_h1b .eq. h2b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h1b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+h2b-1),int_mb(k_range+p8b-1),int_
     &mb(k_range+h1b-1),int_mb(k_range+p7b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,4,6,3,2,1,5,1.0d0/4.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_5',9
     &,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_5_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 h12 p5 h1 h2 h3 )_vt + = 1 * Sum ( p9 p10 ) * t ( p5 p9 p10 h1 h2 h3 )_t * v ( h11 h12 p9 p10 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER p10b
      INTEGER p5b_1
      INTEGER p9b_1
      INTEGER p10b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h3b_1
      INTEGER h11b_2
      INTEGER h12b_2
      INTEGER p9b_2
      INTEGER p10b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL nxtask
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)
     &+int_mb(k_spin+h3b-1).ne.12)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-
     &1) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3
     &b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h12b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),i
     &nt_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+h11b-1) * int_mb(k_r
     &ange+h12b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1) * int
     &_mb(k_range+h3b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_5_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      DO p10b = p9b,noab+nvab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p9b-1)+int_mb(k_spin+p10b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p9b-1),ieor(int_mb(
     &k_sym+p10b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h3b-1)))))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_6(p5b,p9b,p10b,h1b,h2b,h3b,p5b_1,p9b_1,p10b_1,
     &h1b_1,h2b_1,h3b_1)
      CALL TCE_RESTRICTED_4(h11b,h12b,p9b,p10b,h11b_2,h12b_2,p9b_2,p10b_
     &2)
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+p10b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+h1b-1) * int_mb
     &(k_range+h2b-1) * int_mb(k_range+h3b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h11b-1) * int_mb(k_range+h12b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_5_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_5_1',2,MA_ERR)
      IF ((p10b .lt. p5b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h3b_1
     & - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p5b_1 - noa
     &b - 1 + nvab * (p10b_1 - noab - 1 + nvab * (p9b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+p5b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h3b-1),6,5,4,3,2,1,1.0d0)
      END IF
      IF ((p9b .lt. p5b) .and. (p5b .le. p10b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h3b_1
     & - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - no
     &ab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p9b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+p10b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h3b-1),6,5,4,2,3,1,-1.0d0)
      END IF
      IF ((p5b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h3b_1
     & - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p10b_1 - no
     &ab - 1 + nvab * (p9b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p10b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h3b-1),6,5,4,1,3,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_5_1',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_5_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_5_1',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p10b_
     &2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (no
     &ab+nvab) * (h11b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h11b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+p9b-1),int_mb(k_range+p10b
     &-1),2,1,4,3,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_5_1',6,MA
     &_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p9b .eq. p10b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_5_1'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_5_1'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_5_1',9,MA_ERR)
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h12b-1
     &),int_mb(k_range+h11b-1),int_mb(k_range+h3b-1),int_mb(k_range+h2b-
     &1),int_mb(k_range+h1b-1),int_mb(k_range+p5b-1),6,2,1,5,4,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h3b -
     & 1 + noab * (h2b - 1 + noab * (h1b - 1 + noab * (h12b - 1 + noab *
     & (h11b - 1 + noab * (p5b - noab - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_5_1',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_5_1'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_5_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h11 h12 p5 h1 h2 h3 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p5b
      INTEGER h11b
      INTEGER h12b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      length = 0
      DO p5b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+p5b-
     &1) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3
     &b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+p5b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),i
     &nt_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)
     &+int_mb(k_spin+h3b-1).ne.12)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_5_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p5b = noab+1,noab+nvab
      DO h11b = 1,noab
      DO h12b = h11b,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = h2b,noab
      IF (int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+p5b-
     &1) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h3
     &b-1)) THEN
      IF (ieor(int_mb(k_sym+h11b-1),ieor(int_mb(k_sym+h12b-1),ieor(int_m
     &b(k_sym+p5b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),i
     &nt_mb(k_sym+h3b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)
     &+int_mb(k_spin+h3b-1).ne.12)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h3b - 1 + noab * (h2b - 1 + noab * (h1b 
     &- 1 + noab * (h12b - 1 + noab * (h11b - 1 + noab * (p5b - noab - 1
     &)))))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p5b-1) * int_mb(k_range+h11b-1) * int
     &_mb(k_range+h12b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1
     &) * int_mb(k_range+h3b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_6(d_a,k_a_offset,d_b,k_b_offset,a_c,t_p5
     &b,t_p6b,t_p7b,t_p8b,t_h1b,t_h2b,t_h3b,t_h4b)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p5 p6 p7 p8 h1 h2 h3 h4 )_vtt + = 1/2 * P( 36 ) * Sum ( h10 p9 ) * t ( p5 p6 p9 h1 h2 h10 )_t * i1 ( h10 p7 p8 h3 h4 p9 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER t_p5b
      INTEGER t_p6b
      INTEGER t_p7b
      INTEGER t_p8b
      INTEGER t_h1b
      INTEGER t_h2b
      INTEGER t_h3b
      INTEGER t_h4b
      INTEGER p5b
      INTEGER p6b
      INTEGER p7b
      INTEGER p8b
      INTEGER h1b
      INTEGER h2b
      INTEGER h3b
      INTEGER h4b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p9b
      INTEGER h10b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER p9b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h10b_1
      INTEGER p7b_2
      INTEGER p8b_2
      INTEGER h10b_2
      INTEGER h3b_2
      INTEGER h4b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      DOUBLE PRECISION a_c(*)
      LOGICAL skipped
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO p7b = noab+1,noab+nvab
      DO p8b = p7b,noab+nvab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h3b = 1,noab
      DO h4b = h3b,noab
      skipped = .true.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) skipped = .fals
     &e.
      IF (.not.skipped) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)+int_mb(k_spin+h1b-1)+i
     &nt_mb(k_spin+h2b-1)+int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1).ne.1
     &6)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-1)
     &+int_mb(k_spin+p8b-1) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-
     &1)+int_mb(k_spin+h3b-1)+int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p7b-1),ieor(int_mb(k_sym+p8b-1),ieor(int_mb(k_sym+h1b-1),ieo
     &r(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+h3b-1),int_mb(k_sym+h4b-1)
     &))))))) .eq. ieor(irrep_v,ieor(irrep_t,irrep_t))) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+p7b-1) * int_mb(k_range+p8b-1) * int_mb(k_range+h1b-1) * int_m
     &b(k_range+h2b-1) * int_mb(k_range+h3b-1) * int_mb(k_range+h4b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_6',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p9b = noab+1,noab+nvab
      DO h10b = 1,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p9b-1)
     & .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h10b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p9b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),int
     &_mb(k_sym+h10b-1)))))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_6(p5b,p6b,p9b,h1b,h2b,h10b,p5b_1,p6b_1,p9b_1,h
     &1b_1,h2b_1,h10b_1)
      CALL TCE_RESTRICTED_6(p7b,p8b,h10b,h3b,h4b,p9b,p7b_2,p8b_2,h10b_2,
     &h3b_2,h4b_2,p9b_2)
      dim_common = int_mb(k_range+p9b-1) * int_mb(k_range+h10b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1) * int_mb
     &(k_range+h3b-1) * int_mb(k_range+h4b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_6',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_6',2,MA_ERR)
      IF ((p9b .lt. p5b) .and. (h10b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h10b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p9b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),int_mb(k_range+h10b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),6,5,3,2,4,1,1.0d0)
      END IF
      IF ((p9b .lt. p5b) .and. (h1b .le. h10b) .and. (h10b .lt. h2b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h10b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p9b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),6,4,3,2,5,1,-1.0d0)
      END IF
      IF ((p9b .lt. p5b) .and. (h2b .le. h10b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p9b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p9b-1)
     &,int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h2b-1),int_mb(k_range+h10b-1),5,4,3,2,6,1,1.0d0)
      END IF
      IF ((p5b .le. p9b) .and. (p9b .lt. p6b) .and. (h10b .lt. h1b)) THE
     &N
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h10b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p9b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p6b-1),int_mb(k_range+h10b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),6,5,3,1,4,2,-1.0d0)
      END IF
      IF ((p5b .le. p9b) .and. (p9b .lt. p6b) .and. (h1b .le. h10b) .and
     &. (h10b .lt. h2b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h10b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p9b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),6,4,3,1,5,2,1.0d0)
      END IF
      IF ((p5b .le. p9b) .and. (p9b .lt. p6b) .and. (h2b .le. h10b)) THE
     &N
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p9b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h2b-1),int_mb(k_range+h10b-1),5,4,3,1,6,2,-1.0d0)
      END IF
      IF ((p6b .le. p9b) .and. (h10b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h10b_1 - 1 + noab * (p9b_1 - no
     &ab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p9b-1),int_mb(k_range+h10b-1
     &),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),6,5,2,1,4,3,1.0d0)
      END IF
      IF ((p6b .le. p9b) .and. (h1b .le. h10b) .and. (h10b .lt. h2b)) TH
     &EN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h10b_1 - 1 + noab * (h1b_1 - 1 + noab * (p9b_1 - no
     &ab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p9b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),6,4,2,1,5,3,-1.0d0)
      END IF
      IF ((p6b .le. p9b) .and. (h2b .le. h10b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h10b_
     &1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p9b_1 - no
     &ab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p9b-1),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h2b-1),int_mb(k_range+h10b-1),5,4,2,1,6,3,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_6',3,MA_E
     &RR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_6',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_6',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (h4b_2 - 1 + noab * (h3b_2 - 1 + noab * (h10b
     &_2 - 1 + noab * (p8b_2 - noab - 1 + nvab * (p7b_2 - noab - 1))))))
     &)
      CALL TCE_SORT_6(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+p7b-1)
     &,int_mb(k_range+p8b-1),int_mb(k_range+h10b-1),int_mb(k_range+h3b-1
     &),int_mb(k_range+h4b-1),int_mb(k_range+p9b-1),5,4,2,1,3,6,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_6',6,MA_E
     &RR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_6',7
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_6',8
     &,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,4,3,6,5,2,1,1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,4,3,2,6,5,1,1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,4,3,6,2,5,1,-1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,4,3,2,6,1,5,-1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,4,3,6,2,1,5,1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p6b) .and. (t_p7b .eq. p7b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,7,4,3,2,1,6,5,1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),4,8,7,3,6,5,2,1,1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),4,8,7,3,2,6,5,1,1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),4,8,7,3,6,2,5,1,-1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),4,8,7,3,2,6,1,5,-1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),4,8,7,3,6,2,1,5,1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),4,8,7,3,2,1,6,5,1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,4,7,3,6,5,2,1,-1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,4,7,3,2,6,5,1,-1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,4,7,3,6,2,5,1,1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,4,7,3,2,6,1,5,1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,4,7,3,6,2,1,5,-1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p6b)
     & .and. (t_p8b .eq. p8b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,4,7,3,2,1,6,5,-1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),4,8,3,7,6,5,2,1,-1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),4,8,3,7,2,6,5,1,-1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),4,8,3,7,6,2,5,1,1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),4,8,3,7,2,6,1,5,1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),4,8,3,7,6,2,1,5,-1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p5b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),4,8,3,7,2,1,6,5,-1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,4,3,7,6,5,2,1,1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,4,3,7,2,6,5,1,1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,4,3,7,6,2,5,1,-1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,4,3,7,2,6,1,5,-1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,4,3,7,6,2,1,5,1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p5b) .and. (t_p6b .eq. p7b) .and. (t_p7b .eq. p8b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),8,4,3,7,2,1,6,5,1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &2b) .and. (t_h3b .eq. h3b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),4,3,8,7,6,5,2,1,1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),4,3,8,7,2,6,5,1,1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h2b) .and. (t_h4b .eq. h4b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),4,3,8,7,6,2,5,1,-1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &1b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),4,3,8,7,2,6,1,5,-1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h1b) .and. (t_h2b .eq. h
     &3b) .and. (t_h3b .eq. h4b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),4,3,8,7,6,2,1,5,1.0d0/2.0d0)
      END IF
      IF ((t_p5b .eq. p7b) .and. (t_p6b .eq. p8b) .and. (t_p7b .eq. p5b)
     & .and. (t_p8b .eq. p6b) .and. (t_h1b .eq. h3b) .and. (t_h2b .eq. h
     &4b) .and. (t_h3b .eq. h1b) .and. (t_h4b .eq. h2b)) THEN
      CALL TCE_SORTACC_8(dbl_mb(k_c_sort),a_c,int_mb(k_range+h4b-1),int_
     &mb(k_range+h3b-1),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_
     &mb(k_range+h2b-1),int_mb(k_range+h1b-1),int_mb(k_range+p6b-1),int_
     &mb(k_range+p5b-1),4,3,8,7,2,1,6,5,1.0d0/2.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_6',9
     &,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
      SUBROUTINE ccsdt2_q_right_6_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_
     &c_offset)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 p5 p6 h1 h2 p9 )_vt + = 1 * Sum ( h12 p11 ) * t ( p5 p6 p11 h1 h2 h12 )_t * v ( h10 h12 p9 p11 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER nxtask
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p5b
      INTEGER p6b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      INTEGER p9b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p11b
      INTEGER h12b
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER p11b_1
      INTEGER h1b_1
      INTEGER h2b_1
      INTEGER h12b_1
      INTEGER h10b_2
      INTEGER h12b_2
      INTEGER p9b_2
      INTEGER p11b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL nxtask
      nprocs = GA_NNODES()
      count = 0
      next = nxtask(nprocs,1)
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &)+int_mb(k_spin+h10b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+p9b-1).ne.12)) THEN
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h10b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+p9b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+h10b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+p9b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      dimc = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb(k_ra
     &nge+h10b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_
     &mb(k_range+p9b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_6_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p11b = noab+1,noab+nvab
      DO h12b = 1,noab
      IF (int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p11b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+h12
     &b-1)) THEN
      IF (ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),ieor(int_mb(
     &k_sym+p11b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+h12b-1)))))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_6(p5b,p6b,p11b,h1b,h2b,h12b,p5b_1,p6b_1,p11b_1
     &,h1b_1,h2b_1,h12b_1)
      CALL TCE_RESTRICTED_4(h10b,h12b,p9b,p11b,h10b_2,h12b_2,p9b_2,p11b_
     &2)
      dim_common = int_mb(k_range+p11b-1) * int_mb(k_range+h12b-1)
      dima_sort = int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_mb
     &(k_range+h1b-1) * int_mb(k_range+h2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+p9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_6_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt2_q_right_6_1',2,MA_ERR)
      IF ((p11b .lt. p5b) .and. (h12b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h12b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p11b_1 - noab - 1)))))
     &))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p11b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),int_mb(k_range+h12b-
     &1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),6,5,3,2,4,1,1.0d0)
      END IF
      IF ((p11b .lt. p5b) .and. (h1b .le. h12b) .and. (h12b .lt. h2b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h12b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p11b_1 - noab - 1)))))
     &))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p11b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+h2b-1),6,4,3,2,5,1,-1.0d0)
      END IF
      IF ((p11b .lt. p5b) .and. (h2b .le. h12b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p5b_1 - noab - 1 + nvab * (p11b_1 - noab - 1)))))
     &))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p11b-1
     &),int_mb(k_range+p5b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h12b-1),5,4,3,2,6,1,1.0d0)
      END IF
      IF ((p5b .le. p11b) .and. (p11b .lt. p6b) .and. (h12b .lt. h1b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h12b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p5b_1 - noab - 1)))))
     &))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+p6b-1),int_mb(k_range+h12b-
     &1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),6,5,3,1,4,2,-1.0d0)
      END IF
      IF ((p5b .le. p11b) .and. (p11b .lt. p6b) .and. (h1b .le. h12b) .a
     &nd. (h12b .lt. h2b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h12b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p5b_1 - noab - 1)))))
     &))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+h2b-1),6,4,3,1,5,2,1.0d0)
      END IF
      IF ((p5b .le. p11b) .and. (p11b .lt. p6b) .and. (h2b .le. h12b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p6b_1 - no
     &ab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p5b_1 - noab - 1)))))
     &))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+p6b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h12b-1),5,4,3,1,6,2,-1.0d0)
      END IF
      IF ((p6b .le. p11b) .and. (h12b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h1b_1 - 1 + noab * (h12b_1 - 1 + noab * (p11b_1 - n
     &oab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1)))))
     &))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p11b-1),int_mb(k_range+h12b-
     &1),int_mb(k_range+h1b-1),int_mb(k_range+h2b-1),6,5,2,1,4,3,1.0d0)
      END IF
      IF ((p6b .le. p11b) .and. (h1b .le. h12b) .and. (h12b .lt. h2b)) T
     &HEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h2b_1
     & - 1 + noab * (h12b_1 - 1 + noab * (h1b_1 - 1 + noab * (p11b_1 - n
     &oab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1)))))
     &))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p11b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+h2b-1),6,4,2,1,5,3,-1.0d0)
      END IF
      IF ((p6b .le. p11b) .and. (h2b .le. h12b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h12b_
     &1 - 1 + noab * (h2b_1 - 1 + noab * (h1b_1 - 1 + noab * (p11b_1 - n
     &oab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1)))))
     &))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p11b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+h2b-1),int_mb(k_range+h12b-1),5,4,2,1,6,3,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt2_q_right_6_1',3,MA
     &_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt2_q_right_6_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt2_q_right_6_1',5,MA_ERR)
      IF ((h12b .lt. h10b) .and. (p11b .lt. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (no
     &ab+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h10b-1),int_mb(k_range+p11b-1),int_mb(k_range+p9b
     &-1),4,2,1,3,1.0d0)
      END IF
      IF ((h12b .lt. h10b) .and. (p9b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h10b_2 - 1 + (no
     &ab+nvab) * (h12b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h12b-1
     &),int_mb(k_range+h10b-1),int_mb(k_range+p9b-1),int_mb(k_range+p11b
     &-1),3,2,1,4,-1.0d0)
      END IF
      IF ((h10b .le. h12b) .and. (p11b .lt. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - 1 + (noab+nvab) * (p11b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (no
     &ab+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+p11b-1),int_mb(k_range+p9b
     &-1),4,1,2,3,-1.0d0)
      END IF
      IF ((h10b .le. h12b) .and. (p9b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p11b_
     &2 - 1 + (noab+nvab) * (p9b_2 - 1 + (noab+nvab) * (h12b_2 - 1 + (no
     &ab+nvab) * (h10b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h10b-1
     &),int_mb(k_range+h12b-1),int_mb(k_range+p9b-1),int_mb(k_range+p11b
     &-1),3,1,2,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt2_q_right_6_1',6,MA
     &_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt2_q_right_6_1'
     &,7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt2_q_right_6_1'
     &,8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt2_q_right_6_1',9,MA_ERR)
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+h2b-1),int_mb(k_range+h1b-1
     &),int_mb(k_range+p6b-1),int_mb(k_range+p5b-1),6,5,2,4,3,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h2b - 1 + noab * (h1b - 1 + noab * (h10b - 1 +
     & noab * (p6b - noab - 1 + nvab * (p5b - noab - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt2_q_right_6_1',10,M
     &A_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt2_q_right_6_1'
     &,11,MA_ERR)
      END IF
      END IF
      END IF
      next = nxtask(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = nxtask(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE OFFSET_ccsdt2_q_right_6_1(l_a_offset,k_a_offset,size)
C     $Id: ccsdt2_q_right.F 19699 2010-10-29 17:07:13Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h10 p5 p6 h1 h2 p9 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER p5b
      INTEGER p6b
      INTEGER h10b
      INTEGER h1b
      INTEGER h2b
      INTEGER p9b
      length = 0
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+p9b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb
     &(k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+p9b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p5b-
     &1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+p9b-1).ne.12)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdt2_q_right_6_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO h10b = 1,noab
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO p9b = noab+1,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1
     &) .eq. int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+int_mb(k_spin+p9b
     &-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb
     &(k_sym+p6b-1),ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),in
     &t_mb(k_sym+p9b-1)))))) .eq. ieor(irrep_v,irrep_t)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+p5b-
     &1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1)+
     &int_mb(k_spin+p9b-1).ne.12)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p9b - noab - 1 + nvab * (h2b - 1 + noab 
     &* (h1b - 1 + noab * (h10b - 1 + noab * (p6b - noab - 1 + nvab * (p
     &5b - noab - 1)))))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_
     &mb(k_range+h10b-1) * int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1)
     & * int_mb(k_range+p9b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
