      SUBROUTINE OFFSET_ccsdtq_lr_alpha_15_48_5_7_3_1(l_a_offset,k_a_off
     &set,size)
C     $Id: offset_ccsdtq_lr_alpha_15_48_5_7_3_1.F 19703 2010-10-29 17:30:23Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i5 ( h10 h11 h12 h18 p5 p7 p8 p9 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h10b
      INTEGER h11b
      INTEGER h12b
      INTEGER h18b
      INTEGER p5b
      INTEGER p7b
      INTEGER p8b
      INTEGER p9b
      length = 0
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h12b = h11b,noab
      DO h18b = h12b,noab
      DO p5b = noab+1,noab+nvab
      DO p7b = p5b,noab+nvab
      DO p8b = p7b,noab+nvab
      DO p9b = p8b,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h18b-1) .eq. int_mb(k_spin+p5b-1)+int_mb(k_spin+
     &p7b-1)+int_mb(k_spin+p8b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h12b-1),ieor(int_mb(k_sym+h18b-1),ieor(int_mb(k_sym+p5b-1)
     &,ieor(int_mb(k_sym+p7b-1),ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+p9
     &b-1)))))))) .eq. irrep_y) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+h18b-1)+int_mb(k_spin+p5b-
     &1)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)+int_mb(k_spin+p9b-1).
     &ne.16)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdtq_lr_alpha_15_48_5_7_3_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h10b = 1,noab
      DO h11b = h10b,noab
      DO h12b = h11b,noab
      DO h18b = h12b,noab
      DO p5b = noab+1,noab+nvab
      DO p7b = p5b,noab+nvab
      DO p8b = p7b,noab+nvab
      DO p9b = p8b,noab+nvab
      IF (int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h12b
     &-1)+int_mb(k_spin+h18b-1) .eq. int_mb(k_spin+p5b-1)+int_mb(k_spin+
     &p7b-1)+int_mb(k_spin+p8b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+h10b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_m
     &b(k_sym+h12b-1),ieor(int_mb(k_sym+h18b-1),ieor(int_mb(k_sym+p5b-1)
     &,ieor(int_mb(k_sym+p7b-1),ieor(int_mb(k_sym+p8b-1),int_mb(k_sym+p9
     &b-1)))))))) .eq. irrep_y) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h10b-1)+int_mb(k_spin+h11b
     &-1)+int_mb(k_spin+h12b-1)+int_mb(k_spin+h18b-1)+int_mb(k_spin+p5b-
     &1)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)+int_mb(k_spin+p9b-1).
     &ne.16)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p9b - noab - 1 + nvab * (p8b - noab - 1 
     &+ nvab * (p7b - noab - 1 + nvab * (p5b - noab - 1 + nvab * (h18b -
     & 1 + noab * (h12b - 1 + noab * (h11b - 1 + noab * (h10b - 1)))))))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h10b-1) * int_mb(k_range+h11b-1) * in
     &t_mb(k_range+h12b-1) * int_mb(k_range+h18b-1) * int_mb(k_range+p5b
     &-1) * int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1) * int_mb(k_ran
     &ge+p9b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
