      SUBROUTINE OFFSET_ccsdtq_lr_alpha_15_42_2_1(l_a_offset,k_a_offset,
     &size)
C     $Id: offset_ccsdtq_lr_alpha_15_42_2_1.F 19703 2010-10-29 17:30:23Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h12 h14 h16 p6 )_ytra
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h12b
      INTEGER h14b
      INTEGER h16b
      INTEGER p6b
      length = 0
      DO h12b = 1,noab
      DO h14b = h12b,noab
      DO h16b = 1,noab
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h16b-1)+int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h16b-1),int_mb(k_sym+p6b-1)))) .eq. ieor(irrep_y,irrep_tra
     &)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h16b-1)+int_mb(k_spin+p6b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdtq_lr_alpha_15_42_2_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h12b = 1,noab
      DO h14b = h12b,noab
      DO h16b = 1,noab
      DO p6b = noab+1,noab+nvab
      IF (int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b-1) .eq. int_mb(k_spin
     &+h16b-1)+int_mb(k_spin+p6b-1)) THEN
      IF (ieor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+h14b-1),ieor(int_m
     &b(k_sym+h16b-1),int_mb(k_sym+p6b-1)))) .eq. ieor(irrep_y,irrep_tra
     &)) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h12b-1)+int_mb(k_spin+h14b
     &-1)+int_mb(k_spin+h16b-1)+int_mb(k_spin+p6b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p6b - noab - 1 + nvab * (h16b - 1 + noab
     & * (h14b - 1 + noab * (h12b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h12b-1) * int_mb(k_range+h14b-1) * in
     &t_mb(k_range+h16b-1) * int_mb(k_range+p6b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
