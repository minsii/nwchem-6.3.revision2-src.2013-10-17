      SUBROUTINE OFFSET_ccsdtq_lr_alpha_9_3_1(l_a_offset,k_a_offset,size
     &)
C     $Id: offset_ccsdtq_lr_alpha_9_3_1.F 19703 2010-10-29 17:30:23Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h1 h2 h11 p13 )_ytrb
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h1b
      INTEGER h2b
      INTEGER h11b
      INTEGER p13b
      length = 0
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h11b = 1,noab
      DO p13b = noab+1,noab+nvab
      IF (int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1) .eq. int_mb(k_spin+h
     &11b-1)+int_mb(k_spin+p13b-1)) THEN
      IF (ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),ieor(int_mb(
     &k_sym+h11b-1),int_mb(k_sym+p13b-1)))) .eq. ieor(irrep_y,irrep_trb)
     &) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1
     &)+int_mb(k_spin+h11b-1)+int_mb(k_spin+p13b-1).ne.8)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('ccsdtq_lr_alpha_9_3_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h1b = 1,noab
      DO h2b = h1b,noab
      DO h11b = 1,noab
      DO p13b = noab+1,noab+nvab
      IF (int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1) .eq. int_mb(k_spin+h
     &11b-1)+int_mb(k_spin+p13b-1)) THEN
      IF (ieor(int_mb(k_sym+h1b-1),ieor(int_mb(k_sym+h2b-1),ieor(int_mb(
     &k_sym+h11b-1),int_mb(k_sym+p13b-1)))) .eq. ieor(irrep_y,irrep_trb)
     &) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h1b-1)+int_mb(k_spin+h2b-1
     &)+int_mb(k_spin+h11b-1)+int_mb(k_spin+p13b-1).ne.8)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = p13b - noab - 1 + nvab * (h11b - 1 + noa
     &b * (h2b - 1 + noab * (h1b - 1)))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h1b-1) * int_mb(k_range+h2b-1) * int_
     &mb(k_range+h11b-1) * int_mb(k_range+p13b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
