      SUBROUTINE wdm_hp_mo_b_c(d_d2,d_i0,d_v2,k_d2_offset,k_i0_offset,k_
     &v2_offset)
C     $Id: wdm_hp_mo_b_c.F 19706 2010-10-29 17:52:31Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p2 h1 )_vd + = 1/2 * Sum ( h4 p3 h5 ) * d ( h5 p2 h4 p3 )_d * v ( h4 p3 h1 h5 )_v
C     i0 ( h1 p2 )_vd + = 1/2 * Sum ( h5 h4 p3 ) * d ( h4 p3 h5 p2 )_d * v ( h1 h5 h4 p3 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "util.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_i0
      INTEGER k_i0_offset
      INTEGER d_d2
      INTEGER k_d2_offset
      INTEGER d_v2
      INTEGER k_v2_offset
      CALL wdm_hp_mo_b_c_1(d_d2,k_d2_offset,d_v2,k_v2_offset,d_i0,k_i0_o
     &ffset)
      CALL wdm_hp_mo_b_c_2(d_d2,k_d2_offset,d_v2,k_v2_offset,d_i0,k_i0_o
     &ffset)
      RETURN
      END
      SUBROUTINE wdm_hp_mo_b_c_1(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: wdm_hp_mo_b_c.F 19706 2010-10-29 17:52:31Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( p2 h1 )_vd + = 1/2 * Sum ( h4 p3 h5 ) * d ( h5 p2 h4 p3 )_d * v ( h4 p3 h1 h5 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p2b
      INTEGER h1b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h5b
      INTEGER h4b
      INTEGER p3b
      INTEGER p2b_1
      INTEGER h5b_1
      INTEGER h4b_1
      INTEGER p3b_1
      INTEGER h4b_2
      INTEGER p3b_2
      INTEGER h1b_2
      INTEGER h5b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      irrep_d=0
      next = NXTVAL(nprocs)
      DO p2b = noab+1,noab+nvab
      DO h1b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p2b-1)+int_mb(k_spin+h1b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+h1b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),int_mb(k_sym+h1b-1)) .eq. ieor(irrep_
     &v,irrep_d)) THEN
      dimc = int_mb(k_range+p2b-1) * int_mb(k_range+h1b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('wdm_hp_mo_b_c_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h5b = 1,noab
      DO h4b = 1,noab
      DO p3b = noab+1,noab+nvab
      IF (int_mb(k_spin+p2b-1)+int_mb(k_spin+h5b-1) .eq. int_mb(k_spin+h
     &4b-1)+int_mb(k_spin+p3b-1)) THEN
      IF (ieor(int_mb(k_sym+p2b-1),ieor(int_mb(k_sym+h5b-1),ieor(int_mb(
     &k_sym+h4b-1),int_mb(k_sym+p3b-1)))) .eq. irrep_d) THEN
      CALL TCE_RESTRICTED_4(p2b,h5b,h4b,p3b,p2b_1,h5b_1,h4b_1,p3b_1)
      CALL TCE_RESTRICTED_4(h4b,p3b,h1b,h5b,h4b_2,p3b_2,h1b_2,h5b_2)
      dim_common = int_mb(k_range+h5b-1) * int_mb(k_range+h4b-1) * int_m
     &b(k_range+p3b-1)
      dima_sort = int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('wdm_hp_mo_b_c_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &wdm_hp_mo_b_c_1',2,MA_ERR)
      IF ((h5b .le. p2b)) THEN
c      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p3b_1
c     & - 1 + (noab+nvab) * (h4b_1 - 1 + (noab+nvab) * (p2b_1 - 1 + (noab
c     &+nvab) * (h5b_1 - 1)))))
c
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p3b_1
     & -noab-1 + (nvab) * (h4b_1 - 1 + (noab) * (p2b_1 - noab-1 + (nvab
     & ) * (h5b_1 - 1)))))
c
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+p2b-1),int_mb(k_range+h4b-1),int_mb(k_range+p3b-1)
     &,2,4,3,1,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('wdm_hp_mo_b_c_1',3,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('wdm_hp_mo_b_c_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &wdm_hp_mo_b_c_1',5,MA_ERR)
      IF ((h5b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(h1b_2
     & - 1 + (noab+nvab) * (h5b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h4b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h5b-1),int_mb(k_range+h1b-1)
     &,4,2,1,3,-1.0d0)
      END IF
      IF ((h1b .le. h5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(h5b_2
     & - 1 + (noab+nvab) * (h1b_2 - 1 + (noab+nvab) * (p3b_2 - 1 + (noab
     &+nvab) * (h4b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h1b-1),int_mb(k_range+h5b-1)
     &,3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('wdm_hp_mo_b_c_1',6,MA_ER
     &R)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('wdm_hp_mo_b_c_1',7,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('wdm_hp_mo_b_c_1',8,
     &MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &wdm_hp_mo_b_c_1',9,MA_ERR)
c      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h1b-1)
c     &,int_mb(k_range+p2b-1),2,1,1.0d0/2.0d0)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h1b-1)
     &,int_mb(k_range+p2b-1),1,2,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h1b -
     & 1)*nvab + (p2b - noab - 1))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('wdm_hp_mo_b_c_1',10,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('wdm_hp_mo_b_c_1',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
      SUBROUTINE wdm_hp_mo_b_c_2(d_a,k_a_offset,d_b,k_b_offset,d_c,k_c_o
     &ffset)
C     $Id: wdm_hp_mo_b_c.F 19706 2010-10-29 17:52:31Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( h1 p2 )_vd + = 1/2 * Sum ( h5 h4 p3 ) * d ( h4 p3 h5 p2 )_d * v ( h1 h5 h4 p3 )_v
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h1b
      INTEGER p2b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER h4b
      INTEGER p3b
      INTEGER h5b
      INTEGER h4b_1
      INTEGER p3b_1
      INTEGER p2b_1
      INTEGER h5b_1
      INTEGER h1b_2
      INTEGER h5b_2
      INTEGER h4b_2
      INTEGER p3b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      irrep_d=0
      next = NXTVAL(nprocs)
      DO h1b = 1,noab
      DO p2b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h1b-1)+int_mb(k_spin+p2b-1
     &).ne.4)) THEN
      IF (int_mb(k_spin+h1b-1) .eq. int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h1b-1),int_mb(k_sym+p2b-1)) .eq. ieor(irrep_
     &v,irrep_d)) THEN
      dimc = int_mb(k_range+h1b-1) * int_mb(k_range+p2b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('wdm_hp_mo_b_c_2',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO h4b = 1,noab
      DO p3b = noab+1,noab+nvab
      DO h5b = 1,noab
      IF (int_mb(k_spin+h4b-1)+int_mb(k_spin+p3b-1) .eq. int_mb(k_spin+p
     &2b-1)+int_mb(k_spin+h5b-1)) THEN
      IF (ieor(int_mb(k_sym+h4b-1),ieor(int_mb(k_sym+p3b-1),ieor(int_mb(
     &k_sym+p2b-1),int_mb(k_sym+h5b-1)))) .eq. irrep_d) THEN
      CALL TCE_RESTRICTED_4(h4b,p3b,p2b,h5b,h4b_1,p3b_1,p2b_1,h5b_1)
      CALL TCE_RESTRICTED_4(h1b,h5b,h4b,p3b,h1b_2,h5b_2,h4b_2,p3b_2)
      dim_common = int_mb(k_range+h4b-1) * int_mb(k_range+p3b-1) * int_m
     &b(k_range+h5b-1)
      dima_sort = int_mb(k_range+p2b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h1b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('wdm_hp_mo_b_c_2',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &wdm_hp_mo_b_c_2',2,MA_ERR)
      IF ((h5b .le. p2b)) THEN
c      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p2b_1
c     & - 1 + (noab+nvab) * (h5b_1 - 1 + (noab+nvab) * (p3b_1 - 1 + (noab
c     &+nvab) * (h4b_1 - 1)))))
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p2b_1
     & -noab-1 + (nvab) * (h5b_1 - 1 + (noab) * (p3b_1 - noab -1 + (nvab
     & ) * (h4b_1 - 1)))))
c
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h4b-1)
     &,int_mb(k_range+p3b-1),int_mb(k_range+h5b-1),int_mb(k_range+p2b-1)
     &,4,3,2,1,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('wdm_hp_mo_b_c_2',3,MA_ER
     &R)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('wdm_hp_mo_b_c_2',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &wdm_hp_mo_b_c_2',5,MA_ERR)
      IF ((h5b .lt. h1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab) * (h1b_2 - 1 + (noab
     &+nvab) * (h5b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h5b-1)
     &,int_mb(k_range+h1b-1),int_mb(k_range+h4b-1),int_mb(k_range+p3b-1)
     &,2,1,4,3,-1.0d0)
      END IF
      IF ((h1b .le. h5b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p3b_2
     & - 1 + (noab+nvab) * (h4b_2 - 1 + (noab+nvab) * (h5b_2 - 1 + (noab
     &+nvab) * (h1b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h1b-1)
     &,int_mb(k_range+h5b-1),int_mb(k_range+h4b-1),int_mb(k_range+p3b-1)
     &,1,2,4,3,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('wdm_hp_mo_b_c_2',6,MA_ER
     &R)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('wdm_hp_mo_b_c_2',7,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('wdm_hp_mo_b_c_2',8,
     &MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &wdm_hp_mo_b_c_2',9,MA_ERR)
      CALL TCE_SORT_2(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h1b-1)
     &,int_mb(k_range+p2b-1),1,2,1.0d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p2b -
     & noab - 1 + nvab * (h1b - 1)))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('wdm_hp_mo_b_c_2',10,MA_E
     &RR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('wdm_hp_mo_b_c_2',11
     &,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
