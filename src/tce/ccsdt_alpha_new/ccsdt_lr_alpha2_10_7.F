      SUBROUTINE ccsdt_lr_alpha2_10_7(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: ccsdt_lr_alpha2_10_7.F 19702 2010-10-29 17:26:22Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p11 p13 h10 p9 )_ytratrb + = -1/3 * Sum ( h4 h5 h6 p1 ) * trb ( p1 p11 p13 h4 h5 h6 )_trb * i2 ( h4 h5 h6 h10 p1 p9 )_ytra
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p11b
      INTEGER p13b
      INTEGER h10b
      INTEGER p9b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p1b
      INTEGER h4b
      INTEGER h5b
      INTEGER h6b
      INTEGER p11b_1
      INTEGER p13b_1
      INTEGER p1b_1
      INTEGER h4b_1
      INTEGER h5b_1
      INTEGER h6b_1
      INTEGER h4b_2
      INTEGER h5b_2
      INTEGER h6b_2
      INTEGER h10b_2
      INTEGER p9b_2
      INTEGER p1b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsubh(3)
      INTEGER isubh
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTVAL
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p11b = noab+1,noab+nvab
      DO p13b = p11b,noab+nvab
      DO h10b = 1,noab
      DO p9b = noab+1,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p11b-1)+int_mb(k_spin+p13b
     &-1)+int_mb(k_spin+h10b-1)+int_mb(k_spin+p9b-1).ne.8)) THEN
      IF (int_mb(k_spin+p11b-1)+int_mb(k_spin+p13b-1) .eq. int_mb(k_spin
     &+h10b-1)+int_mb(k_spin+p9b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),ieor(int_mb(k_sym+p13b-1),ieor(int_m
     &b(k_sym+h10b-1),int_mb(k_sym+p9b-1)))) .eq. ieor(irrep_y,ieor(irre
     &p_tra,irrep_trb))) THEN
      dimc = int_mb(k_range+p11b-1) * int_mb(k_range+p13b-1) * int_mb(k_
     &range+h10b-1) * int_mb(k_range+p9b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt_lr_alpha2_10_7',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p1b = noab+1,noab+nvab
      DO h4b = 1,noab
      DO h5b = h4b,noab
      DO h6b = h5b,noab
      IF (int_mb(k_spin+p11b-1)+int_mb(k_spin+p13b-1)+int_mb(k_spin+p1b-
     &1) .eq. int_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1)+int_mb(k_spin+h6
     &b-1)) THEN
      IF (ieor(int_mb(k_sym+p11b-1),ieor(int_mb(k_sym+p13b-1),ieor(int_m
     &b(k_sym+p1b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(k_sym+h5b-1),i
     &nt_mb(k_sym+h6b-1)))))) .eq. irrep_trb) THEN
      CALL TCE_RESTRICTED_6(p11b,p13b,p1b,h4b,h5b,h6b,p11b_1,p13b_1,p1b_
     &1,h4b_1,h5b_1,h6b_1)
      CALL TCE_RESTRICTED_6(h4b,h5b,h6b,h10b,p9b,p1b,h4b_2,h5b_2,h6b_2,h
     &10b_2,p9b_2,p1b_2)
      dim_common = int_mb(k_range+p1b-1) * int_mb(k_range+h4b-1) * int_m
     &b(k_range+h5b-1) * int_mb(k_range+h6b-1)
      dima_sort = int_mb(k_range+p11b-1) * int_mb(k_range+p13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h10b-1) * int_mb(k_range+p9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt_lr_alpha2_10_7',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt_lr_alpha2_10_7',2,MA_ERR)
      IF ((p1b .le. p11b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h6b_1
     & - 1 + noab * (h5b_1 - 1 + noab * (h4b_1 - 1 + noab * (p13b_1 - no
     &ab - 1 + nvab * (p11b_1 - noab - 1 + nvab * (p1b_1 - noab - 1)))))
     &))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p1b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+p13b-1),int_mb(k_range+h4b-
     &1),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),3,2,6,5,4,1,1.0d0)
      END IF
      IF ((p11b .lt. p1b) .and. (p1b .le. p13b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h6b_1
     & - 1 + noab * (h5b_1 - 1 + noab * (h4b_1 - 1 + noab * (p13b_1 - no
     &ab - 1 + nvab * (p1b_1 - noab - 1 + nvab * (p11b_1 - noab - 1)))))
     &))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p11b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p13b-1),int_mb(k_range+h4b-
     &1),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),3,1,6,5,4,2,-1.0d0)
      END IF
      IF ((p13b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h6b_1
     & - 1 + noab * (h5b_1 - 1 + noab * (h4b_1 - 1 + noab * (p1b_1 - noa
     &b - 1 + nvab * (p13b_1 - noab - 1 + nvab * (p11b_1 - noab - 1)))))
     &))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p11b-1
     &),int_mb(k_range+p13b-1),int_mb(k_range+p1b-1),int_mb(k_range+h4b-
     &1),int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),2,1,6,5,4,3,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt_lr_alpha2_10_7',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt_lr_alpha2_10_7',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt_lr_alpha2_10_7',5,MA_ERR)
      IF ((h10b .le. p1b) .and. (p1b .le. p9b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (p1b_2 - noab - 1 + nvab * (h10b_2 - 1 + noab
     & * (h6b_2 - 1 + noab * (h5b_2 - 1 + noab * (h4b_2 - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h4b-1)
     &,int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h10b-1
     &),int_mb(k_range+p1b-1),int_mb(k_range+p9b-1),6,4,3,2,1,5,1.0d0)
      END IF
      IF ((p9b .lt. p1b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p1b_2
     & - noab - 1 + nvab * (p9b_2 - noab - 1 + nvab * (h10b_2 - 1 + noab
     & * (h6b_2 - 1 + noab * (h5b_2 - 1 + noab * (h4b_2 - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h4b-1)
     &,int_mb(k_range+h5b-1),int_mb(k_range+h6b-1),int_mb(k_range+h10b-1
     &),int_mb(k_range+p9b-1),int_mb(k_range+p1b-1),5,4,3,2,1,6,-1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt_lr_alpha2_10_7',6,
     &MA_ERR)
      nsubh(1) = 1
      nsubh(2) = 1
      nsubh(3) = 1
      isubh = 1
      IF (h4b .eq. h5b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      IF (h5b .eq. h6b) THEN
      nsubh(isubh) = nsubh(isubh) + 1
      ELSE
      isubh = isubh + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,6.0d0/FACTORIAL(
     &nsubh(1))/FACTORIAL(nsubh(2))/FACTORIAL(nsubh(3)),dbl_mb(k_a_sort)
     &,dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dim
     &a_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt_lr_alpha2_10_
     &7',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt_lr_alpha2_10_
     &7',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt_lr_alpha2_10_7',9,MA_ERR)
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p9b-1)
     &,int_mb(k_range+h10b-1),int_mb(k_range+p13b-1),int_mb(k_range+p11b
     &-1),4,3,2,1,-1.0d0/3.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p9b -
     & noab - 1 + nvab * (h10b - 1 + noab * (p13b - noab - 1 + nvab * (p
     &11b - noab - 1)))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt_lr_alpha2_10_7',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt_lr_alpha2_10_
     &7',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
