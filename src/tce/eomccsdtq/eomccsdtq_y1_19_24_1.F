      SUBROUTINE eomccsdtq_y1_19_24_1(d_a,k_a_offset,d_b,k_b_offset,d_c,
     &k_c_offset)
C     $Id: eomccsdtq_y1_19_24_1.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i2 ( h4 p15 p18 h13 h14 h16 )_vtt + = 1 * Sum ( p8 p9 ) * t ( p8 p9 p18 h13 h14 h16 )_t * i3 ( h4 p15 p8 p9 )_vt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p18b
      INTEGER h4b
      INTEGER p15b
      INTEGER h13b
      INTEGER h14b
      INTEGER h16b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p8b
      INTEGER p9b
      INTEGER p18b_1
      INTEGER p8b_1
      INTEGER p9b_1
      INTEGER h13b_1
      INTEGER h14b_1
      INTEGER h16b_1
      INTEGER h4b_2
      INTEGER p15b_2
      INTEGER p8b_2
      INTEGER p9b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER nsuperp(2)
      INTEGER isuperp
      INTEGER l_c
      INTEGER k_c
      DOUBLE PRECISION FACTORIAL
      EXTERNAL NXTASK
      EXTERNAL FACTORIAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO p18b = noab+1,noab+nvab
      DO h4b = 1,noab
      DO p15b = noab+1,noab+nvab
      DO h13b = 1,noab
      DO h14b = h13b,noab
      DO h16b = h14b,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h4b-1)+int_mb(k_spin+p15b-
     &1)+int_mb(k_spin+p18b-1)+int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-
     &1)+int_mb(k_spin+h16b-1).ne.12)) THEN
      IF (int_mb(k_spin+h4b-1)+int_mb(k_spin+p15b-1)+int_mb(k_spin+p18b-
     &1) .eq. int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1)+int_mb(k_spin+
     &h16b-1)) THEN
      IF (ieor(int_mb(k_sym+h4b-1),ieor(int_mb(k_sym+p15b-1),ieor(int_mb
     &(k_sym+p18b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+h14b-1)
     &,int_mb(k_sym+h16b-1)))))) .eq. ieor(irrep_v,ieor(irrep_t,irrep_t)
     &)) THEN
      dimc = int_mb(k_range+h4b-1) * int_mb(k_range+p15b-1) * int_mb(k_r
     &ange+p18b-1) * int_mb(k_range+h13b-1) * int_mb(k_range+h14b-1) * i
     &nt_mb(k_range+h16b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('eomccsdtq_y1_19_24_1',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p8b = noab+1,noab+nvab
      DO p9b = p8b,noab+nvab
      IF (int_mb(k_spin+p18b-1)+int_mb(k_spin+p8b-1)+int_mb(k_spin+p9b-1
     &) .eq. int_mb(k_spin+h13b-1)+int_mb(k_spin+h14b-1)+int_mb(k_spin+h
     &16b-1)) THEN
      IF (ieor(int_mb(k_sym+p18b-1),ieor(int_mb(k_sym+p8b-1),ieor(int_mb
     &(k_sym+p9b-1),ieor(int_mb(k_sym+h13b-1),ieor(int_mb(k_sym+h14b-1),
     &int_mb(k_sym+h16b-1)))))) .eq. irrep_t) THEN
      CALL TCE_RESTRICTED_6(p18b,p8b,p9b,h13b,h14b,h16b,p18b_1,p8b_1,p9b
     &_1,h13b_1,h14b_1,h16b_1)
      CALL TCE_RESTRICTED_4(h4b,p15b,p8b,p9b,h4b_2,p15b_2,p8b_2,p9b_2)
      dim_common = int_mb(k_range+p8b-1) * int_mb(k_range+p9b-1)
      dima_sort = int_mb(k_range+p18b-1) * int_mb(k_range+h13b-1) * int_
     &mb(k_range+h14b-1) * int_mb(k_range+h16b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+h4b-1) * int_mb(k_range+p15b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdtq_y1_19_24_1',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdtq_y1_19_24_1',2,MA_ERR)
      IF ((p9b .le. p18b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h16b_
     &1 - 1 + noab * (h14b_1 - 1 + noab * (h13b_1 - 1 + noab * (p18b_1 -
     & noab - 1 + nvab * (p9b_1 - noab - 1 + nvab * (p8b_1 - noab - 1)))
     &))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p8b-1)
     &,int_mb(k_range+p9b-1),int_mb(k_range+p18b-1),int_mb(k_range+h13b-
     &1),int_mb(k_range+h14b-1),int_mb(k_range+h16b-1),6,5,4,3,2,1,1.0d0
     &)
      END IF
      IF ((p8b .le. p18b) .and. (p18b .lt. p9b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h16b_
     &1 - 1 + noab * (h14b_1 - 1 + noab * (h13b_1 - 1 + noab * (p9b_1 - 
     &noab - 1 + nvab * (p18b_1 - noab - 1 + nvab * (p8b_1 - noab - 1)))
     &))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p8b-1)
     &,int_mb(k_range+p18b-1),int_mb(k_range+p9b-1),int_mb(k_range+h13b-
     &1),int_mb(k_range+h14b-1),int_mb(k_range+h16b-1),6,5,4,2,3,1,-1.0d
     &0)
      END IF
      IF ((p18b .lt. p8b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h16b_
     &1 - 1 + noab * (h14b_1 - 1 + noab * (h13b_1 - 1 + noab * (p9b_1 - 
     &noab - 1 + nvab * (p8b_1 - noab - 1 + nvab * (p18b_1 - noab - 1)))
     &))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p18b-1
     &),int_mb(k_range+p8b-1),int_mb(k_range+p9b-1),int_mb(k_range+h13b-
     &1),int_mb(k_range+h14b-1),int_mb(k_range+h16b-1),6,5,4,1,3,2,1.0d0
     &)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdtq_y1_19_24_1',3,
     &MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('eomccsdtq_y1_19_24_1',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &eomccsdtq_y1_19_24_1',5,MA_ERR)
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p9b_2
     & - noab - 1 + nvab * (p8b_2 - noab - 1 + nvab * (p15b_2 - noab - 1
     & + nvab * (h4b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h4b-1)
     &,int_mb(k_range+p15b-1),int_mb(k_range+p8b-1),int_mb(k_range+p9b-1
     &),2,1,4,3,1.0d0)
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('eomccsdtq_y1_19_24_1',6,
     &MA_ERR)
      nsuperp(1) = 1
      nsuperp(2) = 1
      isuperp = 1
      IF (p8b .eq. p9b) THEN
      nsuperp(isuperp) = nsuperp(isuperp) + 1
      ELSE
      isuperp = isuperp + 1
      END IF
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,2.0d0/FACTORIAL(
     &nsuperp(1))/FACTORIAL(nsuperp(2)),dbl_mb(k_a_sort),dim_common,dbl_
     &mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sort),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('eomccsdtq_y1_19_24_
     &1',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdtq_y1_19_24_
     &1',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &eomccsdtq_y1_19_24_1',9,MA_ERR)
      IF ((p15b .le. p18b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p15b-1
     &),int_mb(k_range+h4b-1),int_mb(k_range+h16b-1),int_mb(k_range+h14b
     &-1),int_mb(k_range+h13b-1),int_mb(k_range+p18b-1),2,1,6,5,4,3,1.0d
     &0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h16b 
     &- 1 + noab * (h14b - 1 + noab * (h13b - 1 + noab * (p18b - noab - 
     &1 + nvab * (p15b - noab - 1 + nvab * (h4b - 1)))))))
      END IF
      IF ((p18b .le. p15b)) THEN
      CALL TCE_SORT_6(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+p15b-1
     &),int_mb(k_range+h4b-1),int_mb(k_range+h16b-1),int_mb(k_range+h14b
     &-1),int_mb(k_range+h13b-1),int_mb(k_range+p18b-1),2,6,1,5,4,3,-1.0
     &d0/2.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h16b 
     &- 1 + noab * (h14b - 1 + noab * (h13b - 1 + noab * (p15b - noab - 
     &1 + nvab * (p18b - noab - 1 + nvab * (h4b - 1)))))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdtq_y1_19_24_1',10
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('eomccsdtq_y1_19_24_
     &1',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
