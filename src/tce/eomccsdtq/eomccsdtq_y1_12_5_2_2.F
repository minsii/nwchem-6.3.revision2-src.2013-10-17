      SUBROUTINE eomccsdtq_y1_12_5_2_2(d_a,k_a_offset,d_c,k_c_offset)
C     $Id: eomccsdtq_y1_12_5_2_2.F 24183 2013-05-03 23:47:08Z edo $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i3 ( h9 h11 h14 p7 p8 p10 )_y + = 4/5 * y ( h9 h11 h14 p7 p8 p10 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTASK
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h9b
      INTEGER h11b
      INTEGER h14b
      INTEGER p7b
      INTEGER p8b
      INTEGER p10b
      INTEGER dimc
      INTEGER h9b_1
      INTEGER h11b_1
      INTEGER h14b_1
      INTEGER p7b_1
      INTEGER p8b_1
      INTEGER p10b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTASK
      nprocs = GA_NNODES()
      count = 0
      next = NXTASK(nprocs,1)
      DO h9b = 1,noab
      DO h11b = h9b,noab
      DO h14b = h11b,noab
      DO p7b = noab+1,noab+nvab
      DO p8b = p7b,noab+nvab
      DO p10b = p8b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-
     &1)+int_mb(k_spin+h14b-1)+int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)
     &+int_mb(k_spin+p10b-1).ne.12)) THEN
      IF (int_mb(k_spin+h9b-1)+int_mb(k_spin+h11b-1)+int_mb(k_spin+h14b-
     &1) .eq. int_mb(k_spin+p7b-1)+int_mb(k_spin+p8b-1)+int_mb(k_spin+p1
     &0b-1)) THEN
      IF (ieor(int_mb(k_sym+h9b-1),ieor(int_mb(k_sym+h11b-1),ieor(int_mb
     &(k_sym+h14b-1),ieor(int_mb(k_sym+p7b-1),ieor(int_mb(k_sym+p8b-1),i
     &nt_mb(k_sym+p10b-1)))))) .eq. irrep_y) THEN
      dimc = int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1) * int_mb(k_r
     &ange+h14b-1) * int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1) * int
     &_mb(k_range+p10b-1)
      CALL TCE_RESTRICTED_6(h9b,h11b,h14b,p7b,p8b,p10b,h9b_1,h11b_1,h14b
     &_1,p7b_1,p8b_1,p10b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h9b-1) * int_mb(k_range+h11b-1) * int_m
     &b(k_range+h14b-1) * int_mb(k_range+p7b-1) * int_mb(k_range+p8b-1) 
     &* int_mb(k_range+p10b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('eomccsdtq_y1_12_5_2_2',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &eomccsdtq_y1_12_5_2_2',1,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p10b_
     &1 - noab - 1 + nvab * (p8b_1 - noab - 1 + nvab * (p7b_1 - noab - 1
     & + nvab * (h14b_1 - 1 + noab * (h11b_1 - 1 + noab * (h9b_1 - 1))))
     &)))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h9b-1)
     &,int_mb(k_range+h11b-1),int_mb(k_range+h14b-1),int_mb(k_range+p7b-
     &1),int_mb(k_range+p8b-1),int_mb(k_range+p10b-1),6,5,4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('eomccsdtq_y1_12_5_2_2',2
     &,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &eomccsdtq_y1_12_5_2_2',3,MA_ERR)
      CALL TCE_SORT_6(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p10b-1
     &),int_mb(k_range+p8b-1),int_mb(k_range+p7b-1),int_mb(k_range+h14b-
     &1),int_mb(k_range+h11b-1),int_mb(k_range+h9b-1),6,5,4,3,2,1,4.0d0/
     &5.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p10b 
     &- noab - 1 + nvab * (p8b - noab - 1 + nvab * (p7b - noab - 1 + nva
     &b * (h14b - 1 + noab * (h11b - 1 + noab * (h9b - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('eomccsdtq_y1_12_5_2_2',4
     &,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('eomccsdtq_y1_12_5_2
     &_2',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTASK(nprocs,1)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTASK(-nprocs,1)
      call GA_SYNC()
      RETURN
      END
