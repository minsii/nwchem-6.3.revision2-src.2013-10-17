      SUBROUTINE OFFSET_eomccsdtq_y3_27_1(l_a_offset,k_a_offset,size)
C     $Id: OFFSET_eomccsdtq_y3_27_1.F 19704 2010-10-29 17:43:02Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( h4 h5 h6 p13 h10 h12 p1 p2 )_ytt
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER l_a_offset
      INTEGER k_a_offset
      INTEGER size
      INTEGER length
      INTEGER addr
      INTEGER h4b
      INTEGER h5b
      INTEGER h6b
      INTEGER p13b
      INTEGER p1b
      INTEGER p2b
      INTEGER h10b
      INTEGER h12b
      length = 0
      DO h4b = 1,noab
      DO h5b = h4b,noab
      DO h6b = h5b,noab
      DO p13b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h10b = 1,noab
      DO h12b = h10b,noab
      IF (int_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)
     &+int_mb(k_spin+p13b-1) .eq. int_mb(k_spin+h10b-1)+int_mb(k_spin+h1
     &2b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h4b-1),ieor(int_mb(k_sym+h5b-1),ieor(int_mb(
     &k_sym+h6b-1),ieor(int_mb(k_sym+p13b-1),ieor(int_mb(k_sym+h10b-1),i
     &eor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+p1b-1),int_mb(k_sym+p2b
     &-1)))))))) .eq. ieor(irrep_y,ieor(irrep_t,irrep_t))) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1
     &)+int_mb(k_spin+h6b-1)+int_mb(k_spin+p13b-1)+int_mb(k_spin+h10b-1)
     &+int_mb(k_spin+h12b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).n
     &e.16)) THEN
      length = length + 1
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_int,2*length+1,'noname',l_a_offset,k_a_off
     &set)) CALL ERRQUIT('eomccsdtq_y3_27_1',0,MA_ERR)
      int_mb(k_a_offset) = length
      addr = 0
      size = 0
      DO h4b = 1,noab
      DO h5b = h4b,noab
      DO h6b = h5b,noab
      DO p13b = noab+1,noab+nvab
      DO p1b = noab+1,noab+nvab
      DO p2b = p1b,noab+nvab
      DO h10b = 1,noab
      DO h12b = h10b,noab
      IF (int_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1)+int_mb(k_spin+h6b-1)
     &+int_mb(k_spin+p13b-1) .eq. int_mb(k_spin+h10b-1)+int_mb(k_spin+h1
     &2b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1)) THEN
      IF (ieor(int_mb(k_sym+h4b-1),ieor(int_mb(k_sym+h5b-1),ieor(int_mb(
     &k_sym+h6b-1),ieor(int_mb(k_sym+p13b-1),ieor(int_mb(k_sym+h10b-1),i
     &eor(int_mb(k_sym+h12b-1),ieor(int_mb(k_sym+p1b-1),int_mb(k_sym+p2b
     &-1)))))))) .eq. ieor(irrep_y,ieor(irrep_t,irrep_t))) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h4b-1)+int_mb(k_spin+h5b-1
     &)+int_mb(k_spin+h6b-1)+int_mb(k_spin+p13b-1)+int_mb(k_spin+h10b-1)
     &+int_mb(k_spin+h12b-1)+int_mb(k_spin+p1b-1)+int_mb(k_spin+p2b-1).n
     &e.16)) THEN
      addr = addr + 1
      int_mb(k_a_offset+addr) = h12b - 1 + noab * (h10b - 1 + noab * (p2
     &b - noab - 1 + nvab * (p1b - noab - 1 + nvab * (p13b - noab - 1 + 
     &nvab * (h6b - 1 + noab * (h5b - 1 + noab * (h4b - 1)))))))
      int_mb(k_a_offset+length+addr) = size
      size = size + int_mb(k_range+h4b-1) * int_mb(k_range+h5b-1) * int_
     &mb(k_range+h6b-1) * int_mb(k_range+p13b-1) * int_mb(k_range+p1b-1)
     & * int_mb(k_range+p2b-1) * int_mb(k_range+h10b-1) * int_mb(k_range
     &+h12b-1)
      END IF
      END IF
      END IF
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      RETURN
      END
