      SUBROUTINE ccsdt_lr_beta_4_4_1_1_2_1(d_a,k_a_offset,d_c,k_c_offset
     &)
C     $Id: ccsdt_lr_beta_4_4_1_1_2_1.F 19706 2010-10-29 17:52:31Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i4 ( h2 h4 h8 p5 p6 p7 )_y + = 1 * y ( h2 h4 h8 p5 p6 p7 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER h2b
      INTEGER h4b
      INTEGER h8b
      INTEGER p5b
      INTEGER p6b
      INTEGER p7b
      INTEGER dimc
      INTEGER h2b_1
      INTEGER h4b_1
      INTEGER h8b_1
      INTEGER p5b_1
      INTEGER p6b_1
      INTEGER p7b_1
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO h2b = 1,noab
      DO h4b = h2b,noab
      DO h8b = h4b,noab
      DO p5b = noab+1,noab+nvab
      DO p6b = p5b,noab+nvab
      DO p7b = p6b,noab+nvab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+h2b-1)+int_mb(k_spin+h4b-1
     &)+int_mb(k_spin+h8b-1)+int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+i
     &nt_mb(k_spin+p7b-1).ne.12)) THEN
      IF (int_mb(k_spin+h2b-1)+int_mb(k_spin+h4b-1)+int_mb(k_spin+h8b-1)
     & .eq. int_mb(k_spin+p5b-1)+int_mb(k_spin+p6b-1)+int_mb(k_spin+p7b-
     &1)) THEN
      IF (ieor(int_mb(k_sym+h2b-1),ieor(int_mb(k_sym+h4b-1),ieor(int_mb(
     &k_sym+h8b-1),ieor(int_mb(k_sym+p5b-1),ieor(int_mb(k_sym+p6b-1),int
     &_mb(k_sym+p7b-1)))))) .eq. irrep_y) THEN
      dimc = int_mb(k_range+h2b-1) * int_mb(k_range+h4b-1) * int_mb(k_ra
     &nge+h8b-1) * int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * int_m
     &b(k_range+p7b-1)
      CALL TCE_RESTRICTED_6(h2b,h4b,h8b,p5b,p6b,p7b,h2b_1,h4b_1,h8b_1,p5
     &b_1,p6b_1,p7b_1)
      dim_common = 1
      dima_sort = int_mb(k_range+h2b-1) * int_mb(k_range+h4b-1) * int_mb
     &(k_range+h8b-1) * int_mb(k_range+p5b-1) * int_mb(k_range+p6b-1) * 
     &int_mb(k_range+p7b-1)
      dima = dim_common * dima_sort
      IF (dima .gt. 0) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt_lr_beta_4_4_1_1_2_1',0,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt_lr_beta_4_4_1_1_2_1',1,MA_ERR)
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(p7b_1
     & - noab - 1 + nvab * (p6b_1 - noab - 1 + nvab * (p5b_1 - noab - 1 
     &+ nvab * (h8b_1 - 1 + noab * (h4b_1 - 1 + noab * (h2b_1 - 1)))))))
      CALL TCE_SORT_6(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+h2b-1)
     &,int_mb(k_range+h4b-1),int_mb(k_range+h8b-1),int_mb(k_range+p5b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p7b-1),6,5,4,3,2,1,1.0d0)
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt_lr_beta_4_4_1_1_2_
     &1',2,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt_lr_beta_4_4_1_1_2_1',3,MA_ERR)
      CALL TCE_SORT_6(dbl_mb(k_a_sort),dbl_mb(k_c),int_mb(k_range+p7b-1)
     &,int_mb(k_range+p6b-1),int_mb(k_range+p5b-1),int_mb(k_range+h8b-1)
     &,int_mb(k_range+h4b-1),int_mb(k_range+h2b-1),6,5,4,3,2,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(p7b -
     & noab - 1 + nvab * (p6b - noab - 1 + nvab * (p5b - noab - 1 + nvab
     & * (h8b - 1 + noab * (h4b - 1 + noab * (h2b - 1)))))))
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt_lr_beta_4_4_1_1_2_
     &1',4,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt_lr_beta_4_4_1
     &_1_2_1',5,MA_ERR)
      END IF
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
