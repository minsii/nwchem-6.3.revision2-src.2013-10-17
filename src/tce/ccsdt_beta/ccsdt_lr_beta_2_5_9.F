      SUBROUTINE ccsdt_lr_beta_2_5_9(d_a,k_a_offset,d_b,k_b_offset,d_c,k
     &_c_offset)
C     $Id: ccsdt_lr_beta_2_5_9.F 19706 2010-10-29 17:52:31Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i1 ( p10 p11 h9 h13 )_vtratrb + = 4 * Sum ( h4 p2 ) * trb ( p2 p10 h4 h13 )_trb * i2 ( h4 p11 h9 p2 )_vtra
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "sym.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_a
      INTEGER k_a_offset
      INTEGER d_b
      INTEGER k_b_offset
      INTEGER d_c
      INTEGER k_c_offset
      INTEGER NXTVAL
      INTEGER next
      INTEGER nprocs
      INTEGER count
      INTEGER p10b
      INTEGER p11b
      INTEGER h13b
      INTEGER h9b
      INTEGER dimc
      INTEGER l_c_sort
      INTEGER k_c_sort
      INTEGER p2b
      INTEGER h4b
      INTEGER p10b_1
      INTEGER p2b_1
      INTEGER h13b_1
      INTEGER h4b_1
      INTEGER p11b_2
      INTEGER h4b_2
      INTEGER h9b_2
      INTEGER p2b_2
      INTEGER dim_common
      INTEGER dima_sort
      INTEGER dima
      INTEGER dimb_sort
      INTEGER dimb
      INTEGER l_a_sort
      INTEGER k_a_sort
      INTEGER l_a
      INTEGER k_a
      INTEGER l_b_sort
      INTEGER k_b_sort
      INTEGER l_b
      INTEGER k_b
      INTEGER l_c
      INTEGER k_c
      EXTERNAL NXTVAL
      nprocs = GA_NNODES()
      count = 0
      next = NXTVAL(nprocs)
      DO p10b = noab+1,noab+nvab
      DO p11b = noab+1,noab+nvab
      DO h13b = 1,noab
      DO h9b = 1,noab
      IF (next.eq.count) THEN
      IF ((.not.restricted).or.(int_mb(k_spin+p10b-1)+int_mb(k_spin+p11b
     &-1)+int_mb(k_spin+h9b-1)+int_mb(k_spin+h13b-1).ne.8)) THEN
      IF (int_mb(k_spin+p10b-1)+int_mb(k_spin+p11b-1) .eq. int_mb(k_spin
     &+h9b-1)+int_mb(k_spin+h13b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),ieor(int_mb(k_sym+p11b-1),ieor(int_m
     &b(k_sym+h9b-1),int_mb(k_sym+h13b-1)))) .eq. ieor(irrep_v,ieor(irre
     &p_tra,irrep_trb))) THEN
      dimc = int_mb(k_range+p10b-1) * int_mb(k_range+p11b-1) * int_mb(k_
     &range+h9b-1) * int_mb(k_range+h13b-1)
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c_sort,k_c_sort)) CALL
     & ERRQUIT('ccsdt_lr_beta_2_5_9',0,MA_ERR)
      CALL DFILL(dimc,0.0d0,dbl_mb(k_c_sort),1)
      DO p2b = noab+1,noab+nvab
      DO h4b = 1,noab
      IF (int_mb(k_spin+p10b-1)+int_mb(k_spin+p2b-1) .eq. int_mb(k_spin+
     &h13b-1)+int_mb(k_spin+h4b-1)) THEN
      IF (ieor(int_mb(k_sym+p10b-1),ieor(int_mb(k_sym+p2b-1),ieor(int_mb
     &(k_sym+h13b-1),int_mb(k_sym+h4b-1)))) .eq. irrep_trb) THEN
      CALL TCE_RESTRICTED_4(p10b,p2b,h13b,h4b,p10b_1,p2b_1,h13b_1,h4b_1)
      CALL TCE_RESTRICTED_4(p11b,h4b,h9b,p2b,p11b_2,h4b_2,h9b_2,p2b_2)
      dim_common = int_mb(k_range+p2b-1) * int_mb(k_range+h4b-1)
      dima_sort = int_mb(k_range+p10b-1) * int_mb(k_range+h13b-1)
      dima = dim_common * dima_sort
      dimb_sort = int_mb(k_range+p11b-1) * int_mb(k_range+h9b-1)
      dimb = dim_common * dimb_sort
      IF ((dima .gt. 0) .and. (dimb .gt. 0)) THEN
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a_sort,k_a_sort)) CALL
     & ERRQUIT('ccsdt_lr_beta_2_5_9',1,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dima,'noname',l_a,k_a)) CALL ERRQUIT('
     &ccsdt_lr_beta_2_5_9',2,MA_ERR)
      IF ((p2b .le. p10b) .and. (h4b .le. h13b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h13b_
     &1 - 1 + noab * (h4b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p2
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+h4b-1),int_mb(k_range+h13b-
     &1),4,2,3,1,1.0d0)
      END IF
      IF ((p2b .le. p10b) .and. (h13b .lt. h4b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h4b_1
     & - 1 + noab * (h13b_1 - 1 + noab * (p10b_1 - noab - 1 + nvab * (p2
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p2b-1)
     &,int_mb(k_range+p10b-1),int_mb(k_range+h13b-1),int_mb(k_range+h4b-
     &1),3,2,4,1,-1.0d0)
      END IF
      IF ((p10b .lt. p2b) .and. (h4b .le. h13b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h13b_
     &1 - 1 + noab * (h4b_1 - 1 + noab * (p2b_1 - noab - 1 + nvab * (p10
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p2b-1),int_mb(k_range+h4b-1),int_mb(k_range+h13b-
     &1),4,1,3,2,-1.0d0)
      END IF
      IF ((p10b .lt. p2b) .and. (h13b .lt. h4b)) THEN
      CALL GET_HASH_BLOCK(d_a,dbl_mb(k_a),dima,int_mb(k_a_offset),(h4b_1
     & - 1 + noab * (h13b_1 - 1 + noab * (p2b_1 - noab - 1 + nvab * (p10
     &b_1 - noab - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_a),dbl_mb(k_a_sort),int_mb(k_range+p10b-1
     &),int_mb(k_range+p2b-1),int_mb(k_range+h13b-1),int_mb(k_range+h4b-
     &1),3,1,4,2,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_a)) CALL ERRQUIT('ccsdt_lr_beta_2_5_9',3,M
     &A_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b_sort,k_b_sort)) CALL
     & ERRQUIT('ccsdt_lr_beta_2_5_9',4,MA_ERR)
      IF (.not.MA_PUSH_GET(mt_dbl,dimb,'noname',l_b,k_b)) CALL ERRQUIT('
     &ccsdt_lr_beta_2_5_9',5,MA_ERR)
      IF ((h4b .le. p11b) .and. (h9b .le. p2b)) THEN
      CALL GET_HASH_BLOCK(d_b,dbl_mb(k_b),dimb,int_mb(k_b_offset),(p2b_2
     & - noab - 1 + nvab * (h9b_2 - 1 + noab * (p11b_2 - noab - 1 + nvab
     & * (h4b_2 - 1)))))
      CALL TCE_SORT_4(dbl_mb(k_b),dbl_mb(k_b_sort),int_mb(k_range+h4b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+h9b-1),int_mb(k_range+p2b-1
     &),3,2,1,4,1.0d0)
      END IF
      IF (.not.MA_POP_STACK(l_b)) CALL ERRQUIT('ccsdt_lr_beta_2_5_9',6,M
     &A_ERR)
      CALL DGEMM('T','N',dima_sort,dimb_sort,dim_common,1.0d0,dbl_mb(k_a
     &_sort),dim_common,dbl_mb(k_b_sort),dim_common,1.0d0,dbl_mb(k_c_sor
     &t),dima_sort)
      IF (.not.MA_POP_STACK(l_b_sort)) CALL ERRQUIT('ccsdt_lr_beta_2_5_9
     &',7,MA_ERR)
      IF (.not.MA_POP_STACK(l_a_sort)) CALL ERRQUIT('ccsdt_lr_beta_2_5_9
     &',8,MA_ERR)
      END IF
      END IF
      END IF
      END DO
      END DO
      IF (.not.MA_PUSH_GET(mt_dbl,dimc,'noname',l_c,k_c)) CALL ERRQUIT('
     &ccsdt_lr_beta_2_5_9',9,MA_ERR)
      IF ((p10b .le. p11b) .and. (h9b .le. h13b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h9b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+h13b-1),int_mb(k_range+p10b
     &-1),4,2,1,3,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h13b 
     &- 1 + noab * (h9b - 1 + noab * (p11b - noab - 1 + nvab * (p10b - n
     &oab - 1)))))
      END IF
      IF ((p10b .le. p11b) .and. (h13b .le. h9b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h9b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+h13b-1),int_mb(k_range+p10b
     &-1),4,2,3,1,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h9b -
     & 1 + noab * (h13b - 1 + noab * (p11b - noab - 1 + nvab * (p10b - n
     &oab - 1)))))
      END IF
      IF ((p11b .le. p10b) .and. (h9b .le. h13b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h9b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+h13b-1),int_mb(k_range+p10b
     &-1),2,4,1,3,-1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h13b 
     &- 1 + noab * (h9b - 1 + noab * (p10b - noab - 1 + nvab * (p11b - n
     &oab - 1)))))
      END IF
      IF ((p11b .le. p10b) .and. (h13b .le. h9b)) THEN
      CALL TCE_SORT_4(dbl_mb(k_c_sort),dbl_mb(k_c),int_mb(k_range+h9b-1)
     &,int_mb(k_range+p11b-1),int_mb(k_range+h13b-1),int_mb(k_range+p10b
     &-1),2,4,3,1,1.0d0)
      CALL ADD_HASH_BLOCK(d_c,dbl_mb(k_c),dimc,int_mb(k_c_offset),(h9b -
     & 1 + noab * (h13b - 1 + noab * (p10b - noab - 1 + nvab * (p11b - n
     &oab - 1)))))
      END IF
      IF (.not.MA_POP_STACK(l_c)) CALL ERRQUIT('ccsdt_lr_beta_2_5_9',10,
     &MA_ERR)
      IF (.not.MA_POP_STACK(l_c_sort)) CALL ERRQUIT('ccsdt_lr_beta_2_5_9
     &',11,MA_ERR)
      END IF
      END IF
      END IF
      next = NXTVAL(nprocs)
      END IF
      count = count + 1
      END DO
      END DO
      END DO
      END DO
      next = NXTVAL(-nprocs)
      call GA_SYNC()
      RETURN
      END
