      SUBROUTINE beta_2(d_d1,d_i0,d_tra1,d_tra2,d_trb1,d_trb2,d_y1,d_y2,
     &k_d1_offset,k_i0_offset,k_tra1_offset,k_tra2_offset,k_trb1_offset,
     &k_trb2_offset,k_y1_offset,k_y2_offset)
C     $Id: beta_2.F 19698 2010-10-29 17:03:09Z d3y133 $
C     This is a Fortran77 program generated by Tensor Contraction Engine v.1.0
C     Copyright (c) Battelle & Pacific Northwest National Laboratory (2002)
C     i0 ( )_ytratrbd + = -1 * Sum ( p2 h1 ) * d ( h1 p2 )_d * i1 ( p2 h1 )_ytratrb
C         i1 ( p2 h1 )_ytratrb + = 1 * Sum ( h7 ) * trb ( p2 h7 )_trb * i2 ( h7 h1 )_ytra
C             i2 ( h7 h1 )_ytra + = 1 * Sum ( p3 ) * tra ( p3 h1 )_tra * y ( h7 p3 )_y
C             i2 ( h7 h1 )_ytra + = -1/2 * Sum ( h5 p3 p4 ) * tra ( p3 p4 h1 h5 )_tra * y ( h5 h7 p3 p4 )_y
C         i1 ( p2 h1 )_ytrbtra + = 1 * Sum ( h3 ) * tra ( p2 h3 )_tra * i2 ( h3 h1 )_ytrb
C             i2 ( h3 h1 )_ytrb + = 1 * Sum ( p4 ) * trb ( p4 h1 )_trb * y ( h3 p4 )_y
C             i2 ( h3 h1 )_ytrb + = 1/2 * Sum ( h6 p4 p5 ) * trb ( p4 p5 h1 h6 )_trb * y ( h3 h6 p4 p5 )_y
C         i1 ( p2 h1 )_ytrbtra + = 1/2 * Sum ( h4 h5 p3 ) * tra ( p2 p3 h4 h5 )_tra * i2 ( h4 h5 h1 p3 )_ytrb
C             i2 ( h4 h5 h1 p3 )_ytrb + = -1 * Sum ( p6 ) * trb ( p6 h1 )_trb * y ( h4 h5 p3 p6 )_y
C         i1 ( p2 h1 )_ytratrb + = -1/2 * Sum ( h5 h6 p4 ) * trb ( p2 p4 h5 h6 )_trb * i2 ( h5 h6 h1 p4 )_ytra
C             i2 ( h5 h6 h1 p4 )_ytra + = -1 * Sum ( p3 ) * tra ( p3 h1 )_tra * y ( h5 h6 p3 p4 )_y
      IMPLICIT NONE
#include "global.fh"
#include "mafdecls.fh"
#include "util.fh"
#include "errquit.fh"
#include "tce.fh"
      INTEGER d_i0
      INTEGER k_i0_offset
      INTEGER d_d1
      INTEGER k_d1_offset
      INTEGER d_i1
      INTEGER k_i1_offset
      INTEGER l_i1_offset
      INTEGER d_trb1
      INTEGER k_trb1_offset
      INTEGER d_i2
      INTEGER k_i2_offset
      INTEGER size_i1
      INTEGER d_tra1
      INTEGER k_tra1_offset
      INTEGER d_tra2
      INTEGER k_tra2_offset
      INTEGER d_trb2
      INTEGER k_trb2_offset
      INTEGER l_i2_offset
      INTEGER d_y1
      INTEGER k_y1_offset
      INTEGER size_i2
      INTEGER d_y2
      INTEGER k_y2_offset
      CHARACTER*255 filename
      CALL OFFSET_beta_2_1_1(l_i1_offset,k_i1_offset,size_i1)
      CALL TCE_FILENAME('beta_2_1_1_i1',filename)
      CALL CREATEFILE(filename,d_i1,size_i1)
      CALL OFFSET_beta_2_1_1_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('beta_2_1_1_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL beta_2_1_1_1(d_tra1,k_tra1_offset,d_y1,k_y1_offset,d_i2,k_i2_
     &offset)
      CALL beta_2_1_1_2(d_tra2,k_tra2_offset,d_y2,k_y2_offset,d_i2,k_i2_
     &offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL beta_2_1_1(d_trb1,k_trb1_offset,d_i2,k_i2_offset,d_i1,k_i1_of
     &fset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('beta_2',-1,MA_ER
     &R)
      CALL OFFSET_beta_2_1_2_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('beta_2_1_2_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL beta_2_1_2_1(d_trb1,k_trb1_offset,d_y1,k_y1_offset,d_i2,k_i2_
     &offset)
      CALL beta_2_1_2_2(d_trb2,k_trb2_offset,d_y2,k_y2_offset,d_i2,k_i2_
     &offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL beta_2_1_2(d_tra1,k_tra1_offset,d_i2,k_i2_offset,d_i1,k_i1_of
     &fset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('beta_2',-1,MA_ER
     &R)
      CALL OFFSET_beta_2_1_3_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('beta_2_1_3_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL beta_2_1_3_1(d_trb1,k_trb1_offset,d_y2,k_y2_offset,d_i2,k_i2_
     &offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL beta_2_1_3(d_tra2,k_tra2_offset,d_i2,k_i2_offset,d_i1,k_i1_of
     &fset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('beta_2',-1,MA_ER
     &R)
      CALL OFFSET_beta_2_1_4_1(l_i2_offset,k_i2_offset,size_i2)
      CALL TCE_FILENAME('beta_2_1_4_1_i2',filename)
      CALL CREATEFILE(filename,d_i2,size_i2)
      CALL beta_2_1_4_1(d_tra1,k_tra1_offset,d_y2,k_y2_offset,d_i2,k_i2_
     &offset)
      CALL RECONCILEFILE(d_i2,size_i2)
      CALL beta_2_1_4(d_trb2,k_trb2_offset,d_i2,k_i2_offset,d_i1,k_i1_of
     &fset)
      CALL DELETEFILE(d_i2)
      IF (.not.MA_POP_STACK(l_i2_offset)) CALL ERRQUIT('beta_2',-1,MA_ER
     &R)
      CALL RECONCILEFILE(d_i1,size_i1)
      CALL beta_2_1(d_d1,k_d1_offset,d_i1,k_i1_offset,d_i0,k_i0_offset)
      CALL DELETEFILE(d_i1)
      IF (.not.MA_POP_STACK(l_i1_offset)) CALL ERRQUIT('beta_2',-1,MA_ER
     &R)
      RETURN
      END
