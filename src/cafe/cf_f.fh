#if defined(CAFE_POLARIZATION)
      subroutine cf_fpww(xw,xwm,fw,pw,pwp,idt,iwfrom,nwloc,lpbc,eww,
     + vdw,chg,iwatm,iwq,lwwndx,lwwjpt,lwwin,lwwj,
     + xi,xj,rwx,rwi1,rwi2,rwi6,rwc,
     + f,fi,fj,facu,pl,pj)
#elif defined(CAFE_FORCES)
      subroutine cf_fww(xw,xwm,fw,idt,iwfrom,nwloc,lpbc,eww,
     + vdw,chg,iwatm,iwq,lwwndx,lwwjpt,lwwin,lwwj,
     + xi,xj,rwx,rwi1,rwi2,rwi6,rwc,
     + f,fi,fj,facu)
c,rdf,ngt,iagc,jagc,igrc,u,uwmw)
#else
c error
#endif
c
c $Id: cf_f.fh 19708 2010-10-29 18:04:21Z d3y133 $
c
      implicit none
c
#include "cf_common.fh"
#include "cf_funcs_dec.fh"
#include "bitops_decls.fh"
c
      real*8 xw(mwm,3,mwa),xwm(mwm,3),fw(mwm,3,mwa,2),eww(mpe,2)
      integer idt(mwm)
      integer iwfrom,nwloc
      logical lpbc
c
      real*8 vdw(mat,mat,map,mset),chg(mqt,mqp,mset)
      integer iwatm(mwa),iwq(mwa)
c
      real*8 xi(mscr,3,mwa),xj(mscr,3,mwa),rwx(mscr,3)
      real*8 rwi1(mscr),rwi2(mscr),rwi6(mscr),rwc(mscr,3)
      real*8 f(mscr),fi(mscr,3,mwa),fj(mscr,3,mwa)
c
      real*8 facu(mscr)
c     real*8 rdf(mgl,mgr)
c
      integer lwwj(*)
      integer lwwndx(0:mwm,2),lwwjpt(nwloc,2),lwwin(nwloc,2)
c
#if defined(CAFE_POLARIZATION)
      real*8 pw(mwm,3,mwa,2),pwp(mwm,3,mwa,2,2)
      real*8 pl(mscr,3,mwa),pj(mscr,3,mwa)
c      integer nax2,ipset
      real*8 qai,qaj,pai,paj,pix,piy,piz,pjx,pjy,pjz
      real*8 ri3,rmi,rmj,fri,fmi,fmj,rmm,qfaci
      real*8 rx,ry,rz,ri1,ri2,ewwpsm,etermp
#else
      real*8 ferfc,fderfc
      real*8 boxi(3),dx,ri1,ri2,ri6,eq,e6,e12,ff,df,xix,xiy,xiz,fact
      real*8 rx,ry,rz,er,p2qi,p3qi,dqi
      integer iw,inum,ix,jnum,jwm
      logical lid,ljd
#endif
      real*8 ewwqsm
c
      integer iwfr,ipww,number,iwm,iwpm,nax
      integer iwmn,lwwptr,iwa,iax,jwa,iptr,jptr,iwpj
      real*8 ewwl6,ewwl12,q
      real*8 c64,c124,qi,qj,qi4,qj4,dercon
      real*8 c6p,c12p,qp,ep2tmp,ep3tmp
      real*8 c6,cf6,c12,cf12
c
      integer nwwlen(2)
      real*8 eterml,etermq
c
#include "cf_funcs_sfn.fh"
#include "bitops_funcs.fh"
c
cx new stuff begin
c
#if !defined(CAFE_POLARIZATION)
c
      iwfr=iwfrom-1
      boxi(1)=one/box(1)
      boxi(2)=one/box(2)
      boxi(3)=one/box(3)
c      if(npbtyp.eq.1.and.nbxtyp.eq.0.and.icntrl.eq.2) then
      if(nbxtyp.eq.0.and.icntrl.eq.2) then
      do 101 ipww=1,npww
      do 102 iw=1,nwloc
      iwm=iwfr+iw
      inum=lwwjpt(iw,ipww)-1
      lid=iand(idt(iwm),mdynam).eq.ldynam
c
      if(lpbc) then
      do 104 ix=1,3
      do 103 jnum=1,lwwin(iw,ipww)
      jwm=lwwj(inum+jnum)
      dx=xwm(iwm,ix)-xwm(jwm,ix)
      rwc(jwm,ix)=dx
      if(abs(dx).gt.boxh(ix)) then
      rwx(jwm,ix)=anint(dx*boxi(ix))*box(ix)
      rwc(jwm,ix)=dx-rwx(jwm,ix)
      else
      rwx(jwm,ix)=zero
      rwc(jwm,ix)=xwm(iwm,ix)-xwm(jwm,ix)
      endif
  103 continue
  104 continue
      else
      do 1103 ix=1,3
      do 1104 jnum=1,lwwin(iw,ipww)
      jwm=lwwj(inum+jnum)
      rwx(jwm,ix)=zero
      dx=xwm(iwm,ix)-xwm(jwm,ix)
      rwc(jwm,ix)=dx
 1104 continue
 1103 continue
      endif
c
      if(.not.ithint.and..not.ipert2.and..not.ipert3) then
      do 105 iwa=1,nwa
      qi=chg(iwq(iwa),1,iset)
      iptr=iwatm(iwa)
      xix=xw(iwm,1,iwa)
      xiy=xw(iwm,2,iwa)
      xiz=xw(iwm,3,iwa)
      do 106 jwa=1,nwa
      q=qi*chg(iwq(jwa),1,iset)
      c6=vdw(iptr,iwatm(jwa),1,iset)
      c12=vdw(iptr,iwatm(jwa),3,iset)
      cf6=six*c6
      cf12=twelve*c12
      eq=zero
      e6=zero
      e12=zero
      if(ipme.eq.0) then
      do 107 jnum=1,lwwin(iw,ipww)
      jwm=lwwj(inum+jnum)
      ljd=iand(idt(jwm),mdynam).eq.ldynam
      fact=one
      if(.not.lid.or..not.ljd) fact=half
      rx=xix-xw(jwm,1,jwa)-rwx(jwm,1)
      ry=xiy-xw(jwm,2,jwa)-rwx(jwm,2)
      rz=xiz-xw(jwm,3,jwa)-rwx(jwm,3)
      ri2=one/(rx*rx+ry*ry+rz*rz)
      ri1=sqrt(ri2)
      ri6=ri2*ri2*ri2
      eq=eq+fact*ri1
      e6=e6+fact*ri6
      e12=e12+fact*ri6*ri6
      ff=(q*ri1+(cf12*ri6-cf6)*ri6)*ri2
      df=ff*rx
      fw(iwm,1,iwa,ipww)=fw(iwm,1,iwa,ipww)+df
      fw(jwm,1,jwa,ipww)=fw(jwm,1,jwa,ipww)-df
      zw(1,1,ipww)=zw(1,1,ipww)-df*rwc(jwm,1)
      zw(2,1,ipww)=zw(2,1,ipww)-df*rwc(jwm,2)
      zw(3,1,ipww)=zw(3,1,ipww)-df*rwc(jwm,3)
      df=ff*ry
      fw(iwm,2,iwa,ipww)=fw(iwm,2,iwa,ipww)+df
      fw(jwm,2,jwa,ipww)=fw(jwm,2,jwa,ipww)-df
      zw(1,2,ipww)=zw(1,2,ipww)-df*rwc(jwm,1)
      zw(2,2,ipww)=zw(2,2,ipww)-df*rwc(jwm,2)
      zw(3,2,ipww)=zw(3,2,ipww)-df*rwc(jwm,3)
      df=ff*rz
      fw(iwm,3,iwa,ipww)=fw(iwm,3,iwa,ipww)+df
      fw(jwm,3,jwa,ipww)=fw(jwm,3,jwa,ipww)-df
      zw(1,3,ipww)=zw(1,3,ipww)-df*rwc(jwm,1)
      zw(2,3,ipww)=zw(2,3,ipww)-df*rwc(jwm,2)
      zw(3,3,ipww)=zw(3,3,ipww)-df*rwc(jwm,3)
  107 continue
      eww(7,ipww)=eww(7,ipww)+c12*e12-c6*e6
      eww(8,ipww)=eww(8,ipww)+q*eq
      else
      do 108 jnum=1,lwwin(iw,ipww)
      jwm=lwwj(inum+jnum)
      ljd=iand(idt(jwm),mdynam).eq.ldynam
      fact=one
      if(.not.lid.or..not.ljd) fact=half
      rx=xix-xw(jwm,1,jwa)-rwx(jwm,1)
      ry=xiy-xw(jwm,2,jwa)-rwx(jwm,2)
      rz=xiz-xw(jwm,3,jwa)-rwx(jwm,3)
      ri2=one/(rx*rx+ry*ry+rz*rz)
      ri1=sqrt(ri2)
      ri6=ri2*ri2*ri2
      er=ealpha/ri1
      ferfc=erfc(er)
      fderfc=ealpha*derfc(er)
      eq=eq+fact*ri1*ferfc
      e6=e6+fact*ri6
      e12=e12+fact*ri6*ri6
      ff=(q*(ri1*ferfc-fderfc)+(cf12*ri6-cf6)*ri6)*ri2
      df=ff*rx
      fw(iwm,1,iwa,ipww)=fw(iwm,1,iwa,ipww)+df
      fw(jwm,1,jwa,ipww)=fw(jwm,1,jwa,ipww)-df
      zw(1,1,ipww)=zw(1,1,ipww)-df*rwc(jwm,1)
      zw(2,1,ipww)=zw(2,1,ipww)-df*rwc(jwm,2)
      zw(3,1,ipww)=zw(3,1,ipww)-df*rwc(jwm,3)
      df=ff*ry
      fw(iwm,2,iwa,ipww)=fw(iwm,2,iwa,ipww)+df
      fw(jwm,2,jwa,ipww)=fw(jwm,2,jwa,ipww)-df
      zw(1,2,ipww)=zw(1,2,ipww)-df*rwc(jwm,1)
      zw(2,2,ipww)=zw(2,2,ipww)-df*rwc(jwm,2)
      zw(3,2,ipww)=zw(3,2,ipww)-df*rwc(jwm,3)
      df=ff*rz
      fw(iwm,3,iwa,ipww)=fw(iwm,3,iwa,ipww)+df
      fw(jwm,3,jwa,ipww)=fw(jwm,3,jwa,ipww)-df
      zw(1,3,ipww)=zw(1,3,ipww)-df*rwc(jwm,1)
      zw(2,3,ipww)=zw(2,3,ipww)-df*rwc(jwm,2)
      zw(3,3,ipww)=zw(3,3,ipww)-df*rwc(jwm,3)
  108 continue
      eww(7,ipww)=eww(7,ipww)+c12*e12-c6*e6
      eww(8,ipww)=eww(8,ipww)+q*eq
      endif
  106 continue
  105 continue
      else
      do 115 iwa=1,nwa
      qi=chg(iwq(iwa),1,iset)
      dqi=zero
      p2qi=zero
      p3qi=zero
      if(ipert2) p2qi=chg(iwq(iwa),1,2)
      if(ipert3) p3qi=chg(iwq(iwa),1,3)
      if(ithint) dqi=chg(iwq(iwa),1,4)
      iptr=iwatm(iwa)
      xix=xw(iwm,1,iwa)
      xiy=xw(iwm,2,iwa)
      xiz=xw(iwm,3,iwa)
      do 116 jwa=1,nwa
      qj=chg(iwq(jwa),1,iset)
      q=qi*qj
      c6=vdw(iptr,iwatm(jwa),1,iset)
      c12=vdw(iptr,iwatm(jwa),3,iset)
      cf6=six*c6
      cf12=twelve*c12
      eq=zero
      e6=zero
      e12=zero
      do 117 jnum=1,lwwin(iw,ipww)
      jwm=lwwj(inum+jnum)
      ljd=iand(idt(jwm),mdynam).eq.ldynam
      fact=one
      if(.not.lid.or..not.ljd) fact=half
      rx=xix-xw(jwm,1,jwa)-rwx(jwm,1)
      ry=xiy-xw(jwm,2,jwa)-rwx(jwm,2)
      rz=xiz-xw(jwm,3,jwa)-rwx(jwm,3)
      ri2=one/(rx*rx+ry*ry+rz*rz)
      ri1=sqrt(ri2)
      ri6=ri2*ri2*ri2
      eq=eq+fact*ri1
      e6=e6+fact*ri6
      e12=e12+fact*ri6*ri6
      ff=(q*ri1+(cf12*ri6-cf6)*ri6)*ri2
      df=ff*rx
      fw(iwm,1,iwa,ipww)=fw(iwm,1,iwa,ipww)+df
      fw(jwm,1,jwa,ipww)=fw(jwm,1,jwa,ipww)-df
      zw(1,1,ipww)=zw(1,1,ipww)-df*rwc(jwm,1)
      zw(2,1,ipww)=zw(2,1,ipww)-df*rwc(jwm,2)
      zw(3,1,ipww)=zw(3,1,ipww)-df*rwc(jwm,3)
      df=ff*ry
      fw(iwm,2,iwa,ipww)=fw(iwm,2,iwa,ipww)+df
      fw(jwm,2,jwa,ipww)=fw(jwm,2,jwa,ipww)-df
      zw(1,2,ipww)=zw(1,2,ipww)-df*rwc(jwm,1)
      zw(2,2,ipww)=zw(2,2,ipww)-df*rwc(jwm,2)
      zw(3,2,ipww)=zw(3,2,ipww)-df*rwc(jwm,3)
      df=ff*rz
      fw(iwm,3,iwa,ipww)=fw(iwm,3,iwa,ipww)+df
      fw(jwm,3,jwa,ipww)=fw(jwm,3,jwa,ipww)-df
      zw(1,3,ipww)=zw(1,3,ipww)-df*rwc(jwm,1)
      zw(2,3,ipww)=zw(2,3,ipww)-df*rwc(jwm,2)
      zw(3,3,ipww)=zw(3,3,ipww)-df*rwc(jwm,3)
  117 continue
      eww(7,ipww)=eww(7,ipww)+c12*e12-c6*e6
      eww(8,ipww)=eww(8,ipww)+q*eq
      if(ithint) then
      deriv(2,ipww)=deriv(2,ipww)+
     + vdw(iptr,iwatm(jwa),3,4)*e12-vdw(iptr,iwatm(jwa),1,4)*c6
      deriv(4,ipww)=deriv(4,ipww)+(qi*chg(iwq(jwa),1,4)+qj*dqi)*eq
      endif
      if(ipert2) then
      ep2(ipww)=ep2(ipww)+(p2qi*chg(iwq(jwa),1,2)-q)*eq+
     + (vdw(iptr,iwatm(jwa),3,2)-c12)*e12-
     + (vdw(iptr,iwatm(jwa),1,2)-c6)*e6
      endif
      if(ipert3) then
      ep3(ipww)=ep3(ipww)+(p3qi*chg(iwq(jwa),1,3)-q)*eq+
     + (vdw(iptr,iwatm(jwa),3,3)-c12)*e12-
     + (vdw(iptr,iwatm(jwa),1,3)-c6)*e6
      endif
  116 continue
  115 continue
      endif
  102 continue
  101 continue
      return
      endif
#endif

cx new stuff end
c
c     calculation of solvent-solvent intermolecular energies and forces
c
c     subtract 1 from first molecule index for use as offset
c
      iwfr=iwfrom-1
c
c     loop over short and long range parts
c
      do 1 ipww=1,lpww
c
c     Evaluate the outer index array
c
      nwwlen(ipww)=0
      lwwndx(0,ipww)=0
      number=0
      do 2 iwm=1,nwloc
      if(number+lwwin(iwm,ipww).gt.mscr) then
      nwwlen(ipww)=nwwlen(ipww)+1
      lwwndx(nwwlen(ipww),ipww)=iwm-1
      number=0
      endif
      number=number+lwwin(iwm,ipww)
    2 continue
      if(number.gt.0) then
      nwwlen(ipww)=nwwlen(ipww)+1
      lwwndx(nwwlen(ipww),ipww)=nwloc
      endif
c
c     loop over number of cycles to complete pairlist
c
      do 3 iwpm=1,nwwlen(ipww)
      nax=0
c
c     collect coordinates into workarrays
c
      do 4 iwm=lwwndx(iwpm-1,ipww)+1,lwwndx(iwpm,ipww)
      iwpj=lwwjpt(iwm,ipww)-1
      do 5 iwmn=1,lwwin(iwm,ipww)
      lwwptr=lwwj(iwpj+iwmn)
      rwc(nax+iwmn,1)=xwm(iwfr+iwm,1)-xwm(lwwptr,1)
      rwc(nax+iwmn,2)=xwm(iwfr+iwm,2)-xwm(lwwptr,2)
      rwc(nax+iwmn,3)=xwm(iwfr+iwm,3)-xwm(lwwptr,3)
      facu(nax+iwmn)=one
c      if( (iand(idt(iwm),mdynam).eq.ldynam.and.
c     + iand(idt(lwwptr),mdynam).ne.ldynam).or.
c     + (iand(idt(iwm),mdynam).ne.ldynam.and.
c     + iand(idt(lwwptr),mdynam).eq.ldynam) ) facu(nax+iwmn)=half
      if(iand(idt(iwm),mdynam).ne.ldynam.and.
     + iand(idt(lwwptr),mdynam).ne.ldynam) facu(nax+iwmn)=zero
      if(includ.eq.1) facu(nax+iwmn)=one
    5 continue
c
      do 6 iwa=1,mwa
      do 7 iwmn=1,lwwin(iwm,ipww)
      lwwptr=lwwj(iwpj+iwmn)
      xi(nax+iwmn,1,iwa)=xw(iwfr+iwm,1,iwa)
      xi(nax+iwmn,2,iwa)=xw(iwfr+iwm,2,iwa)
      xi(nax+iwmn,3,iwa)=xw(iwfr+iwm,3,iwa)
      xj(nax+iwmn,1,iwa)=xw(lwwptr,1,iwa)
      xj(nax+iwmn,2,iwa)=xw(lwwptr,2,iwa)
      xj(nax+iwmn,3,iwa)=xw(lwwptr,3,iwa)
#if defined(CAFE_POLARIZATION)
      pl(nax+iwmn,1,iwa)=pw(iwfr+iwm,1,iwa,1)
      pl(nax+iwmn,2,iwa)=pw(iwfr+iwm,2,iwa,1)
      pl(nax+iwmn,3,iwa)=pw(iwfr+iwm,3,iwa,1)
      pj(nax+iwmn,1,iwa)=pw(lwwptr,1,iwa,1)
      pj(nax+iwmn,2,iwa)=pw(lwwptr,2,iwa,1)
      pj(nax+iwmn,3,iwa)=pw(lwwptr,3,iwa,1)
#endif
    7 continue
    6 continue
      if(lpbc) then
      call cf_pbc(0,rwc,mscr,rwx,mscr,nax,1,lwwin(iwm,ipww))
      do 8 iwmn=1,lwwin(iwm,ipww)
      rwc(nax+iwmn,1)=rwc(nax+iwmn,1)-rwx(iwmn,1)
      rwc(nax+iwmn,2)=rwc(nax+iwmn,2)-rwx(iwmn,2)
      rwc(nax+iwmn,3)=rwc(nax+iwmn,3)-rwx(iwmn,3)
    8 continue
      do 9 iwa=1,mwa
      do 10 iwmn=1,lwwin(iwm,ipww)
      lwwptr=lwwj(iwpj+iwmn)
      xj(nax+iwmn,1,iwa)=xj(nax+iwmn,1,iwa)+rwx(iwmn,1)
      xj(nax+iwmn,2,iwa)=xj(nax+iwmn,2,iwa)+rwx(iwmn,2)
      xj(nax+iwmn,3,iwa)=xj(nax+iwmn,3,iwa)+rwx(iwmn,3)
   10 continue
    9 continue
      endif
c
      nax=nax+lwwin(iwm,ipww)
    4 continue
c
c     initializations
c
c      if(npener.ne.0) then
c      do 12 iax=1,nax
c      u(iax)=zero
c   12 continue
c      endif
c
c     loops over number of atoms in a solvent molecule
c
#if defined(CAFE_POLARIZATION)
      qfaci=one/qfac
#endif
      do 13 iwa=1,mwa
      qi=chg(iwq(iwa),1,iset)
#if defined(CAFE_POLARIZATION)
      pai=chg(iwq(iwa),2,iset)
      qai=qfaci*qi
#endif
      do 14 jwa=1,mwa
      qj=chg(iwq(jwa),1,iset)
      q=qi*qj
#if defined(CAFE_POLARIZATION)
      paj=chg(iwq(jwa),2,iset)
      qaj=qfaci*qj
#endif
c
      do 15 iax=1,nax
      f(iax)=zero
      rwx(iax,1)=xi(iax,1,iwa)-xj(iax,1,jwa)
      rwx(iax,2)=xi(iax,2,iwa)-xj(iax,2,jwa)
      rwx(iax,3)=xi(iax,3,iwa)-xj(iax,3,jwa)
      rwi2(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      rwi1(iax)=sqrt(rwi2(iax))
   15 continue
c
c
c     van der Waals contribution
c     --------------------------
c
      iptr=iwatm(iwa)
      jptr=iwatm(jwa)
      c6=vdw(iptr,jptr,1,iset)
      cf6=six*c6
      c12=vdw(iptr,jptr,3,iset)
      cf12=twelve*c12
c
      eterml=zero
      if(c6.ne.zero.or.c12.ne.zero) then
      ewwl6=zero
      ewwl12=zero
      do 20 iax=1,nax
      rwi6(iax)=rwi2(iax)*rwi2(iax)*rwi2(iax)
      ewwl6=ewwl6+facu(iax)*rwi6(iax)
      ewwl12=ewwl12+facu(iax)*rwi6(iax)*rwi6(iax)
      f(iax)=f(iax)+(cf12*rwi6(iax)-cf6)*rwi6(iax)*rwi2(iax)
   20 continue
      eterml=c12*ewwl12-c6*ewwl6
      eww(7,ipww)=eww(7,ipww)+eterml
      endif
c
#if !defined(CAFE_POLARIZATION)
c
c     electrostatic contribution
c     --------------------------
c
      ewwqsm=zero
      if(q.ne.zero) then
      if(ipme.eq.0) then
      do 16 iax=1,nax
      ewwqsm=ewwqsm+facu(iax)*rwi1(iax)
      f(iax)=f(iax)+q*rwi1(iax)*rwi2(iax)
   16 continue
      else
      do 17 iax=1,nax
      ferfc=erfc(ealpha/rwi1(iax))
      fderfc=ealpha*derfc(ealpha/rwi1(iax))
      ewwqsm=ewwqsm+facu(iax)*ferfc*rwi1(iax)
      f(iax)=f(iax)+q*rwi2(iax)*(ferfc*rwi1(iax)-fderfc)
   17 continue
      endif
c
c     reaction field contribution
c     ---------------------------
c
      if(ireact.ne.0) then
      do 19 iax=1,nax
      eww(8,ipww)=eww(8,ipww)+facu(iax)*q*rffww/rwi2(iax)
      f(iax)=f(iax)-two*q*rffww
   19 continue
      endif
      endif
#endif
c
c     force vectors
c     -------------
c
      if(iwa.eq.1) then
      do 22 iax=1,nax
      fj(iax,1,jwa)=(-f(iax))*rwx(iax,1)
      fj(iax,2,jwa)=(-f(iax))*rwx(iax,2)
      fj(iax,3,jwa)=(-f(iax))*rwx(iax,3)
   22 continue
      else
      do 23 iax=1,nax
      fj(iax,1,jwa)=fj(iax,1,jwa)-f(iax)*rwx(iax,1)
      fj(iax,2,jwa)=fj(iax,2,jwa)-f(iax)*rwx(iax,2)
      fj(iax,3,jwa)=fj(iax,3,jwa)-f(iax)*rwx(iax,3)
   23 continue
      endif
c
      if(jwa.eq.1) then
      do 24 iax=1,nax
      fi(iax,1,iwa)=f(iax)*rwx(iax,1)
      fi(iax,2,iwa)=f(iax)*rwx(iax,2)
      fi(iax,3,iwa)=f(iax)*rwx(iax,3)
   24 continue
      else
      do 25 iax=1,nax
      fi(iax,1,iwa)=fi(iax,1,iwa)+f(iax)*rwx(iax,1)
      fi(iax,2,iwa)=fi(iax,2,iwa)+f(iax)*rwx(iax,2)
      fi(iax,3,iwa)=fi(iax,3,iwa)+f(iax)*rwx(iax,3)
   25 continue
      endif
      do 26 iax=1,nax
      zw(1,1,ipww)=zw(1,1,ipww)-f(iax)*rwx(iax,1)*rwc(iax,1)
      zw(2,1,ipww)=zw(2,1,ipww)-f(iax)*rwx(iax,1)*rwc(iax,2)
      zw(3,1,ipww)=zw(3,1,ipww)-f(iax)*rwx(iax,1)*rwc(iax,3)
      zw(1,2,ipww)=zw(1,2,ipww)-f(iax)*rwx(iax,2)*rwc(iax,1)
      zw(2,2,ipww)=zw(2,2,ipww)-f(iax)*rwx(iax,2)*rwc(iax,2)
      zw(3,2,ipww)=zw(3,2,ipww)-f(iax)*rwx(iax,2)*rwc(iax,3)
      zw(1,3,ipww)=zw(1,3,ipww)-f(iax)*rwx(iax,3)*rwc(iax,1)
      zw(2,3,ipww)=zw(2,3,ipww)-f(iax)*rwx(iax,3)*rwc(iax,2)
      zw(3,3,ipww)=zw(3,3,ipww)-f(iax)*rwx(iax,3)*rwc(iax,3)
   26 continue
c
#if defined(CAFE_POLARIZATION)
c
c     electrostatic and polarization contribution
c     -------------------------------------------
c
      ewwqsm=zero
      ewwpsm=zero
      do 117 iax=1,nax
      pix=pai*pl(iax,1,iwa)
      piy=pai*pl(iax,2,iwa)
      piz=pai*pl(iax,3,iwa)
      pjx=paj*pj(iax,1,jwa)
      pjy=paj*pj(iax,2,jwa)
      pjz=paj*pj(iax,3,jwa)
      rx=-rwx(iax,1)
      ry=-rwx(iax,2)
      rz=-rwx(iax,3)
      ri1=rwi1(iax)
      ri2=rwi2(iax)
      ri3=qfac*qfac*ri1*ri2
      rmi=three*(rx*pix+ry*piy+rz*piz)*ri2
      rmj=three*(rx*pjx+ry*pjy+rz*pjz)*ri2
      if(ipolt.eq.1) then
      fri=((-qai)*qaj+qai*rmj-qaj*rmi)*ri3
      fmi=(qaj)*ri3
      fmj=(-qai)*ri3
      else
      rmm=three*(pix*pjx+piy*pjy+piz*pjz)*ri2
      fri=((-qai)*qaj+qai*rmj-qaj*rmi+5.0*rmi*rmj/three-rmm)*ri3
      fmi=(qaj-rmj)*ri3
      fmj=((-qai)-rmi)*ri3
      endif
      fi(iax,1,iwa)=fi(iax,1,iwa)+fri*rx+fmi*pix+fmj*pjx
      fi(iax,2,iwa)=fi(iax,2,iwa)+fri*ry+fmi*piy+fmj*pjy
      fi(iax,3,iwa)=fi(iax,3,iwa)+fri*rz+fmi*piz+fmj*pjz
      fj(iax,1,jwa)=fj(iax,1,jwa)-(fri*rx+fmi*pix+fmj*pjx)
      fj(iax,2,jwa)=fj(iax,2,jwa)-(fri*ry+fmi*piy+fmj*pjy)
      fj(iax,3,jwa)=fj(iax,3,jwa)-(fri*rz+fmi*piz+fmj*pjz)
      zw(1,1,ipww)=zw(1,1,ipww)-(fri*rx+fmi*pix+fmj*pjx)*rwc(iax,1)
      zw(2,1,ipww)=zw(2,1,ipww)-(fri*rx+fmi*pix+fmj*pjx)*rwc(iax,2)
      zw(3,1,ipww)=zw(3,1,ipww)-(fri*rx+fmi*pix+fmj*pjx)*rwc(iax,3)
      zw(1,2,ipww)=zw(1,2,ipww)-(fri*ry+fmi*piy+fmj*pjy)*rwc(iax,1)
      zw(2,2,ipww)=zw(2,2,ipww)-(fri*ry+fmi*piy+fmj*pjy)*rwc(iax,2)
      zw(3,2,ipww)=zw(3,2,ipww)-(fri*ry+fmi*piy+fmj*pjy)*rwc(iax,3)
      zw(1,3,ipww)=zw(1,3,ipww)-(fri*rz+fmi*piz+fmj*pjz)*rwc(iax,1)
      zw(2,3,ipww)=zw(2,3,ipww)-(fri*rz+fmi*piz+fmj*pjz)*rwc(iax,2)
      zw(3,3,ipww)=zw(3,3,ipww)-(fri*rz+fmi*piz+fmj*pjz)*rwc(iax,3)
      ewwpsm=ewwpsm+facu(iax)*(qai*rmj-qaj*rmi)*ri1
      ewwqsm=ewwqsm+facu(iax)*ri1
  117 continue
      etermp=-qfac*qfac*ewwpsm/three
      eww(8,ipww)=eww(8,ipww)+etermp
#endif
      etermq=q*ewwqsm
      eww(8,ipww)=eww(8,ipww)+etermq
c
c     Radial distribution functions
c
c      if(ifstep-1.eq.((ifstep-1)/nfrdf)*nfrdf .and. ngrww.gt.0) then
c      do 27 igc=1,ngc
c      if(ngt(igc).eq.1) then
c      if(iagc(igc).eq.iwa .and. jagc(igc).eq.jwa) then
c      igr=igrc(igc)
c      do 28 iax=1,nax
c      indx=int(one/(rwi1(iax)*drdf))
c      if(indx.le.ngl) rdf(indx,igr)=rdf(indx,igr)+rdfvol
c   28 continue
c      endif
c      endif
c   27 continue
c      endif
c
c     Thermodynamic integration
c
      if(ithint) then
      if(ith(2)) then
      c64=vdw(iwatm(iwa),iwatm(jwa),1,4)
      c124=vdw(iwatm(iwa),iwatm(jwa),3,4)
      ewwl6=zero
      ewwl12=zero
      do 29 iax=1,nax
      ewwl6=ewwl6+facu(iax)*rwi6(iax)
      ewwl12=ewwl12+facu(iax)*rwi6(iax)*rwi6(iax)
   29 continue
      deriv(2,ipww)=deriv(2,ipww)+c124*ewwl12-c64*ewwl6
      endif
      if(ith(4)) then
      qi=chg(iwq(iwa),1,iset)
      qj=chg(iwq(jwa),1,iset)
      qi4=chg(iwq(iwa),1,4)
      qj4=chg(iwq(jwa),1,4)
      dercon=zero
      if(ipme.eq.0) then
      do 30 iax=1,nax
      dercon=dercon+rwi1(iax)
   30 continue
      else
      do 130 iax=1,nax
      dercon=dercon+rwi1(iax)
  130 continue
      endif
      deriv(4,ipww)=deriv(4,ipww)+(qi*qj4+qj*qi4)*dercon
      if(ireact.ne.0) then
      dercon=zero
      do 31 iax=1,nax
      dercon=dercon+one/rwi2(iax)
   31 continue
      deriv(4,ipww)=deriv(4,ipww)+(qi*qj4+qj*qi4)*rffww*dercon
      endif
      endif
      endif
c
c     Thermodynamic perturbation 1
c
      if(ipert2) then
      if(ip2(2)) then
      c6p=vdw(iwatm(iwa),iwatm(jwa),1,2)
      c12p=vdw(iwatm(iwa),iwatm(jwa),3,2)
      do 32 iax=1,nax
      ep2(ipww)=ep2(ipww)+facu(iax)*(c12p*rwi6(iax)-c6p)*rwi6(iax)
   32 continue
      ep2(ipww)=ep2(ipww)-eterml
      endif
      if(ip2(4).or.ip2(5)) then
      qp=chg(iwq(iwa),1,2)*chg(iwq(jwa),1,2)
      ep2tmp=zero
      do 33 iax=1,nax
      rwx(iax,1)=xi(iax,1,iwa)-xj(iax,1,jwa)
      rwx(iax,2)=xi(iax,2,iwa)-xj(iax,2,jwa)
      rwx(iax,3)=xi(iax,3,iwa)-xj(iax,3,jwa)
      rwi2(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      rwi1(iax)=sqrt(rwi2(iax))
      if(ipme.eq.0) then
      ep2tmp=ep2tmp+facu(iax)*rwi1(iax)
      else
      ep2tmp=ep2tmp+facu(iax)*erfc(ealpha/rwi1(iax))*rwi1(iax)
      endif
   33 continue
      ep2(ipww)=ep2(ipww)+qp*ep2tmp-etermq
      if(ireact.ne.0) then
      ep2tmp=zero
      do 34 iax=1,nax
      ep2tmp=ep2tmp+facu(iax)/rwi2(iax)
   34 continue
      ep2(ipww)=ep2(ipww)+qp*rffww*ep2tmp
      endif
      endif
      endif
c
c     Thermodynamic perturbation 2
c
      if(ipert3) then
      if(ip3(2)) then
      c6p=vdw(iwatm(iwa),iwatm(jwa),1,3)
      c12p=vdw(iwatm(iwa),iwatm(jwa),3,3)
      do 35 iax=1,nax
      ep3(ipww)=ep3(ipww)+facu(iax)*(c12p*rwi6(iax)-c6p)*rwi6(iax)
   35 continue
      ep3(ipww)=ep3(ipww)-eterml
      endif
      if(ip2(4).or.ip2(5)) then
      qp=chg(iwatm(iwa),1,3)*chg(iwatm(jwa),1,3)
      ep3tmp=zero
      do 36 iax=1,nax
      rwx(iax,1)=xi(iax,1,iwa)-xj(iax,1,jwa)
      rwx(iax,2)=xi(iax,2,iwa)-xj(iax,2,jwa)
      rwx(iax,3)=xi(iax,3,iwa)-xj(iax,3,jwa)
      rwi2(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      rwi1(iax)=sqrt(rwi2(iax))
      if(ipme.eq.0) then
      ep3tmp=ep3tmp+facu(iax)*rwi1(iax)
      else
      ep3tmp=ep3tmp+facu(iax)*erfc(ealpha/rwi1(iax))*rwi1(iax)
      endif
   36 continue
      ep3(ipww)=ep3(ipww)+qp*ep3tmp-etermq
      if(ireact.ne.0) then
      ep3tmp=zero
      do 37 iax=1,nax
      ep3tmp=ep3tmp+facu(iax)/rwi2(iax)
   37 continue
      ep3(ipww)=ep3(ipww)+qp*rffww*ep3tmp
      endif
      endif
      endif
   14 continue
   13 continue
c
c     Update force arrays
c
      iax=0
      do 38 iwm=lwwndx(iwpm-1,ipww)+1,lwwndx(iwpm,ipww)
      iwpj=lwwjpt(iwm,ipww)-1
      do 39 iwa=1,mwa
      do 40 iwmn=1,lwwin(iwm,ipww)
      lwwptr=lwwj(iwpj+iwmn)
      fw(iwfr+iwm,1,iwa,ipww)=fw(iwfr+iwm,1,iwa,ipww)+fi(iax+iwmn,1,iwa)
      fw(iwfr+iwm,2,iwa,ipww)=fw(iwfr+iwm,2,iwa,ipww)+fi(iax+iwmn,2,iwa)
      fw(iwfr+iwm,3,iwa,ipww)=fw(iwfr+iwm,3,iwa,ipww)+fi(iax+iwmn,3,iwa)
      fw(lwwptr,1,iwa,ipww)=fw(lwwptr,1,iwa,ipww)+fj(iax+iwmn,1,iwa)
      fw(lwwptr,2,iwa,ipww)=fw(lwwptr,2,iwa,ipww)+fj(iax+iwmn,2,iwa)
      fw(lwwptr,3,iwa,ipww)=fw(lwwptr,3,iwa,ipww)+fj(iax+iwmn,3,iwa)
   40 continue
   39 continue
c
c     update energy arrays if appropriate print option was set
c
c      if(npener.ne.0) then
c      do 41 iwmn=1,lwwin(iwm,ipww)
c      lwwptr=lwwj(iwpj+iwmn)
c      uwmw(iwfr+iwm)=uwmw(iwfr+iwm)+u(iax+iwmn)
c      uwmw(lwwptr)=uwmw(lwwptr)+u(iax+iwmn)
c   41 continue
c      endif
c
      iax=iax+lwwin(iwm,ipww)
   38 continue
    3 continue
c
    1 continue
c
      return
      end
#if defined(CAFE_POLARIZATION)
      subroutine cf_fpsw(xs,xsm,fs,zs,ps,psp,
     + isga,isat,isdt,ismf,isml,isss,isq1,
     + isfrom,nums,xw,xwm,fw,pw,pwp,rtos,iwdt,lpbc,lpbcs,esw,esa,
     + vdw,chg,iwatm,iwq,iass,lswndx,lswjpt,lswin,lswj,
     + xi,xj,rwx,rwi1,rwi2,rwi6,rwc,f,fi,fj,facu,
     + rw,isal,isrx,list,pl,pj)
#elif defined(CAFE_FORCES)
      subroutine cf_fsw(xs,xsm,fs,zs,
     + isga,isat,isdt,ismf,isml,isss,isq1,
     + isfrom,nums,xw,xwm,fw,rtos,iwdt,lpbc,lpbcs,esw,esa,
     + vdw,chg,iwatm,iwq,iass,lswndx,lswjpt,lswin,lswj,
     + xi,xj,rwx,rwi1,rwi2,rwi6,rwc,f,fi,fj,facu,
     + rw,isal,isrx,list,dera)
#else
c error
#endif
c
c $Id: cf_f.fh 19708 2010-10-29 18:04:21Z d3y133 $
c
      implicit none
c
#include "cf_common.fh"
#include "cf_funcs_dec.fh"
#include "bitops_decls.fh"
c
      real*8 xs(msa,3),xsm(msm,3),fs(msa,3,2)
      real*8 zs(msf,3,3,2),esw(msf,mpe,2)
      integer isga(msa),isat(msa),isdt(msa),ismf(msa)
      integer isml(msa),isss(msa),isq1(msa)
      real*8 xw(mwm,3,mwa),xwm(mwm,3),fw(mwm,3,mwa,2),rtos(mwm)
      real*8 esa(nsa)
      integer iwdt(mwm)
      integer isfrom
      logical lpbc,lpbcs
c
      real*8 vdw(mat,mat,map,mset),chg(mqt,mqp,mset)
      integer iass(mat,mat),iwatm(mwa),iwq(mwa)
c
      real*8 xi(mscr,3),xj(mscr,3,mwa),rwx(mscr,3)
      real*8 rwi1(mscr),rwi2(mscr),rwi6(mscr),rw(mscr),rwc(mscr,3)
      real*8 f(mscr),fi(mscr,3,mwa),fj(mscr,3,mwa),facu(mscr)
      integer isal(mscr),isrx(mscr)
c
      integer lswj(*)
      integer nums,i
      integer lswndx(0:msa,2),lswjpt(nums,2),lswin(nums,2)
      integer list(0:msa)
c
#if defined(CAFE_FORCES)
      real*8 dera(6,nsatot)
#endif
#if defined(CAFE_POLARIZATION)
      real*8 ps(msa,3,2),psp(msa,3,2,2)
      real*8 pw(mwm,3,mwa,2),pwp(mwm,3,mwa,2,2)
      real*8 pl(mscr,3),pj(mscr,3,mwa)
#endif
c
      integer isatm,nswlen(2)
      integer isfr,iwm,ipsw,number,isa,ispm,isf,nax,ism
      integer ispj,ismn,lswptr,iwa,iax,iwatmi,ix,iy
      integer iwatyp
      real*8 c6,cf6,c12,cf12,sumen
      real*8 c64,c124,dercon,qj,qj4,derco1,derco2
      real*8 drvco1,drvco2,derco3,drvco3,c6p,c12p,etermq,eterml
#if defined(CAFE_FORCES)
      real*8 q,qwas,ferfc,fderfc
#endif
#if defined(CAFE_POLARIZATION)
      real*8 qi,qai,qaj,pai,paj,pix,piy,piz,pjx,pjy,pjz
      real*8 rx,ry,rz,ri1,ri2,ri3,rmi,rmj,fri,fmi,fmj,rmm
      real*8 zxx,zxy,zxz,zyx,zyy,zyz,zzx,zzy,zzz
      real*8 eswqsm,eswpsm,qfaci
#else
      real*8 boxi(3),dx,ri1,ri2,ri6,eq,eq0,e6,e8,e12,e14,ff,df
      real*8 xix,xiy,xiz,fact
      real*8 rx,ry,rz,er,p2qi,p3qi,dqi,qi,dd
      integer is,inum,jnum,jwm,iptr,jwa,iss,isg
      logical lid,ljd
#endif
      real*8 rtmp
c
#include "cf_funcs_sfn.fh"
#include "bitops_funcs.fh"
c
      etermq=zero
c
#if !defined(CAFE_POLARIZATION)
c
      isfr=isfrom-1
      boxi(1)=one/box(1)
      boxi(2)=one/box(2)
      boxi(3)=one/box(3)
      if(npbtyp.eq.1.and.nbxtyp.eq.0.and.icntrl.eq.2) then
      do 101 ipsw=1,npsw
      do 102 is=1,nums
      isa=isfr+is
      ism=isml(isa)
      isf=ismf(isa)
      iss=0
      inum=lswjpt(is,ipsw)-1
      if(iand(isss(isa),6).eq.2) iss=-1
      if(iand(isss(isa),6).eq.4) iss=-1
c      write(*,'(a,4i5)') 'iss ',isa,isss(isa),iand(isss(isa),6),iss
      isg=isga(isa)
      lid=iand(isdt(isa),mdynam).eq.ldynam
      qi=chg(isq1(isa),1,iset)
      iptr=isat(isa)
      xix=xs(isa,1)
      xiy=xs(isa,2)
      xiz=xs(isa,3)
c
      if(lpbc) then
      do 104 ix=1,3
      do 103 jnum=1,lswin(is,ipsw)
      jwm=lswj(inum+jnum)
      dx=xsm(ism,ix)-xwm(jwm,ix)
      rwc(jwm,ix)=dx
      if(abs(dx).gt.boxh(ix)) then
      rwx(jwm,ix)=anint(dx*boxi(ix))*box(ix)
      rwc(jwm,ix)=dx-rwx(jwm,ix)
      else
      rwx(jwm,ix)=zero
      endif
  103 continue
  104 continue
      endif
c
      if(.not.ithint.and..not.ipert2.and..not.ipert3) then
      do 106 jwa=1,nwa
      q=qi*chg(iwq(jwa),1,iset)
      c6=vdw(iptr,iwatm(jwa),1,iset)
      c12=vdw(iptr,iwatm(jwa),3,iset)
      cf6=six*c6
      cf12=twelve*c12
      eq=zero
      eq0=zero
      e6=zero
      e12=zero
      if(ipme.eq.0) then
      do 107 jnum=1,lswin(is,ipsw)
      jwm=lswj(inum+jnum)
      ljd=iand(iwdt(jwm),mdynam).eq.ldynam
      fact=one
      if(.not.lid.or..not.ljd) fact=half
      rx=xix-xw(jwm,1,jwa)-rwx(jwm,1)
      ry=xiy-xw(jwm,2,jwa)-rwx(jwm,2)
      rz=xiz-xw(jwm,3,jwa)-rwx(jwm,3)
      ri2=one/(rx*rx+ry*ry+rz*rz)
      if(iss.gt.0) ri2=one/(one/ri2+shift0(1))
      if(iss.lt.0) ri2=one/(one/ri2+shift1(1))
      ri1=sqrt(ri2)
      ri6=ri2*ri2*ri2
      eq=eq+fact*ri1
      e6=e6+fact*ri6
      e12=e12+fact*ri6*ri6
      ff=(q*ri1+(cf12*ri6-cf6)*ri6)*ri2
      df=ff*rx
      fs(isa,1,ipsw)=fs(isa,1,ipsw)+df
      fw(jwm,1,jwa,ipsw)=fw(jwm,1,jwa,ipsw)-df
      zs(isf,1,1,ipsw)=zs(isf,1,1,ipsw)-half*df*rwc(jwm,1)
      zs(isf,2,1,ipsw)=zs(isf,2,1,ipsw)-half*df*rwc(jwm,2)
      zs(isf,3,1,ipsw)=zs(isf,3,1,ipsw)-half*df*rwc(jwm,3)
      zw(1,1,ipsw)=zw(1,1,ipsw)-half*df*rwc(jwm,1)
      zw(2,1,ipsw)=zw(2,1,ipsw)-half*df*rwc(jwm,2)
      zw(3,1,ipsw)=zw(3,1,ipsw)-half*df*rwc(jwm,3)
      df=ff*ry
      fs(isa,2,ipsw)=fs(isa,2,ipsw)+df
      fw(jwm,2,jwa,ipsw)=fw(jwm,2,jwa,ipsw)-df
      zs(isf,1,2,ipsw)=zs(isf,1,2,ipsw)-half*df*rwc(jwm,1)
      zs(isf,2,2,ipsw)=zs(isf,2,2,ipsw)-half*df*rwc(jwm,2)
      zs(isf,3,2,ipsw)=zs(isf,3,2,ipsw)-half*df*rwc(jwm,3)
      zw(1,2,ipsw)=zw(1,2,ipsw)-half*df*rwc(jwm,1)
      zw(2,2,ipsw)=zw(2,2,ipsw)-half*df*rwc(jwm,2)
      zw(3,2,ipsw)=zw(3,2,ipsw)-half*df*rwc(jwm,3)
      df=ff*rz
      fs(isa,3,ipsw)=fs(isa,3,ipsw)+df
      fw(jwm,3,jwa,ipsw)=fw(jwm,3,jwa,ipsw)-df
      zs(isf,1,3,ipsw)=zs(isf,1,3,ipsw)-half*df*rwc(jwm,1)
      zs(isf,2,3,ipsw)=zs(isf,2,3,ipsw)-half*df*rwc(jwm,2)
      zs(isf,3,3,ipsw)=zs(isf,3,3,ipsw)-half*df*rwc(jwm,3)
      zw(1,3,ipsw)=zw(1,3,ipsw)-half*df*rwc(jwm,1)
      zw(2,3,ipsw)=zw(2,3,ipsw)-half*df*rwc(jwm,2)
      zw(3,3,ipsw)=zw(3,3,ipsw)-half*df*rwc(jwm,3)
  107 continue
      esw(isf,5,ipsw)=esw(isf,5,ipsw)+c12*e12-c6*e6
      esw(isf,6,ipsw)=esw(isf,6,ipsw)+q*eq
      if(npener.ne.0) esa(isg)=esa(isg)+c12*e12-c6*e6+q*eq
      else
      do 108 jnum=1,lswin(is,ipsw)
      jwm=lswj(inum+jnum)
      ljd=iand(iwdt(jwm),mdynam).eq.ldynam
      fact=one
      if(.not.lid.or..not.ljd) fact=half
      rx=xix-xw(jwm,1,jwa)-rwx(jwm,1)
      ry=xiy-xw(jwm,2,jwa)-rwx(jwm,2)
      rz=xiz-xw(jwm,3,jwa)-rwx(jwm,3)
      ri2=one/(rx*rx+ry*ry+rz*rz)
      if(iss.gt.0) ri2=one/(one/ri2+shift0(1))
      if(iss.lt.0) ri2=one/(one/ri2+shift1(1))
      ri1=sqrt(ri2)
      ri6=ri2*ri2*ri2
      er=ealpha/ri1
      ferfc=erfc(er)
      fderfc=ealpha*derfc(er)
      eq0=eq0+fact*ri1
      eq=eq+fact*ri1*ferfc
      e6=e6+fact*ri6
      e12=e12+fact*ri6*ri6
      ff=(q*(ri1*ferfc-fderfc)+(cf12*ri6-cf6)*ri6)*ri2
      df=ff*rx
      fs(isa,1,ipsw)=fs(isa,1,ipsw)+df
      fw(jwm,1,jwa,ipsw)=fw(jwm,1,jwa,ipsw)-df
      zs(isf,1,1,ipsw)=zs(isf,1,1,ipsw)-half*df*rwc(jwm,1)
      zs(isf,2,1,ipsw)=zs(isf,2,1,ipsw)-half*df*rwc(jwm,2)
      zs(isf,3,1,ipsw)=zs(isf,3,1,ipsw)-half*df*rwc(jwm,3)
      zw(1,1,ipsw)=zw(1,1,ipsw)-half*df*rwc(jwm,1)
      zw(2,1,ipsw)=zw(2,1,ipsw)-half*df*rwc(jwm,2)
      zw(3,1,ipsw)=zw(3,1,ipsw)-half*df*rwc(jwm,3)
      df=ff*ry
      fs(isa,2,ipsw)=fs(isa,2,ipsw)+df
      fw(jwm,2,jwa,ipsw)=fw(jwm,2,jwa,ipsw)-df
      zs(isf,1,2,ipsw)=zs(isf,1,2,ipsw)-half*df*rwc(jwm,1)
      zs(isf,2,2,ipsw)=zs(isf,2,2,ipsw)-half*df*rwc(jwm,2)
      zs(isf,3,2,ipsw)=zs(isf,3,2,ipsw)-half*df*rwc(jwm,3)
      zw(1,2,ipsw)=zw(1,2,ipsw)-half*df*rwc(jwm,1)
      zw(2,2,ipsw)=zw(2,2,ipsw)-half*df*rwc(jwm,2)
      zw(3,2,ipsw)=zw(3,2,ipsw)-half*df*rwc(jwm,3)
      df=ff*rz
      fs(isa,3,ipsw)=fs(isa,3,ipsw)+df
      fw(jwm,3,jwa,ipsw)=fw(jwm,3,jwa,ipsw)-df
      zs(isf,1,3,ipsw)=zs(isf,1,3,ipsw)-half*df*rwc(jwm,1)
      zs(isf,2,3,ipsw)=zs(isf,2,3,ipsw)-half*df*rwc(jwm,2)
      zs(isf,3,3,ipsw)=zs(isf,3,3,ipsw)-half*df*rwc(jwm,3)
      zw(1,3,ipsw)=zw(1,3,ipsw)-half*df*rwc(jwm,1)
      zw(2,3,ipsw)=zw(2,3,ipsw)-half*df*rwc(jwm,2)
      zw(3,3,ipsw)=zw(3,3,ipsw)-half*df*rwc(jwm,3)
  108 continue
      esw(isf,5,ipsw)=esw(isf,5,ipsw)+c12*e12-c6*e6
      esw(isf,6,ipsw)=esw(isf,6,ipsw)+q*eq
      if(npener.ne.0) esa(isg)=esa(isg)+c12*e12-c6*e6+q*eq
      endif
  106 continue
      else
      dqi=zero
      p2qi=zero
      p3qi=zero
      if(ipert2) p2qi=chg(isq1(isa),1,2)
      if(ipert3) p3qi=chg(isq1(isa),1,3)
      if(ithint) dqi=chg(isq1(isa),1,4)
      do 116 jwa=1,nwa
      q=qi*chg(iwq(jwa),1,iset)
      c6=vdw(iptr,iwatm(jwa),1,iset)
      c12=vdw(iptr,iwatm(jwa),3,iset)
      cf6=six*c6
      cf12=twelve*c12
      eq=zero
      eq0=zero
      e6=zero
      e8=zero
      e12=zero
      e14=zero
      do 117 jnum=1,lswin(is,ipsw)
      jwm=lswj(inum+jnum)
      ljd=iand(iwdt(jwm),mdynam).eq.ldynam
      fact=one
      if(.not.lid.or..not.ljd) fact=half
      rx=xix-xw(jwm,1,jwa)-rwx(jwm,1)
      ry=xiy-xw(jwm,2,jwa)-rwx(jwm,2)
      rz=xiz-xw(jwm,3,jwa)-rwx(jwm,3)
      ri2=one/(rx*rx+ry*ry+rz*rz)
      if(iss.gt.0) ri2=one/(one/ri2+shift0(1))
      if(iss.lt.0) ri2=one/(one/ri2+shift1(1))
      ri1=sqrt(ri2)
      ri6=ri2*ri2*ri2
      if(ipme.eq.0) then
      eq=eq+fact*ri1
      ff=(q*ri1+(cf12*ri6-cf6)*ri6)*ri2
      else
      er=ealpha/ri1
      ferfc=erfc(er)
      fderfc=ealpha*derfc(er)
      eq=eq+fact*ri1*ferfc
      ff=(q*(ri1*ferfc-fderfc)+(cf12*ri6-cf6)*ri6)*ri2
      endif
      e6=e6+fact*ri6
      e12=e12+fact*ri6*ri6
      if(iss.ne.0) then
      e8=e8+fact*ri6*ri2
      e14=e14+fact*ri6*ri6*ri2
      endif
      df=ff*rx
      fs(isa,1,ipsw)=fs(isa,1,ipsw)+df
      fw(jwm,1,jwa,ipsw)=fw(jwm,1,jwa,ipsw)-df
      zs(isf,1,1,ipsw)=zs(isf,1,1,ipsw)-half*df*rwc(jwm,1)
      zs(isf,2,1,ipsw)=zs(isf,2,1,ipsw)-half*df*rwc(jwm,2)
      zs(isf,3,1,ipsw)=zs(isf,3,1,ipsw)-half*df*rwc(jwm,3)
      zw(1,1,ipsw)=zw(1,1,ipsw)-half*df*rwc(jwm,1)
      zw(2,1,ipsw)=zw(2,1,ipsw)-half*df*rwc(jwm,2)
      zw(3,1,ipsw)=zw(3,1,ipsw)-half*df*rwc(jwm,3)
      df=ff*ry
      fs(isa,2,ipsw)=fs(isa,2,ipsw)+df
      fw(jwm,2,jwa,ipsw)=fw(jwm,2,jwa,ipsw)-df
      zs(isf,1,2,ipsw)=zs(isf,1,2,ipsw)-half*df*rwc(jwm,1)
      zs(isf,2,2,ipsw)=zs(isf,2,2,ipsw)-half*df*rwc(jwm,2)
      zs(isf,3,2,ipsw)=zs(isf,3,2,ipsw)-half*df*rwc(jwm,3)
      zw(1,2,ipsw)=zw(1,2,ipsw)-half*df*rwc(jwm,1)
      zw(2,2,ipsw)=zw(2,2,ipsw)-half*df*rwc(jwm,2)
      zw(3,2,ipsw)=zw(3,2,ipsw)-half*df*rwc(jwm,3)
      df=ff*rz
      fs(isa,3,ipsw)=fs(isa,3,ipsw)+df
      fw(jwm,3,jwa,ipsw)=fw(jwm,3,jwa,ipsw)-df
      zs(isf,1,3,ipsw)=zs(isf,1,3,ipsw)-half*df*rwc(jwm,1)
      zs(isf,2,3,ipsw)=zs(isf,2,3,ipsw)-half*df*rwc(jwm,2)
      zs(isf,3,3,ipsw)=zs(isf,3,3,ipsw)-half*df*rwc(jwm,3)
      zw(1,3,ipsw)=zw(1,3,ipsw)-half*df*rwc(jwm,1)
      zw(2,3,ipsw)=zw(2,3,ipsw)-half*df*rwc(jwm,2)
      zw(3,3,ipsw)=zw(3,3,ipsw)-half*df*rwc(jwm,3)
  117 continue
      esw(isf,5,ipsw)=esw(isf,5,ipsw)+c12*e12-c6*e6
      esw(isf,6,ipsw)=esw(isf,6,ipsw)+q*eq
      if(npener.ne.0) esa(isg)=esa(isg)+c12*e12-c6*e6+q*eq
      if(ithint) then
      dd=half*(vdw(iptr,iwatm(jwa),3,4)*e12-vdw(iptr,iwatm(jwa),1,4)*c6)
      if(iss.eq.0) dd=dd+dd
      if(iss.gt.0) dd=dd+shift0(4)*(e8*vdw(iptr,iwatm(jwa),1,4)-
     + e14*vdw(iptr,iwatm(jwa),3,4))
      if(iss.lt.0) dd=dd+shift1(4)*(e8*vdw(iptr,iwatm(jwa),1,4)-
     + e14*vdw(iptr,iwatm(jwa),3,4))
      deriv(3,ipsw)=deriv(3,ipsw)+dd
      deriv(14,ipsw)=deriv(14,ipsw)+dd
      dd=half*(qi*chg(iwq(jwa),1,4)+chg(iwq(jwa),1,iset)*dqi)*eq0
      deriv(5,ipsw)=deriv(5,ipsw)+dd
      deriv(16,ipsw)=deriv(16,ipsw)+dd
      endif
      if(ipert2) then
      ep2(ipsw)=ep2(ipsw)+(p2qi*chg(iwq(jwa),1,2)-q)*eq+
     + (vdw(iptr,iwatm(jwa),3,2)-c12)*e12-
     + (vdw(iptr,iwatm(jwa),1,2)-c6)*e6
      endif
      if(ipert3) then
      ep3(ipsw)=ep3(ipsw)+(p3qi*chg(iwq(jwa),1,3)-q)*eq+
     + (vdw(iptr,iwatm(jwa),3,3)-c12)*e12-
     + (vdw(iptr,iwatm(jwa),1,3)-c6)*e6
      endif
  116 continue
      endif
c
  102 continue
  101 continue
      return
      endif
#endif
c
cx new stuff end
c     this subroutine evaluates the solute-solvent forces for nums
c     solute atoms starting from isfrom. the interacting solvent
c     molecules are determined from the pairlist.
c
      isfr=isfrom-1
c
      if(nrwrec.gt.0) then
      do 1 iwm=1,mwm
      rtos(iwm)=zero
    1 continue
      endif
c
#if defined(CAFE_POLARIZATION)
      qfaci=one/qfac
#endif
c
      do 2 ipsw=1,lpsw
c
c     evaluate outer index array
c
      nswlen(ipsw)=0
      lswndx(0,ipsw)=0
      number=0
      do 3 isa=1,nums
      if(number+lswin(isa,ipsw).gt.mscr .or.
     + (ismf(isfr+isa).ne.ismf(isfr+isa-1).and.
     + number.gt.0)) then
      nswlen(ipsw)=nswlen(ipsw)+1
      lswndx(nswlen(ipsw),ipsw)=isa-1
      number=0
      endif
      number=number+lswin(isa,ipsw)
    3 continue
      if(number.gt.0) then
      nswlen(ipsw)=nswlen(ipsw)+1
      lswndx(nswlen(ipsw),ipsw)=nums
      endif
c
      do 4 ispm=1,nswlen(ipsw)
      isf=ismf(isfr+lswndx(ispm,ipsw))
      do 5 isa=0,nums
      list(isa)=0
    5 continue
      nax=0
c
      do 6 isa=lswndx(ispm-1,ipsw)+1,lswndx(ispm,ipsw)
      ispj=lswjpt(isa,ipsw)-1
      ism=isml(isfr+isa)
      if(lpbc.or.lpbcs.or.ism.eq.0) then
      do 7 ismn=1,lswin(isa,ipsw)
      lswptr=lswj(ispj+ismn)
      rwc(nax+ismn,1)=xs(isfr+isa,1)-xwm(lswptr,1)
      rwc(nax+ismn,2)=xs(isfr+isa,2)-xwm(lswptr,2)
      rwc(nax+ismn,3)=xs(isfr+isa,3)-xwm(lswptr,3)
      isrx(nax+ismn)=0
    7 continue
      if(lpbc.or.lpbcs)
     + call cf_pbc(0,rwc,mscr,rwx,mscr,nax,1,lswin(isa,ipsw))
      endif
      if(ism.gt.0) then
      do 8 ismn=1,lswin(isa,ipsw)
      lswptr=lswj(ispj+ismn)
      rwc(nax+ismn,1)=xsm(ism,1)-xwm(lswptr,1)
      rwc(nax+ismn,2)=xsm(ism,2)-xwm(lswptr,2)
      rwc(nax+ismn,3)=xsm(ism,3)-xwm(lswptr,3)
    8 continue
      endif
c
c      if(lssscl) then
c      isrst=iand(isss(isfr+isa),3)
c      isatm=isat(isfr+isa)
c      do 9 iwa=1,mwa
c      iasst=iass(isatm,iwatm(iwa))
c      if(iasst.le.0.or.iasst.ge.3.or.isrst.ne.iasst) isrst=0
c    9 continue
c      do 10 ismn=1,lswin(isa,ipsw)
c      isrx(nax+ismn)=isrst
c   10 continue
c      endif
c
c      write(*,'(4i5,2f12.6)') 
c     + lssscl,isga(isa),isss(isfr+isa),iand(isss(isfr+isa),6),
c     + shift0(1),shift1(1)
      if(lssscl) then
      do 10 ismn=1,lswin(isa,ipsw)
c      isrx(nax+ismn)=isss(isfr+isa)
      if(iand(isss(isfr+isa),6).eq.2) isrx(nax+ismn)=-1
      if(iand(isss(isfr+isa),6).eq.4) isrx(nax+ismn)=1
   10 continue
      endif
c
      if(iand(isdt(isfr+isa),mdynam).eq.ldynam) then
      do 11 ismn=1,lswin(isa,ipsw)
      lswptr=lswj(ispj+ismn)
      xi(nax+ismn,1)=xs(isfr+isa,1)
      xi(nax+ismn,2)=xs(isfr+isa,2)
      xi(nax+ismn,3)=xs(isfr+isa,3)
#if defined(CAFE_POLARIZATION)
      pl(nax+ismn,1)=ps(isfr+isa,1,1)
      pl(nax+ismn,2)=ps(isfr+isa,2,1)
      pl(nax+ismn,3)=ps(isfr+isa,3,1)
#endif
      isal(nax+ismn)=isfr+isa
c      if(iand(iwdt(lswptr),mdynam).ne.ldynam) then
c      facu(nax+ismn)=half
c      else
      facu(nax+ismn)=one
c      endif
c      if(includ.eq.1) facu(nax+ismn)=one
   11 continue
      else
      do 12 ismn=1,lswin(isa,ipsw)
      lswptr=lswj(ispj+ismn)
      xi(nax+ismn,1)=xs(isfr+isa,1)
      xi(nax+ismn,2)=xs(isfr+isa,2)
      xi(nax+ismn,3)=xs(isfr+isa,3)
#if defined(CAFE_POLARIZATION)
      pl(nax+ismn,1)=ps(isfr+isa,1,1)
      pl(nax+ismn,2)=ps(isfr+isa,2,1)
      pl(nax+ismn,3)=ps(isfr+isa,3,1)
#endif
      isal(nax+ismn)=isfr+isa
      if(iand(iwdt(lswptr),mdynam).eq.ldynam) then
      facu(nax+ismn)=one
      else
      facu(nax+ismn)=zero
      endif
      if(includ.eq.1) facu(nax+ismn)=one
   12 continue
      endif
c
      if(.not.lpbc.and..not.lpbcs) then
      do 13 iwa=1,mwa
      do 14 ismn=1,lswin(isa,ipsw)
      lswptr=lswj(ispj+ismn)
      xj(nax+ismn,1,iwa)=xw(lswptr,1,iwa)
      xj(nax+ismn,2,iwa)=xw(lswptr,2,iwa)
      xj(nax+ismn,3,iwa)=xw(lswptr,3,iwa)
#if defined(CAFE_POLARIZATION)
      pj(nax+ismn,1,iwa)=pw(lswptr,1,iwa,1)
      pj(nax+ismn,2,iwa)=pw(lswptr,2,iwa,1)
      pj(nax+ismn,3,iwa)=pw(lswptr,3,iwa,1)
#endif
   14 continue
   13 continue
      else
      do 15 ismn=1,lswin(isa,ipsw)
      rwc(nax+ismn,1)=rwc(nax+ismn,1)-rwx(ismn,1)
      rwc(nax+ismn,2)=rwc(nax+ismn,2)-rwx(ismn,2)
      rwc(nax+ismn,3)=rwc(nax+ismn,3)-rwx(ismn,3)
   15 continue
      do 16 iwa=1,mwa
      do 17 ismn=1,lswin(isa,ipsw)
      lswptr=lswj(ispj+ismn)
      xj(nax+ismn,1,iwa)=xw(lswptr,1,iwa)+rwx(ismn,1)
      xj(nax+ismn,2,iwa)=xw(lswptr,2,iwa)+rwx(ismn,2)
      xj(nax+ismn,3,iwa)=xw(lswptr,3,iwa)+rwx(ismn,3)
#if defined(CAFE_POLARIZATION)
      pj(nax+ismn,1,iwa)=pw(lswptr,1,iwa,1)
      pj(nax+ismn,2,iwa)=pw(lswptr,2,iwa,1)
      pj(nax+ismn,3,iwa)=pw(lswptr,3,iwa,1)
#endif
   17 continue
   16 continue
      endif
c
      nax=nax+lswin(isa,ipsw)
      list(isa)=nax
    6 continue
c
      do 22 iax=1,nax
      fi(iax,1,1)=zero
      fi(iax,2,1)=zero
      fi(iax,3,1)=zero
   22 continue
      do 23 iwa=1,mwa
      do 24 iax=1,nax
      fj(iax,1,iwa)=zero
      fj(iax,2,iwa)=zero
      fj(iax,3,iwa)=zero
   24 continue
   23 continue
c      if(npener.ne.0) then
c      do 25 iax=1,nax
c      u(iax)=zero
c   25 continue
c      endif
      do 26 iwa=1,mwa
      do 27 iax=1,nax
      f(iax)=zero
      rwx(iax,1)=xi(iax,1)-xj(iax,1,iwa)
      rwx(iax,2)=xi(iax,2)-xj(iax,2,iwa)
      rwx(iax,3)=xi(iax,3)-xj(iax,3,iwa)
      rwi2(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      rtmp=rwi2(iax)
      if(isrx(iax).gt.0) rwi2(iax)=one/(one/rwi2(iax)+shift0(1))
      if(isrx(iax).lt.0) rwi2(iax)=one/(one/rwi2(iax)+shift1(1))
c      write(*,'(3i5,2f12.6)')
c     + isga(isal(iax)),isal(iax),isrx(iax),rtmp,rwi2(iax)
   27 continue
c
c     Lennard-Jones interactions
c
      iwatmi=iwatm(iwa)
      eterml=zero
      do 28 iax=1,nax
      isa=isal(iax)
      isatm=isat(isa)
      c6=vdw(isatm,iwatmi,1,iset)
      cf6=six*c6
      c12=vdw(isatm,iwatmi,3,iset)
      cf12=twelve*c12
      rwi6(iax)=rwi2(iax)*rwi2(iax)*rwi2(iax)
      rw(iax)=facu(iax)*(c12*rwi6(iax)-c6)*rwi6(iax)
      eterml=eterml+rw(iax)
      if(npener.ne.0) then
      esa(isga(isa))=esa(isga(isa))+half*rw(iax)
      endif
      f(iax)=f(iax)+(cf12*rwi6(iax)-cf6)*rwi6(iax)*rwi2(iax)
   28 continue
      esw(isf,5,ipsw)=esw(isf,5,ipsw)+eterml
c
#if !defined(CAFE_POLARIZATION)
c
c     electrostatic interactions
c
      qwas=chg(iwq(iwa),1,iset)
      if(abs(qwas).gt.small.or.ithint.or.
     + (ifstep-1.eq.((ifstep-1)/nfrdf)*nfrdf.and.ngrsw.gt.0)) then
      do 29 iax=1,nax
      rwi1(iax)=sqrt(rwi2(iax))
   29 continue
      endif
      etermq=zero
      if(abs(qwas).gt.small) then
      if(ipme.eq.0) then
      do 30 iax=1,nax
      isa=isal(iax)
      q=qwas*chg(isq1(isa),1,iset)
      rw(iax)=facu(iax)*q*rwi1(iax)
      etermq=etermq+rw(iax)
      if(npener.ne.0) then
      esa(isga(isa))=esa(isga(isa))+half*rw(iax)
      endif
      f(iax)=f(iax)+q*rwi1(iax)*rwi2(iax)
   30 continue
      else
      do 31 iax=1,nax
      isa=isal(iax)
      q=qwas*chg(isq1(isa),1,iset)
      ferfc=erfc(ealpha/rwi1(iax))
      fderfc=ealpha*derfc(ealpha/rwi1(iax))
      rw(iax)=facu(iax)*q*rwi1(iax)
      etermq=etermq+ferfc*rw(iax)
      if(npener.ne.0) then
      esa(isga(isa))=esa(isga(isa))+half*rw(iax)
      endif
      f(iax)=f(iax)+q*rwi2(iax)*(ferfc*rwi1(iax)-fderfc)
   31 continue
      endif
      esw(isf,6,ipsw)=esw(isf,6,ipsw)+etermq
      endif
c
c     reaction field contribution
c
      if(ireact.ne.0) then
      do 32 iax=1,nax
      isa=isal(iax)
      q=qwas*chg(isq1(isa),1,iset)
      rw(iax)=facu(iax)*q*rffsw/rwi2(iax)
      if(npener.ne.0) then
      esa(isga(isa))=esa(isga(isa))+half*q*rffsw/rwi2(iax)
      endif
      f(iax)=f(iax)-two*rffsw*q
   32 continue
      do 33 isa=lswndx(ispm-1,ipsw)+1,lswndx(ispm,ipsw)
      if(list(isa).gt.list(isa-1)) then
      sumen=zero
      do 34 iax=list(isa-1)+1,list(isa)
      sumen=sumen+rw(iax)
   34 continue
      endif
   33 continue
      endif
#else
      qj=chg(iwq(iwa),1,iset)
      qaj=qfaci*qj
c      dqj=qwa(iwa,4)
c      dqaj=qfaci*dqj
      paj=chg(iwq(iwa),2,iset)
c      dpaj=pwa(iwa,4)
      eswqsm=zero
      eswpsm=zero
c      dswqsm=zero
c      dswqws=zero
c      dswqps=zero
c      dswpss=zero
c      dswpws=zero
      do 21 iax=1,nax
      isa=isal(iax)
      qi=chg(isq1(isa),1,iset)
c      dqi=qsa(isa,4,1)
      qai=qfaci*qi
c      dqai=qfaci*dqi
      pai=chg(isq1(isa),2,iset)
c      dpai=psa(isa,4)
      pix=pai*pl(iax,1)
      piy=pai*pl(iax,2)
      piz=pai*pl(iax,3)
      pjx=paj*pj(iax,1,iwa)
      pjy=paj*pj(iax,2,iwa)
      pjz=paj*pj(iax,3,iwa)
      rwx(iax,1)=xi(iax,1)-xj(iax,1,iwa)
      rwx(iax,2)=xi(iax,2)-xj(iax,2,iwa)
      rwx(iax,3)=xi(iax,3)-xj(iax,3,iwa)
      rx=-rwx(iax,1)
      ry=-rwx(iax,2)
      rz=-rwx(iax,3)
      rwi2(iax)=one/(rx**2+ry**2+rz**2)
      rwi1(iax)=sqrt(rwi2(iax))
      ri1=rwi1(iax)
      ri2=rwi2(iax)
      ri3=qfac*qfac*ri1*ri2
      rmi=three*(rx*pix+ry*piy+rz*piz)*ri2
      rmj=three*(rx*pjx+ry*pjy+rz*pjz)*ri2
      if(ipolt.eq.1) then
      fri=((-qai)*qaj+qai*rmj-qaj*rmi)*ri3
      fmi=(qaj)*ri3
      fmj=(-qai)*ri3
      else
      rmm=three*(pix*pjx+piy*pjy+piz*pjz)*ri2
      fri=((-qai)*qaj+qai*rmj-qaj*rmi+5.0*rmi*rmj/three-rmm)*ri3
      fmi=(qaj-rmj)*ri3
      fmj=((-qai)-rmi)*ri3
      endif
      fi(iax,1,1)=fi(iax,1,1)+fri*rx+fmi*pix+fmj*pjx
      fi(iax,2,1)=fi(iax,2,1)+fri*ry+fmi*piy+fmj*pjy
      fi(iax,3,1)=fi(iax,3,1)+fri*rz+fmi*piz+fmj*pjz
      fj(iax,1,iwa)=fj(iax,1,iwa)-(fri*rx+fmi*pix+fmj*pjx)
      fj(iax,2,iwa)=fj(iax,2,iwa)-(fri*ry+fmi*piy+fmj*pjy)
      fj(iax,3,iwa)=fj(iax,3,iwa)-(fri*rz+fmi*piz+fmj*pjz)
      eswqsm=eswqsm+qi*facu(iax)*ri1
      eswpsm=eswpsm+facu(iax)*(qai*rmj-qaj*rmi)*ri1  
c      if(ithint.ne.0) then
c      dpix=dpai*pl(iax,1)
c      dpiy=dpai*pl(iax,2)
c      dpiz=dpai*pl(iax,3)
c      dpjx=dpaj*pj(iax,1,jwa)
c      dpjy=dpaj*pj(iax,2,jwa)
c      dpjz=dpaj*pj(iax,3,jwa)
c      drmi=three*(rx*dpix+ry*dpiy+rz*dpiz)*ri2
c      drmj=three*(rx*dpjx+ry*dpjy+rz*dpjz)*ri2
c      dswqsm=dswqsm+dqi*facu(iax)*ri1
c      dswqws=dswqws+drmj*ri1
c      dswqps=dswqps+dqai*rmj*ri1
c      dswpss=dswpss-drmi*ri1
c      dswpws=dswpws+qai*drmj*ri1
c      endif
      zxx=(-half)*(fri*rx+fmi*pix+fmj*pjx)*rwc(iax,1)
      zyx=(-half)*(fri*rx+fmi*pix+fmj*pjx)*rwc(iax,2)
      zzx=(-half)*(fri*rx+fmi*pix+fmj*pjx)*rwc(iax,3)
      zxy=(-half)*(fri*ry+fmi*piy+fmj*pjy)*rwc(iax,1)
      zyy=(-half)*(fri*ry+fmi*piy+fmj*pjy)*rwc(iax,2)
      zzy=(-half)*(fri*ry+fmi*piy+fmj*pjy)*rwc(iax,3)
      zxz=(-half)*(fri*rz+fmi*piz+fmj*pjz)*rwc(iax,1)
      zyz=(-half)*(fri*rz+fmi*piz+fmj*pjz)*rwc(iax,2)
      zzz=(-half)*(fri*rz+fmi*piz+fmj*pjz)*rwc(iax,3)
      zw(1,1,ipsw)=zw(1,1,ipsw)+zxx
      zw(2,1,ipsw)=zw(2,1,ipsw)+zyx
      zw(3,1,ipsw)=zw(3,1,ipsw)+zzx
      zw(1,2,ipsw)=zw(1,2,ipsw)+zxy
      zw(2,2,ipsw)=zw(2,2,ipsw)+zyy
      zw(3,2,ipsw)=zw(3,2,ipsw)+zzy
      zw(1,3,ipsw)=zw(1,3,ipsw)+zxz
      zw(2,3,ipsw)=zw(2,3,ipsw)+zyz
      zw(3,3,ipsw)=zw(3,3,ipsw)+zzz
      zs(isf,1,1,ipsw)=zs(isf,1,1,ipsw)+zxx
      zs(isf,2,1,ipsw)=zs(isf,2,1,ipsw)+zyx
      zs(isf,3,1,ipsw)=zs(isf,3,1,ipsw)+zzx
      zs(isf,1,2,ipsw)=zs(isf,1,2,ipsw)+zxy
      zs(isf,2,2,ipsw)=zs(isf,2,2,ipsw)+zyy
      zs(isf,3,2,ipsw)=zs(isf,3,2,ipsw)+zzy
      zs(isf,1,3,ipsw)=zs(isf,1,3,ipsw)+zxz
      zs(isf,2,3,ipsw)=zs(isf,2,3,ipsw)+zyz
      zs(isf,3,3,ipsw)=zs(isf,3,3,ipsw)+zzz
   21 continue
#endif
c
      do 35 iax=1,nax
      fi(iax,1,1)=fi(iax,1,1)+f(iax)*rwx(iax,1)
      fi(iax,2,1)=fi(iax,2,1)+f(iax)*rwx(iax,2)
      fi(iax,3,1)=fi(iax,3,1)+f(iax)*rwx(iax,3)
      fj(iax,1,iwa)=fj(iax,1,iwa)-f(iax)*rwx(iax,1)
      fj(iax,2,iwa)=fj(iax,2,iwa)-f(iax)*rwx(iax,2)
      fj(iax,3,iwa)=fj(iax,3,iwa)-f(iax)*rwx(iax,3)
   35 continue
      do 136 iy=1,3
      do 36 ix=1,3
      sumen=zero
      do 37 iax=1,nax
      sumen=sumen-half*f(iax)*rwx(iax,iy)*rwc(iax,ix)
   37 continue
      zs(isf,ix,iy,ipsw)=zs(isf,ix,iy,ipsw)+sumen
      zw(ix,iy,ipsw)=zw(ix,iy,ipsw)+sumen
   36 continue
  136 continue
c
c     Radial distribution functions
c
c      if(ifstep-1.eq.((ifstep-1)/nfrdf)*nfrdf .and. ngrsw.gt.0) then
c      do 38 igc=1,ngc
c      if(ngt(igc).eq.2) then
c      if(iagc(igc).eq.iwa) then
c      igr=igrc(igc)
c      do 39 iax=1,nax
c      if(isga(isal(iax)).eq.jagc(igc)) then
c      indx=int(one/(rwi1(iax)*drdf))
c      if(indx.gt.ngl) indx=ngl
c      rdf(indx,igr)=rdf(indx,igr)+rdfvol
c      endif
c   39 continue
c      endif
c      endif
c   38 continue
c      endif
c
c     Thermodynamic integration
c
      if(ithint) then
      if(ith(2).or.ith(14)) then
      if(.not.lssscl) then
      do 40 iax=1,nax
      isa=isal(iax)
      isatm=isat(isa)
      c64=vdw(isatm,iwatm(iwa),1,4)
      c124=vdw(isatm,iwatm(iwa),3,4)
      dercon=half*(c124*rwi6(iax)-c64)*rwi6(iax)
      deriv(3,ipsw)=deriv(3,ipsw)+dercon
      deriv(14,ipsw)=deriv(14,ipsw)+dercon
#if defined(CAFE_FORCES)
      if(npgdec.gt.1) dera(1,isga(isa))=dera(1,isga(isa))+dercon
#endif
   40 continue
      else
      do 41 iax=1,nax
      isa=isal(iax)
      isatm=isat(isa)
      c64=vdw(isatm,iwatm(iwa),1,4)
      c124=vdw(isatm,iwatm(iwa),3,4)
      dercon=half*(c124*rwi6(iax)-c64)*rwi6(iax)
      if(isrx(iax).gt.0) then
      c64=half*three*vdw(isatm,iwatm(iwa),1,iset)
      c124=three*vdw(isatm,iwatm(iwa),3,iset)
      dercon=dercon+shift0(4)*rwi2(iax)*rwi6(iax)*(c64-c124*rwi6(iax))
      elseif(isrx(iax).lt.0) then
      c64=half*three*vdw(isatm,iwatm(iwa),1,iset)
      c124=three*vdw(isatm,iwatm(iwa),3,iset)
      dercon=dercon+shift1(4)*rwi2(iax)*rwi6(iax)*(c64-c124*rwi6(iax))
      else
      c64=vdw(isatm,iwatm(iwa),1,4)
      c124=vdw(isatm,iwatm(iwa),3,4)
      dercon=half*(c124*rwi6(iax)-c64)*rwi6(iax)
      endif
      deriv(3,ipsw)=deriv(3,ipsw)+dercon
      deriv(14,ipsw)=deriv(14,ipsw)+dercon
#if defined(CAFE_FORCES)
      if(npgdec.gt.1) dera(1,isga(isa))=dera(1,isga(isa))+dercon
#endif
   41 continue
      endif
      endif
      if(ith(4).or.ith(16)) then
      qj=chg(iwq(iwa),1,iset)
      qj4=chg(iwq(iwa),1,4)
      derco1=zero
      derco2=zero
      if(ipme.eq.0) then
      if(.not.lssscl) then
      do 42 iax=1,nax
      isa=isal(iax)
      drvco1=qj*chg(isq1(isa),1,4)*rwi1(iax)
      derco1=derco1+drvco1
      drvco2=chg(isq1(isa),1,iset)*qj4*rwi1(iax)
      derco2=derco2+drvco2
#if defined(CAFE_FORCES)
      if(npgdec.gt.1)
     + dera(2,isga(isa))=dera(2,isga(isa))+half*(drvco1+drvco2)
#endif
   42 continue
      deriv(5,ipsw)=deriv(5,ipsw)+derco1
      deriv(16,ipsw)=deriv(16,ipsw)+derco2
      else
      derco3=zero
      do 43 iax=1,nax
      isa=isal(iax)
      drvco1=qj*chg(isq1(isa),1,4)*rwi1(iax)
      derco1=derco1+drvco1
      drvco2=chg(isq1(isa),1,iset)*qj4*rwi1(iax)
      derco2=derco2+drvco2
      drvco3=zero
      if(isrx(iax).gt.0) then
      drvco3=(-half)*shift0(4)*chg(isq1(isa),1,iset)*
     + qj*rwi1(iax)*rwi2(iax)
      elseif(isrx(iax).lt.0) then
      drvco3=(-half)*shift1(4)*chg(isq1(isa),1,iset)*
     + qj*rwi1(iax)*rwi2(iax)
      endif
      derco3=derco3+drvco3
#if defined(CAFE_FORCES)
      if(npgdec.gt.1) dera(2,isga(isa))=dera(2,isga(isa))+
     + half*(drvco1+drvco2+drvco3)
#endif
   43 continue
      deriv(5,ipsw)=deriv(5,ipsw)+derco1+half*derco3
      deriv(16,ipsw)=deriv(16,ipsw)+derco2+half*derco3
      endif
      else
      if(.not.lssscl) then
      do 142 iax=1,nax
      isa=isal(iax)
      drvco1=qj*chg(isq1(isa),1,4)*rwi1(iax)
      derco1=derco1+drvco1
      drvco2=chg(isq1(isa),1,iset)*qj4*rwi1(iax)
      derco2=derco2+drvco2
#if defined(CAFE_FORCES)
      if(npgdec.gt.1)
     + dera(2,isga(isa))=dera(2,isga(isa))+half*(drvco1+drvco2)
#endif
  142 continue
      deriv(5,ipsw)=deriv(5,ipsw)+derco1
      deriv(16,ipsw)=deriv(16,ipsw)+derco2
      else
      derco3=zero
      do 143 iax=1,nax
      isa=isal(iax)
      drvco1=qj*chg(isq1(isa),1,4)*rwi1(iax)
      derco1=derco1+drvco1
      drvco2=chg(isq1(isa),1,iset)*qj4*rwi1(iax)
      derco2=derco2+drvco2
      drvco3=zero
      if(isrx(iax).gt.0) then
      drvco3=(-half)*shift0(4)*chg(isq1(isa),1,iset)*
     + qj*rwi1(iax)*rwi2(iax)
      elseif(isrx(iax).lt.0) then
      drvco3=(-half)*shift1(4)*chg(isq1(isa),1,iset)*
     + qj*rwi1(iax)*rwi2(iax)
      endif
      derco3=derco3+drvco3
#if defined(CAFE_FORCES)
      if(npgdec.gt.1) dera(2,isga(isa))=dera(2,isga(isa))+
     + half*(drvco1+drvco2+drvco3)
#endif
  143 continue
      deriv(5,ipsw)=deriv(5,ipsw)+derco1+half*derco3
      deriv(16,ipsw)=deriv(16,ipsw)+derco2+half*derco3
      endif
      endif
      endif
      endif
c
c     Thermodynamic perturbation 1
c
      if(ipert2) then
      if(ip2(2).or.ip2(14)) then
      iwatyp=iwatm(iwa)
      if(.not.lssscl) then
      do 44 iax=1,nax
      isa=isal(iax)
      c6p=vdw(isat(isa),iwatyp,1,2)
      c12p=vdw(isat(isa),iwatyp,3,2)
      ep2(ipsw)=ep2(ipsw)+facu(iax)*(c12p*rwi6(iax)-c6p)*rwi6(iax)
   44 continue
      else
      do 45 iax=1,nax
      isa=isal(iax)
      c6p=vdw(isat(isa),iwatyp,1,2)
      c12p=vdw(isat(isa),iwatyp,3,2)
      if(isrx(iax).gt.0) then
      rwi6(iax)=(one/(one/rwi2(iax)-shift0(1)+shift0(2)))**3
      elseif(isrx(iax).lt.0) then
      rwi6(iax)=(one/(one/rwi2(iax)-shift1(1)+shift1(2)))**3
      else
      rwi6(iax)=rwi2(iax)**3
      endif
      ep2(ipsw)=ep2(ipsw)+facu(iax)*(c12p*rwi6(iax)-c6p)*rwi6(iax)
   45 continue
      endif
      ep2(ipsw)=ep2(ipsw)-eterml
      endif
      if(ip2(4).or.ip2(5).or.ip2(16).or.ip2(17)) then
      qj=chg(iwq(iwa),1,2)
      if(ipme.eq.0) then
      if(.not.lssscl) then
      do 46 iax=1,nax
      isa=isal(iax)
      rwx(iax,1)=xi(iax,1)-xj(iax,1,iwa)
      rwx(iax,2)=xi(iax,2)-xj(iax,2,iwa)
      rwx(iax,3)=xi(iax,3)-xj(iax,3,iwa)
      rwi2(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      rwi1(iax)=sqrt(rwi2(iax))
      ep2(ipsw)=ep2(ipsw)+facu(iax)*chg(isq1(isa),1,2)*qj*rwi1(iax)
   46 continue
      else
      do 47 iax=1,nax
      isa=isal(iax)
      rwx(iax,1)=xi(iax,1)-xj(iax,1,iwa)
      rwx(iax,2)=xi(iax,2)-xj(iax,2,iwa)
      rwx(iax,3)=xi(iax,3)-xj(iax,3,iwa)
      rwi6(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      if(isrx(iax).gt.0) then
      rwi6(iax)=one/(one/rwi6(iax)+shift0(2))
      elseif(isrx(iax).lt.0) then
      rwi6(iax)=one/(one/rwi6(iax)+shift1(2))
      endif
      rwi1(iax)=sqrt(rwi6(iax))
      ep2(ipsw)=ep2(ipsw)+facu(iax)*chg(isq1(isa),1,2)*qj*rwi1(iax)
   47 continue
      endif
      else
      if(.not.lssscl) then
      do 146 iax=1,nax
      isa=isal(iax)
      rwx(iax,1)=xi(iax,1)-xj(iax,1,iwa)
      rwx(iax,2)=xi(iax,2)-xj(iax,2,iwa)
      rwx(iax,3)=xi(iax,3)-xj(iax,3,iwa)
      rwi2(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      rwi1(iax)=sqrt(rwi2(iax))
      ep2(ipsw)=ep2(ipsw)+facu(iax)*erfc(ealpha/rwi1(iax))*
     + chg(isq1(isa),1,2)*qj*rwi1(iax)
  146 continue
      else
      do 147 iax=1,nax
      isa=isal(iax)
      rwx(iax,1)=xi(iax,1)-xj(iax,1,iwa)
      rwx(iax,2)=xi(iax,2)-xj(iax,2,iwa)
      rwx(iax,3)=xi(iax,3)-xj(iax,3,iwa)
      rwi6(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      if(isrx(iax).gt.0) then
      rwi6(iax)=one/(one/rwi6(iax)+shift0(2))
      elseif(isrx(iax).lt.0) then
      rwi6(iax)=one/(one/rwi6(iax)+shift1(2))
      endif
      rwi1(iax)=sqrt(rwi6(iax))
      ep2(ipsw)=ep2(ipsw)+facu(iax)*erfc(ealpha/rwi1(iax))*
     + chg(isq1(isa),1,2)*qj*rwi1(iax)
  147 continue
      endif
      endif
      ep2(ipsw)=ep2(ipsw)-etermq
      endif
      endif
c
c     Thermodynamic perturbation 2
c
      if(ipert3) then
      if(ip3(2).or.ip3(14)) then
      iwatyp=iwatm(iwa)
      if(.not.lssscl) then
      do 48 iax=1,nax
      isa=isal(iax)
      c6p=vdw(isat(isa),iwatyp,1,3)
      c12p=vdw(isat(isa),iwatyp,3,3)
      ep3(ipsw)=ep3(ipsw)+facu(iax)*(c12p*rwi6(iax)-c6p)*rwi6(iax)
   48 continue
      else
      do 49 iax=1,nax
      isa=isal(iax)
      c6p=vdw(isat(isa),iwatyp,1,3)
      c12p=vdw(isat(isa),iwatyp,3,3)
      if(isrx(iax).gt.0) then
      rwi6(iax)=(one/(one/rwi2(iax)-shift0(1)+shift0(3)))**3
      elseif(isrx(iax).lt.0) then
      rwi6(iax)=(one/(one/rwi2(iax)-shift1(1)+shift1(3)))**3
      else
      rwi6(iax)=rwi2(iax)**3
      endif
      ep3(ipsw)=ep3(ipsw)+facu(iax)*(c12p*rwi6(iax)-c6p)*rwi6(iax)
   49 continue
      endif
      ep3(ipsw)=ep3(ipsw)-eterml
      endif
      if(ip2(4).or.ip2(5).or.ip2(16).or.ip2(17)) then
      qj=chg(iwq(iwa),1,3)
      if(ipme.eq.0) then
      if(.not.lssscl) then
      do 50 iax=1,nax
      isa=isal(iax)
      rwx(iax,1)=xi(iax,1)-xj(iax,1,iwa)
      rwx(iax,2)=xi(iax,2)-xj(iax,2,iwa)
      rwx(iax,3)=xi(iax,3)-xj(iax,3,iwa)
      rwi2(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      rwi1(iax)=sqrt(rwi2(iax))
      ep3(ipsw)=ep3(ipsw)+facu(iax)*chg(isq1(isa),1,3)*qj*rwi1(iax)
   50 continue
      else
      do 51 iax=1,nax
      isa=isal(iax)
      rwx(iax,1)=xi(iax,1)-xj(iax,1,iwa)
      rwx(iax,2)=xi(iax,2)-xj(iax,2,iwa)
      rwx(iax,3)=xi(iax,3)-xj(iax,3,iwa)
      rwi6(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      if(isrx(iax).gt.0) then
      rwi6(iax)=one/(one/rwi6(iax)+shift0(3))
      elseif(isrx(iax).lt.0) then
      rwi6(iax)=one/(one/rwi6(iax)+shift1(3))
      endif
      rwi1(iax)=sqrt(rwi6(iax))
      ep3(ipsw)=ep3(ipsw)+facu(iax)*chg(isq1(isa),1,3)*qj*rwi1(iax)
   51 continue
      endif
      else
      if(.not.lssscl) then
      do 150 iax=1,nax
      isa=isal(iax)
      rwx(iax,1)=xi(iax,1)-xj(iax,1,iwa)
      rwx(iax,2)=xi(iax,2)-xj(iax,2,iwa)
      rwx(iax,3)=xi(iax,3)-xj(iax,3,iwa)
      rwi2(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      rwi1(iax)=sqrt(rwi2(iax))
      ep3(ipsw)=ep3(ipsw)+facu(iax)*erfc(ealpha/rwi1(iax))*
     + chg(isq1(isa),1,3)*qj*rwi1(iax)
  150 continue
      else
      do 151 iax=1,nax
      isa=isal(iax)
      rwx(iax,1)=xi(iax,1)-xj(iax,1,iwa)
      rwx(iax,2)=xi(iax,2)-xj(iax,2,iwa)
      rwx(iax,3)=xi(iax,3)-xj(iax,3,iwa)
      rwi6(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      if(isrx(iax).gt.0) then
      rwi6(iax)=one/(one/rwi6(iax)+shift0(3))
      elseif(isrx(iax).lt.0) then
      rwi6(iax)=one/(one/rwi6(iax)+shift1(3))
      endif
      rwi1(iax)=sqrt(rwi6(iax))
      ep3(ipsw)=ep3(ipsw)+facu(iax)*erfc(ealpha/rwi1(iax))*
     + chg(isq1(isa),1,3)*qj*rwi1(iax)
  151 continue
      endif
      endif
      ep3(ipsw)=ep3(ipsw)-etermq
      endif
      endif
   26 continue
c
      iax=0
      do 52 isa=lswndx(ispm-1,ipsw)+1,lswndx(ispm,ipsw)
      ispj=lswjpt(isa,ipsw)-1
      do 53 ismn=1,lswin(isa,ipsw)
      fs(isfr+isa,1,ipsw)=fs(isfr+isa,1,ipsw)+fi(iax+ismn,1,1)
      fs(isfr+isa,2,ipsw)=fs(isfr+isa,2,ipsw)+fi(iax+ismn,2,1)
      fs(isfr+isa,3,ipsw)=fs(isfr+isa,3,ipsw)+fi(iax+ismn,3,1)
   53 continue
      do 54 iwa=1,mwa
      do 55 ismn=1,lswin(isa,ipsw)
      lswptr=lswj(ispj+ismn)
      fw(lswptr,1,iwa,ipsw)=fw(lswptr,1,iwa,ipsw)+fj(iax+ismn,1,iwa)
      fw(lswptr,2,iwa,ipsw)=fw(lswptr,2,iwa,ipsw)+fj(iax+ismn,2,iwa)
      fw(lswptr,3,iwa,ipsw)=fw(lswptr,3,iwa,ipsw)+fj(iax+ismn,3,iwa)
   55 continue
c
      if(nrwrec.gt.0) then
      do 56 ismn=1,lswin(isa,ipsw)
      lswptr=lswj(ispj+ismn)
      if(rtos(lswptr).lt.rwi2(iax+ismn)) rtos(lswptr)=rwi2(iax+ismn)
   56 continue
      endif
   54 continue
c
c      if(npener.ne.0) then
c      do 57 ismn=1,lswin(isa,ipsw)
c      lswptr=lswj(ispj+ismn)
c      uwms(lswptr)=uwms(lswptr)+u(iax+ismn)
c   57 continue
c      endif
c
      iax=iax+lswin(isa,ipsw)
   52 continue
    4 continue
    2 continue
c
      return
      end
#if defined(CAFE_POLARIZATION)
      subroutine cf_fpss(xs,xsm,fs,zs,ps,psp,
     + isga,isat,isdt,ismf,isml,isss,isq2,isq3,
     + isfrom,nums,lpbc,lpbcs,ess,fss,esa,
     + vdw,chg,iass,
     + lssndx,lssjpt,lssin,lssj,
     + xi,xj,rwx,rwi1,rwi2,rwi6,rwc,f,fi,fj,facu,
     + rw,isal,jsal,jmal,jfal,isrx,qsa2,qsa3,pl,pj)
#elif defined(CAFE_FORCES)
      subroutine cf_fss(xs,xsm,fs,zs,
     + isga,isat,isdt,ismf,isml,isss,isq2,isq3,isgm,
     + isfrom,nums,lpbc,lpbcs,ess,fss,esa,
     + vdw,chg,iass,
     + lssndx,lssjpt,lssin,lssj,
     + xi,xj,rwx,rwi1,rwi2,rwi6,rwc,f,fi,fj,facu,
     + rw,isal,jsal,jmal,jfal,isrx,qsa2,qsa3,dera,lda,rda,uda,lseq)
#else
c error
#endif
c
c $Id: cf_f.fh 19708 2010-10-29 18:04:21Z d3y133 $
c
      implicit none
c
#include "cf_common.fh"
#include "mafdecls.fh"
c
      real*8 rtmp
      real*8 xs(msa,3),xsm(msm,3),fs(msa,3,2)
      real*8 zs(msf,3,3,2),ess(msf,msf,mpe,2)
      real*8 fss(msf,msf,3,2)
      real*8 esa(nsa)
      integer isga(msa),isat(msa),isdt(msa),ismf(msa)
      integer isml(msa),isss(msa),isq2(msa),isq3(msa)
      integer isgm(msa),lseq(mseq)
c
      real*8 vdw(mat,mat,map,mset),chg(mqt,mqp,mset)
      logical lpbc,lpbcs
c
      real*8 xi(mscr,3),xj(mscr,3),rwx(mscr,3),rwi1(mscr)
      real*8 rwi2(mscr),rwi6(mscr),rwc(mscr,3),rw(mscr)
      real*8 f(mscr),fi(mscr,3),fj(mscr,3)
      real*8 qsa2(mscr),qsa3(mscr)
      integer isal(mscr),jsal(mscr),jmal(mscr),jfal(mscr),isrx(mscr)
      integer lssj(*)
      real*8 facu(mscr)
      integer nums
      integer lssndx(0:msa,2),lssjpt(nums,2),lssin(nums,2)
      integer iass(mat,mat),nsslen(2)
c
#if defined(CAFE_FORCES)
      real*8 dera(6,nsatot)
      integer lda(16,*)
      real*8 rda(11,*),uda(4,*)
#endif
#if defined(CAFE_POLARIZATION)
      real*8 ps(msa,3,2),psp(msa,3,2,2)
      real*8 pl(mscr,3),pj(mscr,3)
#endif
c
      integer isa,jsa,i,isf,jsf,ix
      integer isfr,isfrom,ism,jsm
      integer ipss,number,isslen,nax,jsaptr
      integer jnum,lssptr,iax
      real*8 dercon
c
      real*8 c6,c12,cf6,cf12
      real*8 c64,c124
      real*8 q14,sumen1,sumen2,sumen3
      real*8 etermq,eterml
      integer istt,jstt
#if defined(CAFE_FORCES)
      real*8 q,ferfc,fderfc
#endif
#if defined(CAFE_POLARIZATION)
      real*8 qfaci,qi,qj,pai,paj,qai,qaj,rx,ry,rz,ri1,ri2,ri3
      real*8 pix,piy,piz,pjx,pjy,pjz,rmi,rmj,fri,fmi,fmj,rmm
      real*8 zxx,zyx,zzx,zxy,zyy,zzy,zxz,zyz,zzz,etermp
#endif
c
#include "cf_funcs_dec.fh"
#include "bitops_decls.fh"
#include "cf_funcs_sfn.fh"
#include "bitops_funcs.fh"
c
#if defined(CAFE_POLARIZATION)
      qfaci=one/qfac
#endif
c
      if(nfhop.eq.0) then
      do 112 i=1,msa
      if(isq2(i).le.0.or.isq3(i).le.0.or.
     + isq2(i).gt.mqt.or.isq3(i).gt.mqt) goto 113
      qsa2(i)=chg(isq2(i),1,iset)
      qsa3(i)=chg(isq3(i),1,iset)
  112 continue
  113 continue
      else
      do 1112 i=1,msa
      if(isq2(i).le.0.or.isq3(i).le.0.or.
     + isq2(i).gt.mqt.or.isq3(i).gt.mqt) goto 1113
      qsa2(i)=chg(isq2(i),1,lseq(isgm(i)))
      qsa3(i)=chg(isq3(i),1,lseq(isgm(i)))
 1112 continue
 1113 continue
      endif
c
c     solute non-bonded interactions
c     ==============================
c
      isfr=isfrom-1
c
c     loop over short and long range pairlists
c
      do 11 ipss=1,lpss
c
c     evaluate outer index array
c
      nsslen(ipss)=0
      lssndx(0,ipss)=0
      number=0
      do 12 isa=1,nums
      if(number+lssin(isa,ipss).gt.mscr.or.
     + (ismf(isfr+isa).ne.ismf(isfr+isa-1).and.
     + number.gt.0)) then
      nsslen(ipss)=nsslen(ipss)+1
      lssndx(nsslen(ipss),ipss)=isa-1
      number=0
      endif
      number=number+lssin(isa,ipss)
   12 continue
      if(number.gt.0) then
      nsslen(ipss)=nsslen(ipss)+1
      lssndx(nsslen(ipss),ipss)=nums
      endif
c
c     loop over number of cycles to complete pairlists
c
      do 13 isslen=1,nsslen(ipss)
c
      etermq=zero
      eterml=zero
c
      nax=0
      isf=ismf(isfr+lssndx(isslen,ipss))
c
c     collect coordinates into workarrays
c
      do 14 isa=lssndx(isslen-1,ipss)+1,lssndx(isslen,ipss)
      jsaptr=lssjpt(isa,ipss)-1
      ism=isml(isfr+isa)
      if(lpbc.or.lpbcs) then
      if(ipbtyp.eq.1) then
      do 15 jnum=1,lssin(isa,ipss)
      lssptr=lssj(jsaptr+jnum)
      rwc(nax+jnum,1)=xs(isfr+isa,1)-xs(lssptr,1)
      rwc(nax+jnum,2)=xs(isfr+isa,2)-xs(lssptr,2)
      rwc(nax+jnum,3)=xs(isfr+isa,3)-xs(lssptr,3)
      isrx(nax+jnum)=0
   15 continue
      else
      do 115 jnum=1,lssin(isa,ipss)
      lssptr=lssj(jsaptr+jnum)
      jsm=isml(lssptr)
      rwc(nax+jnum,1)=xsm(ism,1)-xsm(jsm,1)
      rwc(nax+jnum,2)=xsm(ism,2)-xsm(jsm,2)
      rwc(nax+jnum,3)=xsm(ism,3)-xsm(jsm,3)
      isrx(nax+jnum)=0
  115 continue
      endif
      call cf_pbc(0,rwc,mscr,rwx,mscr,nax,1,lssin(isa,ipss))
      endif
      do 16 jnum=1,lssin(isa,ipss)
      lssptr=lssj(jsaptr+jnum)
      jsf=ismf(lssptr)
      isal(nax+jnum)=isfr+isa
      jsal(nax+jnum)=lssptr
      jfal(nax+jnum)=jsf
      jmal(nax+jnum)=0
      jsm=isml(lssptr)
      if(ism.ne.jsm) jmal(nax+jnum)=1
      if(ism.gt.0) then
      if(jsm.gt.0) then
      rwc(nax+jnum,1)=xsm(ism,1)-xsm(jsm,1)
      rwc(nax+jnum,2)=xsm(ism,2)-xsm(jsm,2)
      rwc(nax+jnum,3)=xsm(ism,3)-xsm(jsm,3)
      else
      rwc(nax+jnum,1)=xsm(ism,1)-xs(lssptr,1)
      rwc(nax+jnum,2)=xsm(ism,2)-xs(lssptr,2)
      rwc(nax+jnum,3)=xsm(ism,3)-xs(lssptr,3)
      endif
      else
      if(jsm.gt.0) then
      rwc(nax+jnum,1)=xs(isfr+isa,1)-xsm(jsm,1)
      rwc(nax+jnum,2)=xs(isfr+isa,2)-xsm(jsm,2)
      rwc(nax+jnum,3)=xs(isfr+isa,3)-xsm(jsm,3)
      else
      rwc(nax+jnum,1)=xs(isfr+isa,1)-xs(lssptr,1)
      rwc(nax+jnum,2)=xs(isfr+isa,2)-xs(lssptr,2)
      rwc(nax+jnum,3)=xs(isfr+isa,3)-xs(lssptr,3)
      endif
      endif
c
      isrx(nax+jnum)=0
c
      if(lssscl) then
c
      istt=iand(isss(isfr+isa),48)
      jstt=iand(isss(lssptr),48)
      if(ism.ne.jsm) then
      if(istt.eq.16.or.jstt.eq.16) isrx(nax+jnum)=-1
      if(istt.eq.32.or.jstt.eq.32) isrx(nax+jnum)=1
      endif
c
      istt=iand(isss(isfr+isa),384)
      jstt=iand(isss(lssptr),384)
      if(istt.eq.128.or.jstt.eq.128) isrx(nax+jnum)=-2
      if(istt.eq.256.or.jstt.eq.256) isrx(nax+jnum)=2
c
      istt=iand(isss(isfr+isa),384)
      jstt=iand(isss(lssptr),384)
      if(istt.eq.128.and.jstt.eq.256) isrx(nax+jnum)=999
      if(istt.eq.256.and.jstt.eq.128) isrx(nax+jnum)=999
c
c      write(*,'(5i5)')
c     + isga(isfr+isa),isga(lssptr),istt,jstt,isrx(nax+jnum)
c
      endif
c
   16 continue
c
      do 17 jnum=1,lssin(isa,ipss)
      lssptr=lssj(jsaptr+jnum)
      facu(nax+jnum)=zero
      if(iand(isdt(isfr+isa),mdynam).eq.ldynam.or.
     + iand(isdt(lssptr),mdynam).eq.ldynam) facu(nax+jnum)=one
c      if((iand(isdt(isfr+isa),mdynam).eq.ldynam.and.
c     + iand(isdt(lssptr),mdynam).ne.ldynam) .or.
c     + (iand(isdt(isfr+isa),mdynam).ne.ldynam.and.
c     + iand(isdt(lssptr),mdynam).eq.ldynam)) facu(nax+jnum)=half
      if(includ.eq.1) facu(nax+jnum)=one
   17 continue
c
      if(.not.lpbc.and..not.lpbcs) then
      do 18 jnum=1,lssin(isa,ipss)
      lssptr=lssj(jsaptr+jnum)
      xi(nax+jnum,1)=xs(isfr+isa,1)
      xi(nax+jnum,2)=xs(isfr+isa,2)
      xi(nax+jnum,3)=xs(isfr+isa,3)
      xj(nax+jnum,1)=xs(lssptr,1)
      xj(nax+jnum,2)=xs(lssptr,2)
      xj(nax+jnum,3)=xs(lssptr,3)
#if defined(CAFE_POLARIZATION)
      pl(nax+jnum,1)=ps(isfr+isa,1,1)
      pl(nax+jnum,2)=ps(isfr+isa,2,1)
      pl(nax+jnum,3)=ps(isfr+isa,3,1)
      pj(nax+jnum,1)=ps(lssptr,1,1)
      pj(nax+jnum,2)=ps(lssptr,2,1)
      pj(nax+jnum,3)=ps(lssptr,3,1)
#endif
      isal(nax+jnum)=isfr+isa
      jsal(nax+jnum)=lssptr
   18 continue
      else
      do 19 jnum=1,lssin(isa,ipss)
      rwc(nax+jnum,1)=rwc(nax+jnum,1)-rwx(jnum,1)
      rwc(nax+jnum,2)=rwc(nax+jnum,2)-rwx(jnum,2)
      rwc(nax+jnum,3)=rwc(nax+jnum,3)-rwx(jnum,3)
      lssptr=lssj(jsaptr+jnum)
      xi(nax+jnum,1)=xs(isfr+isa,1)
      xi(nax+jnum,2)=xs(isfr+isa,2)
      xi(nax+jnum,3)=xs(isfr+isa,3)
      xj(nax+jnum,1)=xs(lssptr,1)+rwx(jnum,1)
      xj(nax+jnum,2)=xs(lssptr,2)+rwx(jnum,2)
      xj(nax+jnum,3)=xs(lssptr,3)+rwx(jnum,3)
#if defined(CAFE_POLARIZATION)
      pl(nax+jnum,1)=ps(isfr+isa,1,1)
      pl(nax+jnum,2)=ps(isfr+isa,2,1)
      pl(nax+jnum,3)=ps(isfr+isa,3,1)
      pj(nax+jnum,1)=ps(lssptr,1,1)
      pj(nax+jnum,2)=ps(lssptr,2,1)
      pj(nax+jnum,3)=ps(lssptr,3,1)
#endif
      isal(nax+jnum)=isfr+isa
      jsal(nax+jnum)=lssptr
   19 continue
      endif
c
      nax=nax+lssin(isa,ipss)
   14 continue
c
#if !defined(CAFE_POLARIZATION)
c
c     evaluate electrostatic energies and forces
c
c      etermq=zero
      if(.not.lssscl) then
      if(ipme.eq.0.or.isolvo.ne.0) then
      do 24 iax=1,nax
      f(iax)=zero
      rwx(iax,1)=xi(iax,1)-xj(iax,1)
      rwx(iax,2)=xi(iax,2)-xj(iax,2)
      rwx(iax,3)=xi(iax,3)-xj(iax,3)
      rwi2(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      rwi1(iax)=sqrt(rwi2(iax))
      isa=isal(iax)
      jsa=jsal(iax)
c
      if(jfal(iax).ne.isf) then
      q=qsa2(isa)*qsa2(jsa)
      else
      q=qsa3(isa)*qsa3(jsa)
      endif
c
      rw(iax)=facu(iax)*q*rwi1(iax)
      f(iax)=f(iax)+q*rwi1(iax)*rwi2(iax)
      if(ireact.ne.0) then
      ess(isf,jfal(iax),6,ipss)=ess(isf,jfal(iax),6,ipss)+
     + facu(iax)*q*rffss/rwi2(iax)
      if(npener.ne.0) then
      esa(isga(isa))=esa(isga(isa))+half*facu(iax)*q*rffss/rwi2(iax)
      esa(isga(jsa))=esa(isga(jsa))+half*facu(iax)*q*rffss/rwi2(iax)
      endif
      f(iax)=f(iax)-two*q*rffss
      endif
cx      if(ihess.gt.0) then
cx      h(iax)=three*q*rwi1(iax)*rwi2(iax)*rwi2(iax)
cx      endif
   24 continue
      else
      do 25 iax=1,nax
      f(iax)=zero
      rwx(iax,1)=xi(iax,1)-xj(iax,1)
      rwx(iax,2)=xi(iax,2)-xj(iax,2)
      rwx(iax,3)=xi(iax,3)-xj(iax,3)
      rwi2(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      if(isrx(iax).eq.999) then
      rwi2(iax)=zero
      isrx(iax)=0
      endif
      rwi1(iax)=sqrt(rwi2(iax))
      isa=isal(iax)
      jsa=jsal(iax)
      if(jfal(iax).ne.isf) then
      q=qsa2(isa)*qsa2(jsa)
      else
      q=qsa3(isa)*qsa3(jsa)
      endif
c
      ferfc=erfc(ealpha/rwi1(iax))
      fderfc=ealpha*derfc(ealpha/rwi1(iax))
      rw(iax)=ferfc*facu(iax)*q*rwi1(iax)
      f(iax)=f(iax)+q*rwi2(iax)*(ferfc*rwi1(iax)-fderfc)
   25 continue
      endif
      else
      if(ipme.eq.0.or.isolvo.ne.0) then
      do 26 iax=1,nax
      f(iax)=zero
      rwx(iax,1)=xi(iax,1)-xj(iax,1)
      rwx(iax,2)=xi(iax,2)-xj(iax,2)
      rwx(iax,3)=xi(iax,3)-xj(iax,3)
      rwi2(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      if(isrx(iax).eq.999) then
      rwi2(iax)=zero
      isrx(iax)=0
      endif
      rtmp=rwi2(iax)
      if(isrx(iax).gt.0) then
      rwi2(iax)=one/(one/rwi2(iax)+shift0(1))
      elseif(isrx(iax).lt.0) then
      rwi2(iax)=one/(one/rwi2(iax)+shift1(1))
      endif
      rwi1(iax)=sqrt(rwi2(iax))
      isa=isal(iax)
      jsa=jsal(iax)
c      write(*,'(3i5,4f12.6)')
c     + isga(isa),isga(jsa),isrx(iax),shift0(1),shift1(1),rtmp,rwi2(iax)
      if(jfal(iax).ne.isf) then
      q=qsa2(isa)*qsa2(jsa)
      else
      q=qsa3(isa)*qsa3(jsa)
      endif
      rw(iax)=facu(iax)*q*rwi1(iax)
      f(iax)=f(iax)+q*rwi1(iax)*rwi2(iax)
      if(ireact.ne.0) then
      rw(iax)=rw(iax)+facu(iax)*q*rffss/rwi2(iax)
      f(iax)=f(iax)-two*q*rffss
      endif
   26 continue
      else
      do 126 iax=1,nax
      f(iax)=zero
      rwx(iax,1)=xi(iax,1)-xj(iax,1)
      rwx(iax,2)=xi(iax,2)-xj(iax,2)
      rwx(iax,3)=xi(iax,3)-xj(iax,3)
      rwi2(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      if(isrx(iax).eq.999) then
      rwi2(iax)=zero
      isrx(iax)=0
      endif
      if(isrx(iax).gt.0) then
      rwi2(iax)=one/(one/rwi2(iax)+shift0(1))
      elseif(isrx(iax).lt.0) then
      rwi2(iax)=one/(one/rwi2(iax)+shift1(1))
      endif
      rwi1(iax)=sqrt(rwi2(iax))
      isa=isal(iax)
      jsa=jsal(iax)
      if(jfal(iax).ne.isf) then
      q=qsa2(isa)*qsa2(jsa)
      else
      q=qsa3(isa)*qsa3(jsa)
      endif
      ferfc=erfc(ealpha/rwi1(iax))
      fderfc=ealpha*derfc(ealpha/rwi1(iax))
      rw(iax)=ferfc*facu(iax)*q*rwi1(iax)
      f(iax)=f(iax)+q*rwi2(iax)*(ferfc*rwi1(iax)-fderfc)
      if(ireact.ne.0) then
      rw(iax)=rw(iax)+facu(iax)*q*rffss/rwi2(iax)
      f(iax)=f(iax)-two*q*rffss
      endif
  126 continue
      endif
      endif
c
c     accumulate electrostatic energies per solute molecule
c
c      etermq=zero
      do 27 iax=1,nax
      if(npener.ne.0) then
      esa(isga(isal(iax)))=esa(isga(isal(iax)))+half*rw(iax)
      esa(isga(jsal(iax)))=esa(isga(jsal(iax)))+half*rw(iax)
      endif
      ess(isf,jfal(iax),6,ipss)=ess(isf,jfal(iax),6,ipss)+rw(iax)
      etermq=etermq+rw(iax)
   27 continue
c
c      do 27 jsf=1,msf
c      sumen=zero
c      do 28 iax=1,nax
c      if(jfal(iax).eq.jsf) sumen=sumen+rw(iax)
c      if(npener.ne.0) then
c      esa(isga(isal(iax)))=esa(isga(isal(iax)))+half*rw(iax)
c      esa(isga(jsal(iax)))=esa(isga(jsal(iax)))+half*rw(iax)
c      endif
c   28 continue
c      ess(isf,jsf,6,ipss)=ess(isf,jsf,6,ipss)+sumen
c      etermq=etermq+sumen
c   27 continue
c
#endif
c
#if defined(CAFE_POLARIZATION)
c
c     evaluate electrostatic energies and forces
c
c      dssq=zero
c      dssqp=zero
c      dssp=zero
      do 24 iax=1,nax
      if(isf.ne.jfal(iax)) then
      qi=chg(isq2(isal(iax)),1,iset)
      qj=chg(isq2(jsal(iax)),1,iset)
      pai=chg(isq2(isal(iax)),2,iset)
      paj=chg(isq2(jsal(iax)),2,iset)
      else
      qi=chg(isq3(isal(iax)),1,iset)
      qj=chg(isq3(jsal(iax)),1,iset)
      pai=chg(isq3(isal(iax)),2,iset)
      paj=chg(isq3(jsal(iax)),2,iset)
      endif
      qai=qfaci*qi
      qaj=qfaci*qj
      rwx(iax,1)=xi(iax,1)-xj(iax,1)
      rwx(iax,2)=xi(iax,2)-xj(iax,2)
      rwx(iax,3)=xi(iax,3)-xj(iax,3)
      rx=-rwx(iax,1)
      ry=-rwx(iax,2)
      rz=-rwx(iax,3)
      ri2=one/(rx*rx+ry*ry+rz*rz)
      ri1=sqrt(ri2)
      ri3=qfac*qfac*ri1*ri2
      rwi2(iax)=ri2
      rwi1(iax)=ri1
      pix=pai*pl(iax,1)
      piy=pai*pl(iax,2)
      piz=pai*pl(iax,3)
      pjx=paj*pj(iax,1)
      pjy=paj*pj(iax,2)
      pjz=paj*pj(iax,3)
      rmi=three*(rx*pix+ry*piy+rz*piz)*ri2
      rmj=three*(rx*pjx+ry*pjy+rz*pjz)*ri2
      if(ipolt.eq.1) then
      fri=((-qai)*qaj+qai*rmj-qaj*rmi)*ri3
      fmi=(qaj)*ri3
      fmj=(-qai)*ri3
      else
      rmm=three*(pix*pjx+piy*pjy+piz*pjz)*ri2
      fri=((-qai)*qaj+qai*rmj-qaj*rmi+5.0*rmi*rmj/three-rmm)*ri3
      fmi=(qaj-rmj)*ri3
      fmj=((-qai)-rmi)*ri3
      endif
      fi(iax,1)=fri*rx+fmi*pix+fmj*pjx
      fi(iax,2)=fri*ry+fmi*piy+fmj*pjy
      fi(iax,3)=fri*rz+fmi*piz+fmj*pjz
      fj(iax,1)=(fri*rx+fmi*pix+fmj*pjx)
      fj(iax,2)=(fri*ry+fmi*piy+fmj*pjy)
      fj(iax,3)=(fri*rz+fmi*piz+fmj*pjz)
      jsf=jfal(iax)
      if(isf.ne.jsf) then
      zxx=(-half)*(fri*rx+fmi*pix+fmj*pjx)*rwc(iax,1)
      zyx=(-half)*(fri*rx+fmi*pix+fmj*pjx)*rwc(iax,2)
      zzx=(-half)*(fri*rx+fmi*pix+fmj*pjx)*rwc(iax,3)
      zxy=(-half)*(fri*ry+fmi*piy+fmj*pjy)*rwc(iax,1)
      zyy=(-half)*(fri*ry+fmi*piy+fmj*pjy)*rwc(iax,2)
      zzy=(-half)*(fri*ry+fmi*piy+fmj*pjy)*rwc(iax,3)
      zxz=(-half)*(fri*rz+fmi*piz+fmj*pjz)*rwc(iax,1)
      zyz=(-half)*(fri*rz+fmi*piz+fmj*pjz)*rwc(iax,2)
      zzz=(-half)*(fri*rz+fmi*piz+fmj*pjz)*rwc(iax,3)
      zs(isf,1,1,ipss)=zs(isf,1,1,ipss)+zxx
      zs(isf,2,1,ipss)=zs(isf,2,1,ipss)+zyx
      zs(isf,3,1,ipss)=zs(isf,3,1,ipss)+zzx
      zs(isf,1,2,ipss)=zs(isf,1,2,ipss)+zxy
      zs(isf,2,2,ipss)=zs(isf,2,2,ipss)+zyy
      zs(isf,3,2,ipss)=zs(isf,3,2,ipss)+zzy
      zs(isf,1,3,ipss)=zs(isf,1,3,ipss)+zxz
      zs(isf,2,3,ipss)=zs(isf,2,3,ipss)+zyz
      zs(isf,3,3,ipss)=zs(isf,3,3,ipss)+zzz
      zs(jsf,1,1,ipss)=zs(jsf,1,1,ipss)+zxx
      zs(jsf,2,1,ipss)=zs(jsf,2,1,ipss)+zyx
      zs(jsf,3,1,ipss)=zs(jsf,3,1,ipss)+zzx
      zs(jsf,1,2,ipss)=zs(jsf,1,2,ipss)+zxy
      zs(jsf,2,2,ipss)=zs(jsf,2,2,ipss)+zyy
      zs(jsf,3,2,ipss)=zs(jsf,3,2,ipss)+zzy
      zs(jsf,1,3,ipss)=zs(jsf,1,3,ipss)+zxz
      zs(jsf,2,3,ipss)=zs(jsf,2,3,ipss)+zyz
      zs(jsf,3,3,ipss)=zs(jsf,3,3,ipss)+zzz
      endif
      etermp=facu(iax)*(qi*qj-qfac*qfac*(qai*rmj-qaj*rmi))*ri1
      if(npener.ne.0) then
      esa(isga(isal(iax)))=esa(isga(isal(iax)))+half*etermp
      esa(isga(jsal(iax)))=esa(isga(jsal(iax)))+half*etermp
      endif
      ess(isf,jsf,6,ipss)=ess(isf,jsf,6,ipss)+etermp
c
   24 continue
c
#endif
c
c     Lennard-Jones energies and forces
c     =================================
c
      do 29 iax=1,nax
      isa=isal(iax)
      jsa=jsal(iax)
      rwi6(iax)=rwi2(iax)*rwi2(iax)*rwi2(iax)
      c6=vdw(isat(isa),isat(jsa),1,iset)
      c12=vdw(isat(isa),isat(jsa),3,iset)
      cf6=six*c6
      cf12=twelve*c12
      rw(iax)=facu(iax)*(c12*rwi6(iax)-c6)*rwi6(iax)
      f(iax)=f(iax)+(cf12*rwi6(iax)-cf6)*rwi6(iax)*rwi2(iax)
cx      if(ihess.gt.0) then
cx      h(iax)=h(iax)+(forten*cf12*rwi6(iax)-eight*cf6)*rwi6(iax)*
cx     + rwi2(iax)*rwi2(iax)
cx      endif
   29 continue
c
c     accumulate Lennard-Jones energies per solute molecule
c
c      eterml=zero
c      etermq=zero
      do 30 iax=1,nax
      if(npener.ne.0) then
      esa(isga(isal(iax)))=esa(isga(isal(iax)))+half*rw(iax)
      esa(isga(jsal(iax)))=esa(isga(jsal(iax)))+half*rw(iax)
      endif
      ess(isf,jfal(iax),5,ipss)=ess(isf,jfal(iax),5,ipss)+rw(iax)
      eterml=eterml+rw(iax)
   30 continue
c
c      do 30 jsf=1,msf
c      sumen=zero
c      do 31 iax=1,nax
c      if(jfal(iax).eq.jsf) sumen=sumen+rw(iax)
c      if(npener.ne.0) then
c      esa(isga(isal(iax)))=esa(isga(isal(iax)))+half*rw(iax)
c      esa(isga(jsal(iax)))=esa(isga(jsal(iax)))+half*rw(iax)
c      endif
c   31 continue
c      ess(isf,jsf,5,ipss)=ess(isf,jsf,5,ipss)+sumen
c      eterml=eterml+sumen
c   30 continue
c
c     evaluate and accumulate the solute-solute virial contributions
c     allow virial contributions from interactions between a solute 
c     molecule and its own image
c
      do 132 ix=1,3
      do 32 jsf=1,msf
      sumen1=zero
      sumen2=zero
      sumen3=zero
      do 33 iax=1,nax
cx      if(jfal(iax).eq.jsf.and.jmal(iax).eq.1) then
      if(jfal(iax).eq.jsf) then
      sumen1=sumen1-half*f(iax)*rwx(iax,1)*rwc(iax,ix)
      sumen2=sumen2-half*f(iax)*rwx(iax,2)*rwc(iax,ix)
      sumen3=sumen3-half*f(iax)*rwx(iax,3)*rwc(iax,ix)
      endif
   33 continue
      zs(isf,ix,1,ipss)=zs(isf,ix,1,ipss)+sumen1
      zs(jsf,ix,1,ipss)=zs(jsf,ix,1,ipss)+sumen1
      zs(isf,ix,2,ipss)=zs(isf,ix,2,ipss)+sumen2
      zs(jsf,ix,2,ipss)=zs(jsf,ix,2,ipss)+sumen2
      zs(isf,ix,3,ipss)=zs(isf,ix,3,ipss)+sumen3
      zs(jsf,ix,3,ipss)=zs(jsf,ix,3,ipss)+sumen3
   32 continue
  132 continue
c
c     generate radial distribution functions
c
c      if(ifstep-1.eq.((ifstep-1)/nfrdf)*nfrdf.and.ngrss.gt.0) then
c      do 34 iax=1,nax
c      isa=isal(iax)
c      jsa=jsal(iax)
c      do 35 igc=1,ngc
c      if(ngt(igc).eq.3) then
c      if((isga(isa).eq.iagc(igc).and.
c     + isga(jsa).eq.jagc(igc)).or.
c     + (isga(isa).eq.jagc(igc).and.
c     + isga(jsa).eq.iagc(igc))) then
c      igr=igrc(igc)
c      indx=int(one/(rwi1(iax)*drdf))
c      if(indx.gt.ngl) indx=ngl
c      rdf(indx,igr)=rdf(indx,igr)+rdfvol
c      endif
c      endif
c   35 continue
c   34 continue
c      endif
c
c     accumulate forces into solute force arrays
c
      nax=0
      do 36 isa=lssndx(isslen-1,ipss)+1,lssndx(isslen,ipss)
      jsaptr=lssjpt(isa,ipss)-1
      do 37 jnum=1,lssin(isa,ipss)
      lssptr=lssj(jsaptr+jnum)
      fs(isfr+isa,1,ipss)=fs(isfr+isa,1,ipss)+
     + f(nax+jnum)*rwx(nax+jnum,1)
      fs(isfr+isa,2,ipss)=fs(isfr+isa,2,ipss)+
     + f(nax+jnum)*rwx(nax+jnum,2)
      fs(isfr+isa,3,ipss)=fs(isfr+isa,3,ipss)+
     + f(nax+jnum)*rwx(nax+jnum,3)
      fs(lssptr,1,ipss)=fs(lssptr,1,ipss)-f(nax+jnum)*rwx(nax+jnum,1)
      fs(lssptr,2,ipss)=fs(lssptr,2,ipss)-f(nax+jnum)*rwx(nax+jnum,2)
      fs(lssptr,3,ipss)=fs(lssptr,3,ipss)-f(nax+jnum)*rwx(nax+jnum,3)
      isf=ismf(isfr+isa)
      jsf=ismf(lssptr)
      fss(isf,jsf,1,ipss)=fss(isf,jsf,1,ipss)+
     + f(nax+jnum)*rwx(nax+jnum,1)
      fss(isf,jsf,2,ipss)=fss(isf,jsf,2,ipss)+
     + f(nax+jnum)*rwx(nax+jnum,2)
      fss(isf,jsf,3,ipss)=fss(isf,jsf,3,ipss)+
     + f(nax+jnum)*rwx(nax+jnum,3)
#if defined(CAFE_POLARIZATION)
      fs(isfr+isa,1,ipss)=fs(isfr+isa,1,ipss)+fi(nax+jnum,1)
      fs(isfr+isa,2,ipss)=fs(isfr+isa,2,ipss)+fi(nax+jnum,2)
      fs(isfr+isa,3,ipss)=fs(isfr+isa,3,ipss)+fi(nax+jnum,3)
      fs(lssptr,1,ipss)=fs(lssptr,1,ipss)+fj(nax+jnum,1)
      fs(lssptr,2,ipss)=fs(lssptr,2,ipss)+fj(nax+jnum,2)
      fs(lssptr,3,ipss)=fs(lssptr,3,ipss)+fj(nax+jnum,3)
#endif
   37 continue
cx      if(ihess.gt.0) then
cx      do 137 jnum=1,lssin(isa,ipss)
cx      lssptr=lssj(jsaptr+jnum)
cx      hs(isfr+isa,1,ipss)=hs(isfr+isa,1,ipss)-f(nax+jnum)+
cx     + h(nax+jnum)**rwx(nax+jnum,1)*rwx(nax+jnum,1)
cx      hs(isfr+isa,2,ipss)=hs(isfr+isa,2,ipss)+
cx     + h(nax+jnum)*rwx(nax+jnum,1)*rwx(nax+jnum,2)
cx      hs(isfr+isa,3,ipss)=hs(isfr+isa,3,ipss)+
cx     + h(nax+jnum)*rwx(nax+jnum,1)*rwx(nax+jnum,3)
cx      hs(isfr+isa,4,ipss)=hs(isfr+isa,4,ipss)-f(nax+jnum)+
cx     + h(nax+jnum)*rwx(nax+jnum,2)*rwx(nax+jnum,2)
cx      hs(isfr+isa,5,ipss)=hs(isfr+isa,5,ipss)+
cx     + h(nax+jnum)*rwx(nax+jnum,2)*rwx(nax+jnum,3)
cx      hs(isfr+isa,6,ipss)=hs(isfr+isa,6,ipss)-f(nax+jnum)+
cx     + h(nax+jnum)*rwx(nax+jnum,3)*rwx(nax+jnum,3)
cx      hs(lssptr,1,ipss)=hs(lssptr,1,ipss)+f(nax+jnum)-
cx     + h(nax+jnum)*rwx(nax+jnum,1)*rwx(nax+jnum,1)
cx      hs(lssptr,2,ipss)=hs(lssptr,2,ipss)-
cx     + h(nax+jnum)*rwx(nax+jnum,1)*rwx(nax+jnum,2)
cx      hs(lssptr,3,ipss)=hs(lssptr,3,ipss)-
cx     + h(nax+jnum)*rwx(nax+jnum,1)*rwx(nax+jnum,3)
cx      hs(lssptr,4,ipss)=hs(lssptr,4,ipss)+f(nax+jnum)-
cx     + h(nax+jnum)*rwx(nax+jnum,2)*rwx(nax+jnum,2)
cx      hs(lssptr,5,ipss)=hs(lssptr,5,ipss)-
cx     + h(nax+jnum)*rwx(nax+jnum,2)*rwx(nax+jnum,3)
cx      hs(lssptr,6,ipss)=hs(lssptr,6,ipss)+f(nax+jnum)-
cx     + h(nax+jnum)*rwx(nax+jnum,3)*rwx(nax+jnum,3)
cx  137 continue
cx      endif
      nax=nax+lssin(isa,ipss)
   36 continue
c
c     thermodynamic integration
c
      if(ithint) then
      if(ith(14)) then
      nax=0
      do 38 isa=lssndx(isslen-1,ipss)+1,lssndx(isslen,ipss)
      jsaptr=lssjpt(isa,ipss)-1
c
      if(.not.lssscl) then
      do 39 jnum=1,lssin(isa,ipss)
      jsa=lssj(jsaptr+jnum)
      dercon=(vdw(isat(isfr+isa),isat(jsa),3,4)*rwi6(nax+jnum)
     + -vdw(isat(isfr+isa),isat(jsa),1,4))*rwi6(nax+jnum)
      deriv(15,ipss)=deriv(15,ipss)+dercon
#if defined(CAFE_FORCES)
      if(npgdec.gt.1) then
      dera(3,isga(isa))=dera(3,isga(isa))+half*dercon
      dera(3,isga(jsa))=dera(3,isga(jsa))+half*dercon
      endif
#endif
   39 continue
      else
      do 40 jnum=1,lssin(isa,ipss)
      jsa=lssj(jsaptr+jnum)
      dercon=(vdw(isat(isfr+isa),isat(jsa),3,4)*rwi6(nax+jnum)
     + -vdw(isat(isfr+isa),isat(jsa),1,4))*rwi6(nax+jnum)
      if(isrx(nax+jnum).gt.0) then
      c64=three*vdw(isat(isfr+isa),isat(jsa),1,iset)
      c124=six*vdw(isat(isfr+isa),isat(jsa),3,iset)
      dercon=dercon+shift0(4)*
     + rwi2(nax+jnum)*rwi6(nax+jnum)*(c64-c124*rwi6(nax+jnum))
      elseif(isrx(nax+jnum).lt.0) then
      c64=three*vdw(isat(isfr+isa),isat(jsa),1,iset)
      c124=six*vdw(isat(isfr+isa),isat(jsa),3,iset)
      dercon=dercon+shift1(4)*
     + rwi2(nax+jnum)*rwi6(nax+jnum)*(c64-c124*rwi6(nax+jnum))
      endif
      deriv(15,ipss)=deriv(15,ipss)+dercon
c      write(*,'(a,3i5,4f12.6)') 'gv ',
c     + isga(isfr+isa),isga(jsa),isrx(nax+jnum),shift0(4),shift1(4),
c     + dercon,deriv(15,ipss)
#if defined(CAFE_FORCES)
      if(npgdec.gt.1) then
      dera(3,isga(isfr+isa))=dera(3,isga(isfr+isa))+half*dercon
      dera(3,isga(jsa))=dera(3,isga(jsa))+half*dercon
      endif
#endif
   40 continue
      endif
c
      nax=nax+lssin(isa,ipss)
   38 continue
      endif
c
      if(ith(16)) then
      nax=0
      do 41 isa=lssndx(isslen-1,ipss)+1,lssndx(isslen,ipss)
      jsaptr=lssjpt(isa,ipss)-1
      ism=isml(isfr+isa)
      if(ipme.eq.0) then
      if(.not.lssscl) then
      do 42 jnum=1,lssin(isa,ipss)
      jsa=lssj(jsaptr+jnum)
      if(isml(jsa).ne.ism) then
      dercon=(chg(isq2(isfr+isa),1,iset)*chg(isq2(jsa),1,4)
     + +chg(isq2(isfr+isa),1,4)*chg(isq2(jsa),1,iset))
      else
      dercon=(chg(isq3(isfr+isa),1,iset)*chg(isq3(jsa),1,4)
     + +chg(isq3(isfr+isa),1,4)*chg(isq3(jsa),1,iset))
      endif
      deriv(17,ipss)=deriv(17,ipss)+dercon*rwi1(nax+jnum)
      if(ireact.ne.0) then
      deriv(17,ipss)=deriv(17,ipss)+dercon*rffss/rwi2(nax+jnum)
      endif
c      write(*,'(a,3i5,4f12.6)') 'gq ',
c     + isga(isfr+isa),isga(jsa),isrx(nax+jnum),shift0(4),shift1(4),
c     + dercon,deriv(17,ipss)
#if defined(CAFE_FORCES)
      if(npgdec.gt.1) then
      dera(4,isga(isfr+isa))=dera(4,isga(isfr+isa))+
     + half*dercon*rwi1(nax+jnum)
      dera(4,isga(jsa))=dera(4,isga(jsa))+half*dercon*rwi1(nax+jnum)
      endif
#endif
   42 continue
      else
      do 43 jnum=1,lssin(isa,ipss)
      jsa=lssj(jsaptr+jnum)
      if(isml(jsa).ne.ism) then
      dercon=(chg(isq2(isfr+isa),1,iset)*chg(isq2(jsa),1,4)
     + +chg(isq2(isfr+isa),1,4)*chg(isq2(jsa),1,iset))
      if(isrx(nax+jnum).gt.0) then
      dercon=dercon-half*shift0(4)*
     + chg(isq2(isfr+isa),1,iset)*chg(isq2(jsa),1,iset)*rwi2(nax+jnum)
      elseif(isrx(nax+jnum).lt.0) then
      dercon=dercon-half*shift1(4)*
     + chg(isq2(isfr+isa),1,iset)*chg(isq2(jsa),1,iset)*rwi2(nax+jnum)
      endif
      else
      dercon=(chg(isq3(isfr+isa),1,iset)*chg(isq3(jsa),1,4)
     + +chg(isq3(isfr+isa),1,4)*chg(isq3(jsa),1,iset))
      if(isrx(nax+jnum).gt.1) then
      dercon=dercon-half*shift0(4)*
     + chg(isq3(isfr+isa),1,iset)*chg(isq3(jsa),1,iset)*rwi2(nax+jnum)
      elseif(isrx(nax+jnum).lt.-1) then
      dercon=dercon-half*shift1(4)*
     + chg(isq3(isfr+isa),1,iset)*chg(isq3(jsa),1,iset)*rwi2(nax+jnum)
      endif
      endif
      deriv(17,ipss)=deriv(17,ipss)+dercon*rwi1(nax+jnum)
      if(ireact.ne.0) then
      deriv(17,ipss)=deriv(17,ipss)+dercon*rffss/rwi2(nax+jnum)
      endif
#if defined(CAFE_FORCES)
      if(npgdec.gt.1) then
      dera(4,isga(isfr+isa))=dera(4,isga(isfr+isa))+
     + half*dercon*rwi1(nax+jnum)
      dera(4,isga(jsa))=dera(4,isga(jsa))+half*dercon*rwi1(nax+jnum)
      endif
#endif
   43 continue
      endif
      else
      if(.not.lssscl) then
      do 142 jnum=1,lssin(isa,ipss)
      jsa=lssj(jsaptr+jnum)
      if(isml(jsa).ne.ism) then
      dercon=(chg(isq2(isfr+isa),1,iset)*chg(isq2(jsa),1,4)
     + +chg(isq2(isfr+isa),1,4)*chg(isq2(jsa),1,iset))
      else
      dercon=(chg(isq3(isfr+isa),1,iset)*chg(isq3(jsa),1,4)
     + +chg(isq3(isfr+isa),1,4)*chg(isq3(jsa),1,iset))
      endif
      deriv(17,ipss)=deriv(17,ipss)+dercon*rwi1(nax+jnum)
      if(ireact.ne.0) then
      deriv(17,ipss)=deriv(17,ipss)+dercon*rffss/rwi2(nax+jnum)
      endif
#if defined(CAFE_FORCES)
      if(npgdec.gt.1) then
      dera(4,isga(isfr+isa))=dera(4,isga(isfr+isa))+
     + half*dercon*rwi1(nax+jnum)
      dera(4,isga(jsa))=dera(4,isga(jsa))+half*dercon*rwi1(nax+jnum)
      endif
#endif
  142 continue
      else
      do 143 jnum=1,lssin(isa,ipss)
      jsa=lssj(jsaptr+jnum)
      if(isml(jsa).ne.ism) then
      dercon=(chg(isq2(isfr+isa),1,iset)*chg(isq2(jsa),1,4)
     + +chg(isq2(isfr+isa),1,4)*chg(isq2(jsa),1,iset))
      if(isrx(nax+jnum).gt.0) then
      dercon=dercon-half*shift0(4)*
     + chg(isq2(isfr+isa),1,iset)*chg(isq2(jsa),1,iset)*rwi2(nax+jnum)
      elseif(isrx(nax+jnum).lt.0) then
      dercon=dercon-half*shift1(4)*
     + chg(isq2(isfr+isa),1,iset)*chg(isq2(jsa),1,iset)*rwi2(nax+jnum)
      endif
      else
      dercon=(chg(isq3(isfr+isa),1,iset)*chg(isq3(jsa),1,4)
     + +chg(isq3(isfr+isa),1,4)*chg(isq3(jsa),1,iset))
      if(isrx(nax+jnum).gt.1) dercon=dercon-half*shift0(4)*
     + chg(isq3(isfr+isa),1,iset)*chg(isq3(jsa),1,iset)*rwi2(nax+jnum)
      if(isrx(nax+jnum).lt.-1) dercon=dercon-half*shift1(4)*
     + chg(isq3(isfr+isa),1,iset)*chg(isq3(jsa),1,iset)*rwi2(nax+jnum)
      endif
      deriv(17,ipss)=deriv(17,ipss)+dercon*rwi1(nax+jnum)
      if(ireact.ne.0) then
      deriv(17,ipss)=deriv(17,ipss)+dercon*rffss/rwi2(nax+jnum)
      endif
#if defined(CAFE_FORCES)
      if(npgdec.gt.1) then
      dera(4,isga(isfr+isa))=dera(4,isga(isfr+isa))+
     + half*dercon*rwi1(nax+jnum)
      dera(4,isga(jsa))=dera(4,isga(jsa))+half*dercon*rwi1(nax+jnum)
      endif
#endif
  143 continue
      endif
      endif
      nax=nax+lssin(isa,ipss)
   41 continue
      endif
      endif
c
c     thermodynamic perturbation 1
c
      if(ipert2) then
      if(ip2(14)) then
      if(.not.lssscl) then
      do 44 iax=1,nax
      isa=isal(iax)
      jsa=jsal(iax)
      ep2(ipss)=ep2(ipss)
     + +facu(iax)*(vdw(isat(isa),isat(jsa),3,2)*rwi6(iax)
     + -vdw(isat(isa),isat(jsa),1,2))*rwi6(iax)
   44 continue
      else
      do 45 iax=1,nax
      isa=isal(iax)
      jsa=jsal(iax)
      rwi6(iax)=rwi2(iax)**3
      if(isrx(iax).gt.0) then
      rwi6(iax)=(one/(one/rwi2(iax)-shift0(1)+shift0(2)))**3
      elseif(isrx(iax).lt.0) then
      rwi6(iax)=(one/(one/rwi2(iax)-shift1(1)+shift1(2)))**3
      endif
      ep2(ipss)=ep2(ipss)
     + +facu(iax)*(vdw(isat(isa),isat(jsa),3,2)*rwi6(iax)
     + -vdw(isat(isa),isat(jsa),1,2))*rwi6(iax)
   45 continue
      endif
      ep2(ipss)=ep2(ipss)-eterml
      endif
      if(ip2(16).or.ip2(17)) then
      if(ipme.eq.0) then
      if(.not.lssscl) then
      do 46 iax=1,nax
      isa=isal(iax)
      jsa=jsal(iax)
      if(jmal(iax).ne.0) then
      q14=chg(isq2(isa),1,2)*chg(isq2(jsa),1,2)
      else
      q14=chg(isq3(isa),1,2)*chg(isq3(jsa),1,2)
      endif
      rwx(iax,1)=xi(iax,1)-xj(iax,1)
      rwx(iax,2)=xi(iax,2)-xj(iax,2)
      rwx(iax,3)=xi(iax,3)-xj(iax,3)
      rwi2(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      rwi1(iax)=sqrt(rwi2(iax))
      ep2(ipss)=ep2(ipss)+facu(iax)*q14*rwi1(iax)
      if(ireact.ne.0) then
      ep2(ipss)=ep2(ipss)+facu(iax)*q14*rffss/rwi2(iax)
      endif
   46 continue
      else
      do 47 iax=1,nax
      isa=isal(iax)
      jsa=jsal(iax)
      if(jmal(iax).ne.0) then
      q14=chg(isq2(isa),1,2)*chg(isq2(jsa),1,2)
      istt=0
      else
      q14=chg(isq3(isa),1,2)*chg(isq3(jsa),1,2)
      istt=1
      endif
      rwx(iax,1)=xi(iax,1)-xj(iax,1)
      rwx(iax,2)=xi(iax,2)-xj(iax,2)
      rwx(iax,3)=xi(iax,3)-xj(iax,3)
      rwi6(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      if(isrx(iax).gt.istt) then
      rwi6(iax)=one/(one/rwi6(iax)+shift0(2))
      elseif(isrx(iax).lt.-istt) then
      rwi6(iax)=one/(one/rwi6(iax)+shift1(2))
      endif
      rwi1(iax)=sqrt(rwi6(iax))
      ep2(ipss)=ep2(ipss)+facu(iax)*q14*rwi1(iax)
      if(ireact.ne.0) then
      ep2(ipss)=ep2(ipss)+facu(iax)*q14*rffss/rwi2(iax)
      endif
   47 continue
      endif
      else
      if(.not.lssscl) then
      do 146 iax=1,nax
      isa=isal(iax)
      jsa=jsal(iax)
      if(jmal(iax).ne.0) then
      q14=chg(isq2(isa),1,2)*chg(isq2(jsa),1,2)*
     + erfc(ealpha/rwi1(iax))
      else
      q14=chg(isq3(isa),1,2)*chg(isq3(jsa),1,2)*
     + erfc(ealpha/rwi1(iax))
      endif
      rwx(iax,1)=xi(iax,1)-xj(iax,1)
      rwx(iax,2)=xi(iax,2)-xj(iax,2)
      rwx(iax,3)=xi(iax,3)-xj(iax,3)
      rwi2(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      rwi1(iax)=sqrt(rwi2(iax))
      ep2(ipss)=ep2(ipss)+facu(iax)*q14*rwi1(iax)
      if(ireact.ne.0) then
      ep2(ipss)=ep2(ipss)+facu(iax)*q14*rffss/rwi2(iax)
      endif
  146 continue
      else
      do 147 iax=1,nax
      isa=isal(iax)
      jsa=jsal(iax)
      if(jmal(iax).ne.0) then
      q14=chg(isq2(isa),1,2)*chg(isq2(jsa),1,2)*
     + erfc(ealpha/rwi1(iax))
      istt=0
      else
      q14=chg(isq3(isa),1,2)*chg(isq3(jsa),1,2)*
     + erfc(ealpha/rwi1(iax))
      istt=1
      endif
      rwx(iax,1)=xi(iax,1)-xj(iax,1)
      rwx(iax,2)=xi(iax,2)-xj(iax,2)
      rwx(iax,3)=xi(iax,3)-xj(iax,3)
      rwi6(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      if(isrx(iax).gt.istt) then
      rwi6(iax)=one/(one/rwi6(iax)+shift0(2))
      elseif(isrx(iax).lt.-istt) then
      rwi6(iax)=one/(one/rwi6(iax)+shift1(2))
      endif
      rwi1(iax)=sqrt(rwi6(iax))
      ep2(ipss)=ep2(ipss)+facu(iax)*q14*rwi1(iax)
      if(ireact.ne.0) then
      ep2(ipss)=ep2(ipss)+facu(iax)*q14*rffss/rwi2(iax)
      endif
  147 continue
      endif
      endif
      ep2(ipss)=ep2(ipss)-etermq
      endif
      endif
c
c     thermodynamic perturbation 2
c
      if(ipert3) then
      if(ip3(14)) then
      if(.not.lssscl) then
      do 48 iax=1,nax
      isa=isal(iax)
      jsa=jsal(iax)
      ep3(ipss)=ep3(ipss)
     + +facu(iax)*(vdw(isat(isa),isat(jsa),3,3)*rwi6(iax)
     + -vdw(isat(isa),isat(jsa),1,3))*rwi6(iax)
   48 continue
      else
      do 49 iax=1,nax
      isa=isal(iax)
      jsa=jsal(iax)
      rwi6(iax)=rwi2(iax)**3
      if(isrx(iax).gt.0) then
      rwi6(iax)=(one/(one/rwi2(iax)-shift0(1)+shift0(3)))**3
      elseif(isrx(iax).lt.0) then
      rwi6(iax)=(one/(one/rwi2(iax)-shift1(1)+shift1(3)))**3
      endif
      ep3(ipss)=ep3(ipss)
     + +facu(iax)*(vdw(isat(isa),isat(jsa),3,3)*rwi6(iax)
     + -vdw(isat(isa),isat(jsa),1,3))*rwi6(iax)
   49 continue
      endif
      ep3(ipss)=ep3(ipss)-eterml
      endif
      if(ip2(16).or.ip2(17)) then
      if(ipme.eq.0) then
      if(.not.lssscl) then
      do 50 iax=1,nax
      isa=isal(iax)
      jsa=jsal(iax)
      if(jmal(iax).ne.0) then
      q14=chg(isq2(isa),1,3)*chg(isq2(jsa),1,3)
      else
      q14=chg(isq3(isa),1,3)*chg(isq3(jsa),1,3)
      endif
      rwx(iax,1)=xi(iax,1)-xj(iax,1)
      rwx(iax,2)=xi(iax,2)-xj(iax,2)
      rwx(iax,3)=xi(iax,3)-xj(iax,3)
      rwi2(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      rwi1(iax)=sqrt(rwi2(iax))
      ep3(ipss)=ep3(ipss)+facu(iax)*q14*rwi1(iax)
      if(ireact.ne.0) then
      ep3(ipss)=ep3(ipss)+facu(iax)*q14*rffss/rwi2(iax)
      endif
   50 continue
      else
      do 51 iax=1,nax
      isa=isal(iax)
      jsa=jsal(iax)
      if(jmal(iax).ne.0) then
      q14=chg(isq2(isa),1,3)*chg(isq2(jsa),1,3)
      istt=0
      else
      q14=chg(isq3(isa),1,3)*chg(isq3(jsa),1,3)
      istt=1
      endif
      rwx(iax,1)=xi(iax,1)-xj(iax,1)
      rwx(iax,2)=xi(iax,2)-xj(iax,2)
      rwx(iax,3)=xi(iax,3)-xj(iax,3)
      rwi6(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      if(isrx(iax).gt.istt) then
      rwi6(iax)=one/(one/rwi6(iax)+shift0(3))
      elseif(isrx(iax).lt.-istt) then
      rwi6(iax)=one/(one/rwi6(iax)+shift1(3))
      endif
      rwi1(iax)=sqrt(rwi6(iax))
      ep3(ipss)=ep3(ipss)+facu(iax)*q14*rwi1(iax)
      if(ireact.ne.0) then
      ep3(ipss)=ep3(ipss)+facu(iax)*q14*rffss/rwi2(iax)
      endif
   51 continue
      endif
      else
      if(.not.lssscl) then
      do 150 iax=1,nax
      isa=isal(iax)
      jsa=jsal(iax)
      if(jmal(iax).ne.0) then
      q14=chg(isq2(isa),1,3)*chg(isq2(jsa),1,3)*
     + erfc(ealpha/rwi1(iax))
      else
      q14=chg(isq3(isa),1,3)*chg(isq3(jsa),1,3)*
     + erfc(ealpha/rwi1(iax))
      endif
      rwx(iax,1)=xi(iax,1)-xj(iax,1)
      rwx(iax,2)=xi(iax,2)-xj(iax,2)
      rwx(iax,3)=xi(iax,3)-xj(iax,3)
      rwi2(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      rwi1(iax)=sqrt(rwi2(iax))
      ep3(ipss)=ep3(ipss)+facu(iax)*q14*rwi1(iax)
      if(ireact.ne.0) then
      ep3(ipss)=ep3(ipss)+facu(iax)*q14*rffss/rwi2(iax)
      endif
  150 continue
      else
      do 151 iax=1,nax
      isa=isal(iax)
      jsa=jsal(iax)
      if(jmal(iax).ne.0) then
      q14=chg(isq2(isa),1,3)*chg(isq2(jsa),1,3)*
     + erfc(ealpha/rwi1(iax))
      istt=0
      else
      q14=chg(isq3(isa),1,3)*chg(isq3(jsa),1,3)*
     + erfc(ealpha/rwi1(iax))
      istt=1
      endif
      rwx(iax,1)=xi(iax,1)-xj(iax,1)
      rwx(iax,2)=xi(iax,2)-xj(iax,2)
      rwx(iax,3)=xi(iax,3)-xj(iax,3)
      rwi6(iax)=one/(rwx(iax,1)**2+rwx(iax,2)**2+rwx(iax,3)**2)
      if(isrx(iax).gt.istt) then
      rwi6(iax)=one/(one/rwi6(iax)+shift0(3))
      elseif(isrx(iax).lt.-istt) then
      rwi6(iax)=one/(one/rwi6(iax)+shift1(3))
      endif
      rwi1(iax)=sqrt(rwi6(iax))
      ep3(ipss)=ep3(ipss)+facu(iax)*q14*rwi1(iax)
      if(ireact.ne.0) then
      ep3(ipss)=ep3(ipss)+facu(iax)*q14*rffss/rwi2(iax)
      endif
  151 continue
      endif
      endif
      ep3(ipss)=ep3(ipss)-etermq
      endif
      endif
   13 continue
   11 continue
c
c     accumulate radial distribution function contributions from
c     the excluded pairlist
c
c      if(ifstep-1.eq.((ifstep-1)/nfrdf)*nfrdf.and.ngrss.gt.0) then
c      do 52 isx=1,nsx
c      isa=idsx(isx)
c      jsa=jdsx(isx)
c      do 53 igc=1,ngc
c      if(ngt(igc).eq.3) then
c      if((isa.eq.iagc(igc).and.jsa.eq.jagc(igc)).or.
c     + (isa.eq.iagc(igc).and.jsa.eq.jagc(igc))) then
c      igr=igrc(igc)
c      indx=int(sqrt((xs(isa,1)-xs(jsa,1))**2+(xs(isa,2)-xs(jsa,2))**2+
c     + (xs(isa,3)-xs(jsa,3))**2)/drdf)
c      if(indx.gt.ngl) indx=ngl
c      rdf(indx,igr)=rdf(indx,igr)+rdfvol
c      endif
c      endif
c   53 continue
c   52 continue
c      endif
c
c
#if defined(CAFE_FORCES)
      return
      end
      subroutine cf_fsb(nbonds,indexl,msb,msp,ibnd,bnd,rbnd,
     + natoms,ndim,igan,isgm,imol,idyn,ichg,chg,xs,fs,ess,lpbc,lpbcs,
     + lupden,lupdti,dera,lseq)
c
c $Id: cf_f.fh 19708 2010-10-29 18:04:21Z d3y133 $
c
c     cf_fsb returns forces and energies for solute bonds
c
c     =====================================================
c
c     description of arguments
c     ------------------------
c
c     in: integer nbonds     = number of bonds to consider
c         integer indexl     = index list
c
c         integer idsb(msb)  = global atom id i
c         integer jdsb(msb)  = global atom id j
c         integer isbs(msb)  = bond type
c         real*8 cdsb(msb,6) = bond force constants
c         real*8 ddsb(msb,6) = bond reference value
c         real*8 rdsb(msb)   = bond value
c
c         integer natoms     = number of atoms in arrays
c         integer ndim       = leading dimension atom arrays
c         integer igan(ndim) = global atom numbers
c         integer imol(ndim) = atom molecule fraction
c         integer idyn(ndim) = atom dynamics type
c         real*8 qs(ndim)    = atomic charges
c         real*8 xs(ndim,3)  = atom coordinates
c
c    out: real*8 fs(ndim,3)  = atom forces (ACCUMULATED)
c         real*8 usb(msb)    = bond energies
c
      implicit none
c
#include "cf_common.fh"
c
c     declaration of arguments
c     ------------------------
c
      integer msb,msp
      integer ibnd(msb,3)
      real*8 bnd(msb,msp,mset),rbnd(msb,2)
      integer isgm(msa),lseq(mseq)
c
      integer nbonds
      integer indexl(nbonds)
c
      logical lpbc,lpbcs,lupden,lupdti
      real*8 dera(6,nsatot)
c
      integer natoms,ndim
      integer igan(ndim),imol(ndim),idyn(ndim),ichg(ndim)
      real*8 chg(mqt,mqp,mset)
      real*8 xs(ndim,3),fs(ndim,3)
      real*8 dx(3)
c
c     declaration of local variables
c     ------------------------------
c
      integer i,j,isb,isa,jsa,isf,jsf,ibset
      real*8 factu,dercon,qij,ferfc,fderfc,qijp2,qijp3
      real*8 bond,dbond,for,dfor,dfs1,dfs2,dfs3,eterm
      real*8 xs1,xs2,xs3,rss,rss2,rssi,rss2i,ess(msf,msf,mpe,2)
c
#include "cf_funcs_dec.fh"
#include "bitops_decls.fh"
#include "cf_funcs_sfn.fh"
#include "bitops_funcs.fh"
c
c     solute bonds
c     ============
c
cx      write(*,'(4i7)') (i,(ibnd(i,j),j=1,3),i=1,msb)
c
cx      write(*,'(10i7)') (igan(j),j=1,natoms)
cx      write(*,'(a,i7)') 'bonds  ',nbonds
cx      write(*,'(10i7)') (indexl(j),j=1,nbonds)
c
      do 1 i=1,nbonds
c
c     find index into list of bonds
c
      isb=indexl(i)
c
c     find local atom numbers involved in this bond
c
      isa=0
      jsa=0
      do 2 j=1,natoms
      if(ibnd(isb,1).eq.igan(j)) isa=j
      if(ibnd(isb,2).eq.igan(j)) jsa=j
    2 continue
c
      if(nfhop.eq.0) then
      ibset=iset
      else
      ibset=lseq(isgm(isa))
      endif
c
c      write(*,'(a,5i5)') 'bond ',i,nbonds,isb,isa,jsa
c
c     find solute molecule numbers involved in this constrained
c
      isf=imol(isa)
      jsf=imol(jsa)
c      write(*,'(a,6i5)') 'bond ',i,nbonds,isa,jsa,isf,jsf
c
c     determine actual distance between the atoms
c
      xs1=xs(isa,1)-xs(jsa,1)
      xs2=xs(isa,2)-xs(jsa,2)
      xs3=xs(isa,3)-xs(jsa,3)
c
c     periodic boundary conditions
c
      if(lpbc.or.lpbcs) then
      dx(1)=xs1
      dx(2)=xs2
      dx(3)=xs3
      call cf_pbc(1,dx,1,dx,1,0,1,1)
      xs1=dx(1)
      xs2=dx(2)
      xs3=dx(3)
      endif
c
      rss2=xs1**2+xs2**2+xs3**2
      if(rss2.gt.tiny) then
      rss=sqrt(rss2)
      rssi=one/rss
      rss2i=rssi*rssi
      else
      rss=zero
      rssi=one
      rss2i=one
      endif
c
      rbnd(isb,1)=rss
c
c     if bond not constrained or pme
c
      if(iand(ibnd(isb,3),icnstr).eq.0.or.ipme.ne.0) then
c
c     if bond not constrained
c
      if(iand(ibnd(isb,3),icnstr).eq.0) then
c
c     determine fraction of energy to be counted
c     this depends on the atoms being dynamic or fixed
c
      factu=zero
      if(iand(idyn(isa),mdynam).eq.ldynam.or.
     + iand(idyn(jsa),mdynam).eq.ldynam) factu=one
c      if((iand(idyn(isa),mdynam).eq.ldynam.and.
c     + iand(idyn(jsa),mdynam).ne.ldynam) .or.
c     + (iand(idyn(isa),mdynam).ne.ldynam.and.
c     + iand(idyn(jsa),mdynam).eq.ldynam)) factu=half
      if(includ.eq.1) factu=one
c
c     find reference bond length and force constant
c
      bond=bnd(isb,1,ibset)
      for=bnd(isb,2,ibset)
c
      dbond=rss-bond
c
c     evaluate energies and forces
c
      rbnd(isb,2)=half*for*dbond*dbond
      eterm=zero
      if(lupden) then
      ess(isf,isf,1,1)=ess(isf,isf,1,1)+half*factu*rbnd(isb,2)
      ess(jsf,jsf,1,1)=ess(jsf,jsf,1,1)+half*factu*rbnd(isb,2)
      endif
      eterm=factu*rbnd(isb,2)
      dfor=for*dbond*rssi
      dfs1=dfor*xs1
      dfs2=dfor*xs2
      dfs3=dfor*xs3
      fs(isa,1)=fs(isa,1)-dfs1
      fs(jsa,1)=fs(jsa,1)+dfs1
      fs(isa,2)=fs(isa,2)-dfs2
      fs(jsa,2)=fs(jsa,2)+dfs2
      fs(isa,3)=fs(isa,3)-dfs3
      fs(jsa,3)=fs(jsa,3)+dfs3
c
c     evaluate hessian

cx      if(ihess.gt.0) then
cx      isag=igan(isa)
cx      jsag=igan(jsa)
c
cx      hess=for*(one-bond*rssi*(one+xs1*xs1*rss2i))
cx      hs(isa,1,1,isag)=hs(isa,1,1,isag)+hess
cx      hs(isa,1,1,jsag)=hs(isa,1,1,jsag)-hess
cx      hs(jsa,1,1,jsag)=hs(jsa,1,1,jsag)-hess
cx      hs(jsa,1,1,isag)=hs(jsa,1,1,isag)+hess
c
cx      hess=for*(one-bond*rssi*(one+xs2*xs2*rss2i))
cx      hs(isa,2,2,isag)=hs(isa,2,2,isag)+hess
cx      hs(isa,2,2,jsag)=hs(isa,2,2,jsag)-hess
cx      hs(jsa,2,2,jsag)=hs(jsa,2,2,jsag)-hess
cx      hs(jsa,2,2,isag)=hs(jsa,2,2,isag)+hess
c
cx      hess=for*(one-bond*rssi*(one+xs3*xs3*rss2i))
cx      hs(isa,3,3,isag)=hs(isa,3,3,isag)+hess
cx      hs(isa,3,3,jsag)=hs(isa,3,3,jsag)-hess
cx      hs(jsa,3,3,jsag)=hs(jsa,3,3,jsag)-hess
cx      hs(jsa,3,3,isag)=hs(jsa,3,3,isag)+hess
c
cx      hess=for*bond*xs1*xs2*rss2i*rssi
cx      hs(isa,1,2,isag)=hs(isa,1,2,isag)+hess
cx      hs(isa,2,1,isag)=hs(isa,2,1,isag)+hess
cx      hs(isa,1,2,jsag)=hs(isa,1,2,jsag)-hess
cx      hs(isa,2,1,jsag)=hs(isa,2,1,jsag)-hess
cx      hs(jsa,1,2,jsag)=hs(jsa,1,2,jsag)-hess
cx      hs(jsa,2,1,jsag)=hs(jsa,2,1,jsag)-hess
cx      hs(jsa,1,2,isag)=hs(jsa,1,2,isag)+hess
cx      hs(jsa,2,1,isag)=hs(jsa,2,1,isag)+hess
c
cx      hess=for*bond*xs1*xs3*rss2i*rssi
cx      hs(isa,1,3,isag)=hs(isa,1,3,isag)+hess
cx      hs(isa,3,1,isag)=hs(isa,3,1,isag)+hess
cx      hs(isa,1,3,jsag)=hs(isa,1,3,jsag)-hess
cx      hs(isa,3,1,jsag)=hs(isa,3,1,jsag)-hess
cx      hs(jsa,1,3,jsag)=hs(jsa,1,3,jsag)-hess
cx      hs(jsa,3,1,jsag)=hs(jsa,3,1,jsag)-hess
cx      hs(jsa,1,3,isag)=hs(jsa,1,3,isag)+hess
cx      hs(jsa,3,1,isag)=hs(jsa,3,1,isag)+hess
c
cx      hess=for*bond*xs2*xs3*rss2i*rssi
cx      hs(isa,2,3,isag)=hs(isa,2,3,isag)+hess
cx      hs(isa,3,2,isag)=hs(isa,3,2,isag)+hess
cx      hs(isa,2,3,jsag)=hs(isa,2,3,jsag)-hess
cx      hs(isa,3,2,jsag)=hs(isa,3,2,jsag)-hess
cx      hs(jsa,2,3,jsag)=hs(jsa,2,3,jsag)-hess
cx      hs(jsa,3,2,jsag)=hs(jsa,3,2,jsag)-hess
cx      hs(jsa,2,3,isag)=hs(jsa,2,3,isag)+hess
cx      hs(jsa,3,2,isag)=hs(jsa,3,2,isag)+hess
c
cx      endif
c
      if(lupdti) then
c
c     for thermodynamic perturbations evaluate the energies using
c     the 'perturbed' parameters in set 2 and/or 3
c
      if(ip2(18))
     + ep2(1)=ep2(1)-eterm+factu*half*bnd(isb,2,2)*(rss-bnd(isb,1,2))**2
      if(ip3(18))
     + ep3(1)=ep3(1)-eterm+factu*half*bnd(isb,2,3)*(rss-bnd(isb,1,3))**2
c
c     for thermodynamic integrations evaluate the derivative
c
      if(ith(18)) then
      dercon=dbond*(half*dbond*bnd(isb,2,4)-for*bnd(isb,1,4))
      deriv(18,1)=deriv(18,1)+dercon
      if(npgdec.gt.1) then
      dera(5,ibnd(isb,1))=dera(5,ibnd(isb,1))+half*dercon
      dera(5,ibnd(isb,2))=dera(5,ibnd(isb,2))+half*dercon
      endif
      endif
c
      endif
      endif
c
      if(ipme.ne.0) then
      qij=chg(ichg(isa),1,ibset)*chg(ichg(jsa),1,ibset)
      ferfc=one-erfc(ealpha*rss)
      fderfc=-(ealpha*derfc(ealpha*rss))
      epmecs=epmecs-ferfc*qij*rssi
      if(lupden) then
      ess(isf,isf,9,1)=ess(isf,isf,9,1)-half*ferfc*qij*rssi
      ess(jsf,jsf,9,1)=ess(jsf,jsf,9,1)-half*ferfc*qij*rssi
      if(ipert2) then
      qijp2=chg(ichg(isa),1,2)*chg(ichg(jsa),1,2)
      ess(isf,isf,10,1)=ess(isf,isf,10,1)-half*ferfc*qijp2*rssi
      ess(jsf,jsf,10,1)=ess(jsf,jsf,10,1)-half*ferfc*qijp2*rssi
      endif
      if(ipert3) then
      qijp3=chg(ichg(isa),1,3)*chg(ichg(jsa),1,3)
      ess(isf,isf,11,1)=ess(isf,isf,11,1)-half*ferfc*qijp3*rssi
      ess(jsf,jsf,11,1)=ess(jsf,jsf,11,1)-half*ferfc*qijp3*rssi
      endif
      endif
      dfor=-(qij*rssi*rssi*(ferfc*rssi-fderfc))
      dfs1=dfor*xs1
      dfs2=dfor*xs2
      dfs3=dfor*xs3
      fs(isa,1)=fs(isa,1)-dfs1
      fs(jsa,1)=fs(jsa,1)+dfs1
      fs(isa,2)=fs(isa,2)-dfs2
      fs(jsa,2)=fs(jsa,2)+dfs2
      fs(isa,3)=fs(isa,3)-dfs3
      fs(jsa,3)=fs(jsa,3)+dfs3
      vpmeb(1)=vpmeb(1)+dfs1*xs1
      vpmeb(2)=vpmeb(2)+dfs2*xs1
      vpmeb(3)=vpmeb(3)+dfs3*xs1
      vpmeb(4)=vpmeb(4)+dfs2*xs2
      vpmeb(5)=vpmeb(5)+dfs3*xs2
      vpmeb(6)=vpmeb(6)+dfs3*xs3
      endif
c
      endif
c
    1 continue
c
      return
      end
      subroutine cf_fsh(nangls,indexl,msh,msp,iang,ang,rang,rub,
     + natoms,ndim,igan,isgm,imol,idyn,ichg,chg,xs,fs,ess,lpbc,lpbcs,
     + lupden,lupdti,dera,lseq)
c
c $Id: cf_f.fh 19708 2010-10-29 18:04:21Z d3y133 $
c
c     cf_fsh returns forces and energies for solute angles
c
c     =======================================================
c
c     description of arguments
c     ------------------------
c
c     in: integer nangls     = number of angles to consider
c         integer indexl     = index list
c
c         integer idsh(msh)  = global atom id i
c         integer jdsh(msh)  = global atom id j
c         integer kdsh(msh)  = global atom id k
c         real*8 cdsh(msh,6) = angle force constants
c         real*8 ddsh(msh,6) = angle reference value
c         real*8 rdsh(msh)   = angle value
c
c         integer natoms     = number of atoms in arrays
c         integer ndim       = leading dimension atom arrays
c         integer igan(ndim) = global atom numbers
c         integer imol(ndim) = atom molecule fraction
c         integer idyn(ndim) = atom dynamics type
c         real*8 qs(ndim)    = atomic charges
c         real*8 xs(ndim,3)  = atom coordinates
c
c         logical lupden     = if .true. energies are updated
c
c    out: real*8 fs(ndim,3)  = atom forces (ACCUMULATED)
c         real*8 ush(msh)    = angle energies
c
      implicit none
c
#include "cf_common.fh"
c
c     declaration of arguments
c     ------------------------
c
      integer msh,msp
      integer iang(msh,4)
      real*8 ang(msh,msp,mset),rang(msh,2),rub(msh,2)
      integer isgm(msa),lseq(mseq)
c
      integer nangls
      integer indexl(nangls)
c
c      integer idsh(msh),jdsh(msh),kdsh(msh)
c      real*8 cdsh(msh,6),ddsh(msh,6),rdsh(msh),ush(msh)
c
      integer natoms,ndim
      integer igan(ndim),imol(ndim),idyn(ndim),ichg(ndim)
      real*8 chg(mqt,mqp,mset)
      real*8 xs(ndim,3),fs(ndim,3),ess(msf,msf,mpe,2)
c
      logical lpbc,lpbcs,lupden,lupdti
      real*8 dera(6,nsatot)
c
c     declaration of local variables
c     ------------------------------
c
      integer i,j,ish,isa,jsa,ksa,isf,jsf,ksf,ibset
      integer ifacu
      real*8 angle,dangle,for,dfor,dfs,phi,cphi,sphi,factu,dercon
      real*8 xsijx,xskjx,xsijy,xskjy,xsijz,xskjz
      real*8 rsij2,rskj2,rsij2i,rskj2i,rsikji,dx(3),eterm
      real*8 qij,xs1,xs2,xs3,rss,rsi,ferfc,fderfc,dfs1,dfs2,dfs3
      real*8 qijp2,qijp3
      real*8 rb,bond,rss2,rssi,rss2i,dbond
c
#include "cf_funcs_dec.fh"
#include "bitops_decls.fh"
#include "cf_funcs_sfn.fh"
#include "bitops_funcs.fh"
c
c     solute angles
c     =============
c
      do 1 i=1,nangls
c
c     find index into list of angles
c     ------------------------------
c
      ish=indexl(i)
c
c     find local atom numbers involved in this angle
c     ----------------------------------------------
c
      isa=0
      jsa=0
      ksa=0
c
      do 2 j=1,natoms
      if(iang(ish,1).eq.igan(j)) isa=j
      if(iang(ish,2).eq.igan(j)) jsa=j
      if(iang(ish,3).eq.igan(j)) ksa=j
    2 continue
c
c     get solute molecule numbers involved in this angle
c     --------------------------------------------------
c
      isf=imol(isa)
      jsf=imol(jsa)
      ksf=imol(ksa)
c
c     determine the factor for the energies depending on
c     atoms being dynamic or fixed
c     --------------------------------------------------
c
      ifacu=0
      if(iand(idyn(isa),mdynam).eq.ldynam) ifacu=ifacu+1
      if(iand(idyn(jsa),mdynam).eq.ldynam) ifacu=ifacu+1
      if(iand(idyn(ksa),mdynam).eq.ldynam) ifacu=ifacu+1
c      factu=dble(ifacu)/three
      factu=one
      if(ifacu.eq.0) factu=zero
      if(includ.eq.1) factu=one
c
c     get reference angle and force constant
c     --------------------------------------
c
      if(nfhop.eq.0) then
      angle=ang(ish,1,iset)
      for=ang(ish,2,iset)
      else
      angle=ang(ish,1,lseq(isgm(jsa)))
      for=ang(ish,2,lseq(isgm(jsa)))
      endif
c
c     determine the angle
c     -------------------
c
      xsijx=xs(isa,1)-xs(jsa,1)
      xskjx=xs(ksa,1)-xs(jsa,1)
      xsijy=xs(isa,2)-xs(jsa,2)
      xskjy=xs(ksa,2)-xs(jsa,2)
      xsijz=xs(isa,3)-xs(jsa,3)
      xskjz=xs(ksa,3)-xs(jsa,3)
c
c     periodic boundary conditions
c
      if(lpbc.or.lpbcs) then
      dx(1)=xsijx
      dx(2)=xsijy
      dx(3)=xsijz
      call cf_pbc(1,dx,1,dx,1,0,1,1)
      xsijx=dx(1)
      xsijy=dx(2)
      xsijz=dx(3)
      dx(1)=xskjx
      dx(2)=xskjy
      dx(3)=xskjz
      call cf_pbc(1,dx,1,dx,1,0,1,1)
      xskjx=dx(1)
      xskjy=dx(2)
      xskjz=dx(3)
      endif
c
      rsij2=xsijx*xsijx+xsijy*xsijy+xsijz*xsijz
      rskj2=xskjx*xskjx+xskjy*xskjy+xskjz*xskjz
      cphi=xsijx*xskjx+xsijy*xskjy+xsijz*xskjz
      rsij2i=one/rsij2
      rskj2i=one/rskj2
      rsikji=one/sqrt(rsij2*rskj2)
      cphi=cphi*rsikji
      if(cphi.lt.-one) cphi=-one
      if(cphi.gt. one) cphi= one
      phi=acos(cphi)
      rang(ish,1)=phi
      dangle=phi-angle
c
c     evaluate energies and forces
c     ----------------------------
c
      rang(ish,2)=half*for*dangle*dangle
      eterm=zero
      if(lupden) then
      ess(isf,isf,2,1)=ess(isf,isf,2,1)+third*factu*rang(ish,2)
      ess(jsf,jsf,2,1)=ess(jsf,jsf,2,1)+third*factu*rang(ish,2)
      ess(ksf,ksf,2,1)=ess(ksf,ksf,2,1)+third*factu*rang(ish,2)
      endif
      eterm=factu*rang(ish,2)
      sphi=sin(phi)
      if(abs(sphi).lt.small) sphi=small
      dfor=for*dangle/sphi
      dfs=dfor*(xskjx*rsikji-xsijx*rsij2i*cphi)
      fs(isa,1)=fs(isa,1)+dfs
      fs(jsa,1)=fs(jsa,1)-dfs
      dfs=dfor*(xsijx*rsikji-xskjx*rskj2i*cphi)
      fs(ksa,1)=fs(ksa,1)+dfs
      fs(jsa,1)=fs(jsa,1)-dfs
      dfs=dfor*(xskjy*rsikji-xsijy*rsij2i*cphi)
      fs(isa,2)=fs(isa,2)+dfs
      fs(jsa,2)=fs(jsa,2)-dfs
      dfs=dfor*(xsijy*rsikji-xskjy*rskj2i*cphi)
      fs(ksa,2)=fs(ksa,2)+dfs
      fs(jsa,2)=fs(jsa,2)-dfs
      dfs=dfor*(xskjz*rsikji-xsijz*rsij2i*cphi)
      fs(isa,3)=fs(isa,3)+dfs
      fs(jsa,3)=fs(jsa,3)-dfs
      dfs=dfor*(xsijz*rsikji-xskjz*rskj2i*cphi)
      fs(ksa,3)=fs(ksa,3)+dfs
      fs(jsa,3)=fs(jsa,3)-dfs
c
c     evaluate the hessian
c     -------------------
c
cx      if(ihess.gt.0) then
cx      endif
c
      if(lupdti) then
c
c     for thermodynamic perturbations evaluate the energies
c     using 'perturbed' parameters of set 2 and/or set 3
c     -----------------------------------------------------
c
      if(ip2(20))
     + ep2(1)=ep2(1)-eterm+factu*half*ang(ish,2,2)*(phi-ang(ish,1,2))**2
      if(ip3(20))
     + ep3(1)=ep3(1)-eterm+factu*half*ang(ish,2,3)*(phi-ang(ish,1,3))**2
c
c     for thermodynamic integrations evaluate the derivative
c     ------------------------------------------------------
c
      if(ith(20)) then
      dercon=dangle*(half*dangle*ang(ish,2,4)-for*ang(ish,1,4))
      deriv(20,1)=deriv(20,1)+dercon
      if(npgdec.gt.1) then
      dera(5,iang(ish,1))=dera(5,iang(ish,1))+third*dercon
      dera(5,iang(ish,2))=dera(5,iang(ish,2))+third*dercon
      dera(5,iang(ish,3))=dera(5,iang(ish,3))+third*dercon
      endif
      endif
      endif
c
c     particle-mesh Ewald correction energy and forces
c     ------------------------------------------------
c
      if(ipme.ne.0) then
      isf=imol(isa)
      ksf=imol(ksa)
      qij=chg(ichg(isa),1,1)*chg(ichg(ksa),1,1)
      xs1=xs(isa,1)-xs(ksa,1)
      xs2=xs(isa,2)-xs(ksa,2)
      xs3=xs(isa,3)-xs(ksa,3)
      rss=sqrt(xs1**2+xs2**2+xs3**2)
      rsi=one/rss
      ferfc=one-erfc(ealpha*rss)
      fderfc=-(ealpha*derfc(ealpha*rss))
      epmecs=epmecs-ferfc*qij*rsi
      if(lupden) then
      ess(isf,isf,9,1)=ess(isf,isf,9,1)-half*ferfc*qij*rsi
      ess(ksf,ksf,9,1)=ess(ksf,ksf,9,1)-half*ferfc*qij*rsi
      if(ipert2) then
      qijp2=chg(ichg(isa),1,2)*chg(ichg(ksa),1,2)
      ess(isf,isf,10,1)=ess(isf,isf,10,1)-half*ferfc*qijp2*rsi
      ess(ksf,ksf,10,1)=ess(ksf,ksf,10,1)-half*ferfc*qijp2*rsi
      endif
      if(ipert2) then
      qijp3=chg(ichg(isa),1,3)*chg(ichg(ksa),1,3)
      ess(isf,isf,11,1)=ess(isf,isf,11,1)-half*ferfc*qijp3*rsi
      ess(ksf,ksf,11,1)=ess(ksf,ksf,11,1)-half*ferfc*qijp3*rsi
      endif
      endif
      dfor=-(qij*rsi*rsi*(ferfc*rsi-fderfc))
      dfs1=dfor*xs1
      dfs2=dfor*xs2
      dfs3=dfor*xs3
      fs(isa,1)=fs(isa,1)-dfs1
      fs(ksa,1)=fs(ksa,1)+dfs1
      fs(isa,2)=fs(isa,2)-dfs2
      fs(ksa,2)=fs(ksa,2)+dfs2
      fs(isa,3)=fs(isa,3)-dfs3
      fs(ksa,3)=fs(ksa,3)+dfs3
      vpmeb(1)=vpmeb(1)+dfs1*xs1
      vpmeb(2)=vpmeb(2)+dfs2*xs1
      vpmeb(3)=vpmeb(3)+dfs3*xs1
      vpmeb(4)=vpmeb(4)+dfs2*xs2
      vpmeb(5)=vpmeb(5)+dfs3*xs2
      vpmeb(6)=vpmeb(6)+dfs3*xs3
      endif
c
    1 continue
c
      if(iffld.eq.2) then
c
c     Urey-Bradley solute angles
c     ==========================
c
      do 3 i=1,nangls
c
c     find index into list of angles
c     ------------------------------
c
      ish=indexl(i)
c
c     find local atom numbers involved in this angle
c     ----------------------------------------------
c
      isa=0
      ksa=0
c
      do 4 j=1,natoms
      if(iang(ish,1).eq.igan(j)) isa=j
      if(iang(ish,3).eq.igan(j)) ksa=j
    4 continue
      isf=imol(isa)
      ksf=imol(ksa)
c
      if(nfhop.eq.0) then
      ibset=iset
      else
      ibset=lseq(isgm(isa))
      endif
c
c     find reference bond length and force constant
c
      bond=ang(ish,3,ibset)
      for=ang(ish,4,ibset)
c
      if(for.gt.0.0d0) then
c
c     determine actual distance between the atoms
c
      xs1=xs(isa,1)-xs(ksa,1)
      xs2=xs(isa,2)-xs(ksa,2)
      xs3=xs(isa,3)-xs(ksa,3)
c
c     periodic boundary conditions
c
      if(lpbc.or.lpbcs) then
      dx(1)=xs1
      dx(2)=xs2
      dx(3)=xs3
      call cf_pbc(1,dx,1,dx,1,0,1,1)
      xs1=dx(1)
      xs2=dx(2)
      xs3=dx(3)
      endif
c
      rss2=xs1**2+xs2**2+xs3**2
      if(rss2.gt.tiny) then
      rss=sqrt(rss2)
      rssi=one/rss
      rss2i=rssi*rssi
      else
      rss=zero
      rssi=one
      rss2i=one
      endif
c
c     determine fraction of energy to be counted
c     this depends on the atoms being dynamic or fixed
c
      factu=zero
      if(iand(idyn(isa),mdynam).eq.ldynam.or.
     + iand(idyn(ksa),mdynam).eq.ldynam) factu=one
c      if((iand(idyn(isa),mdynam).eq.ldynam.and.
c     + iand(idyn(ksa),mdynam).ne.ldynam) .or.
c     + (iand(idyn(isa),mdynam).ne.ldynam.and.
c     + iand(idyn(ksa),mdynam).eq.ldynam)) factu=half
      if(includ.eq.1) factu=one
c
      dbond=rss-bond
c
c     evaluate energies and forces
c
      rb=half*for*dbond*dbond
      eterm=zero
      if(lupden) then
      ess(isf,isf,13,1)=ess(isf,isf,13,1)+half*factu*rb
      ess(ksf,ksf,13,1)=ess(ksf,ksf,13,1)+half*factu*rb
      endif
      eterm=factu*rb
      dfor=for*dbond*rssi
      dfs1=dfor*xs1
      dfs2=dfor*xs2
      dfs3=dfor*xs3
      fs(isa,1)=fs(isa,1)-dfs1
      fs(ksa,1)=fs(ksa,1)+dfs1
      fs(isa,2)=fs(isa,2)-dfs2
      fs(ksa,2)=fs(ksa,2)+dfs2
      fs(isa,3)=fs(isa,3)-dfs3
      fs(ksa,3)=fs(ksa,3)+dfs3
c
      rub(ish,1)=rss
      rub(ish,2)=eterm
c
      if(lupdti) then
c
c     for thermodynamic perturbations evaluate the energies using
c     the 'perturbed' parameters in set 2 and/or 3
c
      if(ip2(18))
     + ep2(1)=ep2(1)-eterm+factu*half*ang(ish,4,2)*(rss-ang(ish,3,2))**2
      if(ip3(18))
     + ep3(1)=ep3(1)-eterm+factu*half*ang(ish,4,3)*(rss-ang(ish,3,3))**2
c
c     for thermodynamic integrations evaluate the derivative
c
      if(ith(18)) then
      dercon=dbond*(half*dbond*ang(ish,4,4)-for*ang(ish,3,4))
      deriv(20,1)=deriv(20,1)+dercon
      if(npgdec.gt.1) then
      dera(5,iang(ish,1))=dera(5,iang(ish,1))+half*dercon
      dera(5,iang(ish,3))=dera(5,iang(ish,3))+half*dercon
      endif
      endif
c
      endif
c
      endif
c
    3 continue
c
      endif
c
      return
      end
      subroutine cf_fsd(ndihes,indexl,msd,msp,idih,dih,rdih,
     + natoms,ndim,igan,isgm,imol,idyn,xs,fs,ess,lpbc,lpbcs,lupden,
     + lupdti,dera,lseq)
c
c $Id: cf_f.fh 19708 2010-10-29 18:04:21Z d3y133 $
c
c     cf_fsd returns forces and energies for solute angles
c
c     =======================================================
c
c     description of arguments
c     ------------------------
c
c     in: integer ndihes     = number of angles to consider
c         integer indexl     = index list
c
c         integer idsd(msd)  = global atom id i
c         integer jdsd(msd)  = global atom id j
c         integer kdsd(msd)  = global atom id k
c         integer ldsd(msd)  = global atom id l
c         real*8 cdsd(msd,6) = dihedral angle force constants
c         real*8 ddsd(msd,6) = dihedral angle reference value
c         real*8 edsd(msd,6) = dihedral angle multiplicity
c         real*8 rdsd(msd)   = dihedral angle value
c
c         integer natoms     = number of atoms in arrays
c         integer ndim       = leading dimension atom arrays
c         integer igan(ndim) = global atom numbers
c         integer imol(ndim) = atom molecule fraction
c         integer idyn(ndim) = atom dynamics type
c         real*8 xs(ndim,3)  = atom coordinates
c
c         logical lupden     = if .true. energies are updated
c
c    out: real*8 fs(ndim,3)  = atom forces (ACCUMULATED)
c         real*8 usd(msd)    = dihedral angle energies
c
      implicit none
c
#include "cf_common.fh"
c
c     declaration of arguments
c     ------------------------
c
      integer msd,msp
      integer idih(msd,5)
      real*8 dih(msd,msp,mset),rdih(msd,2)
      integer isgm(msa),lseq(mseq)
c
      integer ndihes
      integer indexl(ndihes)
c
      integer natoms,ndim
      integer igan(ndim),imol(ndim),idyn(ndim)
      real*8 xs(ndim,3),fs(ndim,3),ess(msf,msf,mpe,2)
c
      logical lpbc,lpbcs,lupden,lupdti
      real*8 dera(6,nsatot)
c
c     declaration of local variables
c     ------------------------------
c
      integer i,j,isd,isa,jsa,ksa,lsa,isf,jsf,ksf,lsf
      integer ifacu
      real*8 ang,for,dfor,phi,cphi,cphii,sphi,sphii
      real*8 rmul,factu,dercon
      real*8 xsijx,xskjx,xsijy,xskjy,xsijz,xskjz
      real*8 xsklx,xsjlx,xskly,xsjly,xsklz,xsjlz
      real*8 xsikx,xsiky,xsikz,xmx,xmy,xmz,xnx,xny,xnz,xdx,xdy,xdz
      real*8 xex,xey,xez,xox,xoy,xoz,xpx,xpy,xpz
      real*8 dfsix,dfsiy,dfsiz,dfsjx,dfsjy,dfsjz
      real*8 dfskx,dfsky,dfskz,dfslx,dfsly,dfslz
      real*8 rm2i,rn2i,rmni,s,rpa,dx(3),eterm
      real*8 rkj,rkjo,rkjp
c
c#include "cf_funcs_dec.fh"
#include "bitops_decls.fh"
c#include "cf_funcs_sfn.fh"
#include "bitops_funcs.fh"
c
      do 1 i=1,ndihes
c
c     find index into list of dihedrals
c     ---------------------------------
c
      isd=indexl(i)
c
c     find local atom numbers involved in dihedral
c     --------------------------------------------
c
      isa=0
      jsa=0
      ksa=0
      lsa=0
c
      do 2 j=1,natoms
      if(idih(isd,1).eq.igan(j)) isa=j
      if(idih(isd,2).eq.igan(j)) jsa=j
      if(idih(isd,3).eq.igan(j)) ksa=j
      if(idih(isd,4).eq.igan(j)) lsa=j
    2 continue
c
c     find solute molecule numbers involved in dihedral
c     -------------------------------------------------
c
      isf=imol(isa)
      jsf=imol(jsa)
      ksf=imol(ksa)
      lsf=imol(lsa)
c
c     find energy factor that depends on the atoms involved
c     being dynamic or fixed
c     -----------------------------------------------------
c
      ifacu=0
      if(iand(idyn(isa),mdynam).eq.ldynam) ifacu=ifacu+1
      if(iand(idyn(jsa),mdynam).eq.ldynam) ifacu=ifacu+1
      if(iand(idyn(ksa),mdynam).eq.ldynam) ifacu=ifacu+1
      if(iand(idyn(lsa),mdynam).eq.ldynam) ifacu=ifacu+1
c      factu=dble(ifacu)/four
      factu=one
      if(ifacu.eq.0) factu=zero
      if(includ.eq.1) factu=one
c
c     find reference angle and force constants
c     ----------------------------------------
c
      if(nfhop.eq.0) then
      ang=dih(isd,2,iset)
      for=dih(isd,3,iset)
      rmul=dih(isd,1,iset)
      else
      ang=dih(isd,2,lseq(isgm(jsa)))
      for=dih(isd,3,lseq(isgm(jsa)))
      rmul=dih(isd,1,lseq(isgm(jsa)))
      endif
c
c     determine the dihedral angle
c     ----------------------------
c
      xsijx=xs(isa,1)-xs(jsa,1)
      xskjx=xs(ksa,1)-xs(jsa,1)
      xsklx=xs(ksa,1)-xs(lsa,1)
      xsikx=xsijx-xskjx
      xsjlx=xsklx-xskjx
      xsijy=xs(isa,2)-xs(jsa,2)
      xskjy=xs(ksa,2)-xs(jsa,2)
      xskly=xs(ksa,2)-xs(lsa,2)
      xsiky=xsijy-xskjy
      xsjly=xskly-xskjy
      xsijz=xs(isa,3)-xs(jsa,3)
      xskjz=xs(ksa,3)-xs(jsa,3)
      xsklz=xs(ksa,3)-xs(lsa,3)
      xsikz=xsijz-xskjz
      xsjlz=xsklz-xskjz
c
c     periodic boundary conditions
c
      if(lpbc.or.lpbcs) then
      dx(1)=xsijx
      dx(2)=xsijy
      dx(3)=xsijz
      call cf_pbc(1,dx,1,dx,1,0,1,1)
      xsijx=dx(1)
      xsijy=dx(2)
      xsijz=dx(3)
      dx(1)=xsikx
      dx(2)=xsiky
      dx(3)=xsikz
      call cf_pbc(1,dx,1,dx,1,0,1,1)
      xsikx=dx(1)
      xsiky=dx(2)
      xsikz=dx(3)
      dx(1)=xskjx
      dx(2)=xskjy
      dx(3)=xskjz
      call cf_pbc(1,dx,1,dx,1,0,1,1)
      xskjx=dx(1)
      xskjy=dx(2)
      xskjz=dx(3)
      dx(1)=xsklx
      dx(2)=xskly
      dx(3)=xsklz
      call cf_pbc(1,dx,1,dx,1,0,1,1)
      xsklx=dx(1)
      xskly=dx(2)
      xsklz=dx(3)
      dx(1)=xsjlx
      dx(2)=xsjly
      dx(3)=xsjlz
      call cf_pbc(1,dx,1,dx,1,0,1,1)
      xsjlx=dx(1)
      xsjly=dx(2)
      xsjlz=dx(3)
      endif
c
      xmx=xsijy*xskjz-xskjy*xsijz
      xmy=xsijz*xskjx-xskjz*xsijx
      xmz=xsijx*xskjy-xskjx*xsijy
      xnx=xskjy*xsklz-xskly*xskjz
      xny=xskjz*xsklx-xsklz*xskjx
      xnz=xskjx*xskly-xsklx*xskjy
      rm2i=one/(xmx*xmx+xmy*xmy+xmz*xmz)
      rn2i=one/(xnx*xnx+xny*xny+xnz*xnz)
      rmni=sqrt(rm2i*rn2i)
      cphi=(xmx*xnx+xmy*xny+xmz*xnz)*rmni
      if(cphi.lt.-one) cphi=-one
      if(cphi.gt. one) cphi= one
      phi=acos(cphi)
      s=xskjx*(xmy*xnz-xmz*xny) +xskjy*(xmz*xnx-xmx*xnz)
     + +xskjz*(xmx*xny-xmy*xnx)
      if(s.lt.zero) phi=-phi
      rdih(isd,1)=phi
      sphi=sin(phi)
      rpa=rmul*phi-ang
c
c     evaluate energies
c     -----------------
c
      rdih(isd,2)=for*(one+cos(rpa))
c
      eterm=zero
      if(lupden) then
      ess(isf,isf,3,1)=ess(isf,isf,3,1)+fourth*factu*rdih(isd,2)
      ess(jsf,jsf,3,1)=ess(jsf,jsf,3,1)+fourth*factu*rdih(isd,2)
      ess(ksf,ksf,3,1)=ess(ksf,ksf,3,1)+fourth*factu*rdih(isd,2)
      ess(lsf,lsf,3,1)=ess(lsf,lsf,3,1)+fourth*factu*rdih(isd,2)
      endif
      eterm=factu*rdih(isd,2)
c
      dfor=(-for)*rmul*sin(rpa)
c
c     for thermodynamic perturbations evaluate the energies using
c     the 'perturbed' parameters in set 2 and/or set 3
c     -----------------------------------------------------------
c
      if(ip2(21)) ep2(1)=ep2(1)-eterm+
     + factu*dih(isd,3,2)*(one+cos(dih(isd,1,2)*phi-dih(isd,2,2)))
      if(ip3(21)) ep3(1)=ep3(1)-eterm+
     + factu*dih(isd,3,3)*(one+cos(dih(isd,1,3)*phi-dih(isd,2,3)))
c
c     for normal angles use cosine equation to get the forces
c     -------------------------------------------------------
c
      if(abs(sphi).gt.small) then
      sphii=one/sphi
      xdx=(-dfor)*sphii*(rmni*xnx-cphi*rm2i*xmx)
      xex=(-dfor)*sphii*(rmni*xmx-cphi*rn2i*xnx)
      xdy=(-dfor)*sphii*(rmni*xny-cphi*rm2i*xmy)
      xey=(-dfor)*sphii*(rmni*xmy-cphi*rn2i*xny)
      xdz=(-dfor)*sphii*(rmni*xnz-cphi*rm2i*xmz)
      xez=(-dfor)*sphii*(rmni*xmz-cphi*rn2i*xnz)
      dfsix=xskjy*xdz-xskjz*xdy
      dfsiy=xskjz*xdx-xskjx*xdz
      dfsiz=xskjx*xdy-xskjy*xdx
      dfsjx=xsiky*xdz-xsikz*xdy-xskly*xez+xsklz*xey
      dfsjy=xsikz*xdx-xsikx*xdz-xsklz*xex+xsklx*xez
      dfsjz=xsikx*xdy-xsiky*xdx-xsklx*xey+xskly*xex
      dfskx=xsjly*xez-xsjlz*xey-xsijy*xdz+xsijz*xdy
      dfsky=xsjlz*xex-xsjlx*xez-xsijz*xdx+xsijx*xdz
      dfskz=xsjlx*xey-xsjly*xex-xsijx*xdy+xsijy*xdx
      dfslx=xskjy*xez-xskjz*xey
      dfsly=xskjz*xex-xskjx*xez
      dfslz=xskjx*xey-xskjy*xex
      else
c
c     for small angles use the sine equations to get forces
c     -----------------------------------------------------
c
      cphii=one/cphi
      rkj=sqrt(xskjx*xskjx+xskjy*xskjy+xskjz*xskjz)
      xox=xskly*xsikz-xsklz*xsiky
      xoy=xsklz*xsikx-xsklx*xsikz
      xoz=xsklx*xsiky-xskly*xsikx
      rkjo=(xskjx*xox+xskjy*xoy+xskjz*xoz)/rkj
      xpx=xsijy*xsjlz-xsijz*xsjly
      xpy=xsijz*xsjlx-xsijx*xsjlz
      xpz=xsijx*xsjly-xsijy*xsjlx
      rkjp=(xskjx*xpx+xskjy*xpy+xskjz*xpz)/rkj
      dfsix=dfor*cphii* (rkj*rmni*xnx-sphi*rm2i*(xskjy*xmz-xskjz*xmy))
      dfsiy=dfor*cphii* (rkj*rmni*xny-sphi*rm2i*(xskjz*xmx-xskjx*xmz))
      dfsiz=dfor*cphii* (rkj*rmni*xnz-sphi*rm2i*(xskjx*xmy-xskjy*xmx))
      dfsjx=dfor*cphii*((-rmni)*(rkjo*xskjx+rkj*xox)-
     + sphi*rm2i*(xsiky*xmz-xsikz*xmy)+
     + sphi*rn2i*(xskly*xnz-xsklz*xny))
      dfsjy=dfor*cphii*((-rmni)*(rkjo*xskjy+rkj*xoy)-
     + sphi*rm2i*(xsikz*xmx-xsikx*xmz)+
     + sphi*rn2i*(xsklz*xnx-xsklx*xnz))
      dfsjz=dfor*cphii*((-rmni)*(rkjo*xskjz+rkj*xoz)-
     + sphi*rm2i*(xsikx*xmy-xsiky*xmx)+
     + sphi*rn2i*(xsklx*xny-xskly*xnx))
      dfskx=dfor*cphii*((-rmni)*(rkjp*xskjx+rkj*xpx)-
     + sphi*rn2i*(xsjly*xnz-xsjlz*xny)+
     + sphi*rm2i*(xsijy*xmz-xsijz*xmy))
      dfsky=dfor*cphii*((-rmni)*(rkjp*xskjy+rkj*xpy)-
     + sphi*rn2i*(xsjlz*xnx-xsjlx*xnz)+
     + sphi*rm2i*(xsijz*xmx-xsijx*xmz))
      dfskz=dfor*cphii*((-rmni)*(rkjp*xskjz+rkj*xpz)-
     + sphi*rn2i*(xsjlx*xny-xsjly*xnx)+
     + sphi*rm2i*(xsijx*xmy-xsijy*xmx))
      dfslx=dfor*cphii*
     + ((-rkj)*rmni*xmx-sphi*rn2i*(xskjy*xnz-xskjz*xny))
      dfsly=dfor*cphii*
     + ((-rkj)*rmni*xmy-sphi*rn2i*(xskjz*xnx-xskjx*xnz))
      dfslz=dfor*cphii*
     + ((-rkj)*rmni*xmz-sphi*rn2i*(xskjx*xny-xskjy*xnx))
      endif
c
c     accumulate the forces
c     ---------------------
c
      fs(isa,1)=fs(isa,1)-dfsix
      fs(jsa,1)=fs(jsa,1)-dfsjx
      fs(ksa,1)=fs(ksa,1)-dfskx
      fs(lsa,1)=fs(lsa,1)-dfslx
      fs(isa,2)=fs(isa,2)-dfsiy
      fs(jsa,2)=fs(jsa,2)-dfsjy
      fs(ksa,2)=fs(ksa,2)-dfsky
      fs(lsa,2)=fs(lsa,2)-dfsly
      fs(isa,3)=fs(isa,3)-dfsiz
      fs(jsa,3)=fs(jsa,3)-dfsjz
      fs(ksa,3)=fs(ksa,3)-dfskz
      fs(lsa,3)=fs(lsa,3)-dfslz
c
      if(lupdti) then
c
c     for thermodynamic integration evaluate the derivative
c     -----------------------------------------------------
c
      if(ith(21)) then
      dercon=(one+cos(rpa))*dih(isd,3,4)
     + -for*sin(rpa)*(phi*dih(isd,1,4)-dih(isd,2,4))
      deriv(21,1)=deriv(21,1)+dercon
      if(npgdec.gt.1) then
      dera(5,idih(isd,1))=dera(5,idih(isd,1))+fourth*dercon
      dera(5,idih(isd,2))=dera(5,idih(isd,2))+fourth*dercon
      dera(5,idih(isd,3))=dera(5,idih(isd,3))+fourth*dercon
      dera(5,idih(isd,4))=dera(5,idih(isd,4))+fourth*dercon
      endif
      endif
      endif
c
    1 continue
c
      return
      end
      subroutine cf_fso(nimprs,indexl,mso,msp,iimp,dimp,rimp,
     + natoms,ndim,igan,isgm,imol,idyn,xs,fs,ess,lpbc,lpbcs,lupden,
     + lupdti,dera,lseq)
c
c $Id: cf_f.fh 19708 2010-10-29 18:04:21Z d3y133 $
c
c     cf_fso returns forces and energies for solute improper dihedral angles
c
c     =========================================================================
c
c     description of arguments
c     ------------------------
c
c     in: integer ndihes     = number of angles to consider
c         integer indexl     = index list
c
c         integer idso(mso)  = global atom id i
c         integer jdso(mso)  = global atom id j
c         integer kdso(mso)  = global atom id k
c         integer ldso(mso)  = global atom id l
c         real*8 cdso(mso,6) = dihedral angle force constants
c         real*8 ddso(mso,6) = dihedral angle reference value
c         real*8 rdso(mso)   = dihedral angle value
c
c         integer natoms     = number of atoms in arrays
c         integer ndim       = leading dimension atom arrays
c         integer igan(ndim) = global atom numbers
c         integer imol(ndim) = atom molecule fraction
c         integer idyn(ndim) = atom dynamics type
c         real*8 qs(ndim)    = atomic charges
c         real*8 xs(ndim,3)  = atom coordinates
c
c         logical lupden     = if .true. energies are updated
c
c    out: real*8 fs(ndim,3)  = atom forces (ACCUMULATED)
c         real*8 uso(mso)    = dihedral angle energies
c
      implicit none
c
#include "cf_common.fh"
c
c     declaration of arguments
c     ------------------------
c
      integer mso,msp
      integer iimp(mso,5)
      real*8 dimp(mso,msp,mset),rimp(mso,2)
      integer isgm(msa),lseq(mseq)
c
      integer nimprs
      integer indexl(nimprs)
c
      integer natoms,ndim
      integer igan(ndim),imol(ndim),idyn(ndim)
      real*8 xs(ndim,3),fs(ndim,3),ess(msf,msf,mpe,2)
c
      logical lpbc,lpbcs,lupden,lupdti
      real*8 dera(6,nsatot)
c
c     declaration of local variables
c     -----------------------------
c
      integer i,j,iso,isa,jsa,ksa,lsa,isf,jsf,ksf,lsf
      integer ifacu
      real*8 ang,dang,dangp,for,dfor,phi,cphi,cphii,sphi,sphii
      real*8 factu,dercon
      real*8 xsijx,xskjx,xsijy,xskjy,xsijz,xskjz
      real*8 xsklx,xsjlx,xskly,xsjly,xsklz,xsjlz
      real*8 xsikx,xsiky,xsikz,xmx,xmy,xmz,xnx,xny,xnz,xdx,xdy,xdz
      real*8 xex,xey,xez,xox,xoy,xoz,xpx,xpy,xpz
      real*8 dfsix,dfsiy,dfsiz,dfsjx,dfsjy,dfsjz
      real*8 dfskx,dfsky,dfskz,dfslx,dfsly,dfslz
      real*8 rm2i,rn2i,rmni,s,dx(3),eterm
      real*8 rkj,rkjo,rkjp
c
c#include "cf_funcs_dec.fh"
#include "bitops_decls.fh"
c#include "cf_funcs_sfn.fh"
#include "bitops_funcs.fh"
c
      do 1 i=1,nimprs
c
c     find index into improper torsion list
c
      iso=indexl(i)
c
c     find local atom numbers involved in improper dihedral
c
      isa=0
      jsa=0
      ksa=0
      lsa=0
      do 2 j=1,natoms
      if(iimp(iso,1).eq.igan(j)) isa=j
      if(iimp(iso,2).eq.igan(j)) jsa=j
      if(iimp(iso,3).eq.igan(j)) ksa=j
      if(iimp(iso,4).eq.igan(j)) lsa=j
    2 continue
c
c     find solute molecules involved in this improper
c
      isf=imol(isa)
      jsf=imol(jsa)
      ksf=imol(ksa)
      lsf=imol(lsa)
c
c     determine the energy factor depending on atoms being
c     dynamic or fixed
c
      ifacu=0
      if(iand(idyn(isa),mdynam).eq.ldynam) ifacu=ifacu+1
      if(iand(idyn(jsa),mdynam).eq.ldynam) ifacu=ifacu+1
      if(iand(idyn(ksa),mdynam).eq.ldynam) ifacu=ifacu+1
      if(iand(idyn(lsa),mdynam).eq.ldynam) ifacu=ifacu+1
c      factu=dble(ifacu)/four
      factu=one
      if(ifacu.eq.0) factu=zero
      if(includ.eq.1) factu=one
c
c     get reference angle and force constant
c
      if(nfhop.eq.0) then
      ang=dimp(iso,2,iset)
      for=dimp(iso,3,iset)
      else
      ang=dimp(iso,2,lseq(isgm(jsa)))
      for=dimp(iso,3,lseq(isgm(jsa)))
      endif
c
c     determine the angle
c
      xsijx=xs(isa,1)-xs(jsa,1)
      xskjx=xs(ksa,1)-xs(jsa,1)
      xsklx=xs(ksa,1)-xs(lsa,1)
      xsikx=xsijx-xskjx
      xsjlx=xsklx-xskjx
      xsijy=xs(isa,2)-xs(jsa,2)
      xskjy=xs(ksa,2)-xs(jsa,2)
      xskly=xs(ksa,2)-xs(lsa,2)
      xsiky=xsijy-xskjy
      xsjly=xskly-xskjy
      xsijz=xs(isa,3)-xs(jsa,3)
      xskjz=xs(ksa,3)-xs(jsa,3)
      xsklz=xs(ksa,3)-xs(lsa,3)
      xsikz=xsijz-xskjz
      xsjlz=xsklz-xskjz
c
c     periodic boundary conditions
c
      if(lpbc.or.lpbcs) then
      dx(1)=xsijx
      dx(2)=xsijy
      dx(3)=xsijz
      call cf_pbc(1,dx,1,dx,1,0,1,1)
      xsijx=dx(1)
      xsijy=dx(2)
      xsijz=dx(3)
      dx(1)=xsikx
      dx(2)=xsiky
      dx(3)=xsikz
      call cf_pbc(1,dx,1,dx,1,0,1,1)
      xsikx=dx(1)
      xsiky=dx(2)
      xsikz=dx(3)
      dx(1)=xskjx
      dx(2)=xskjy
      dx(3)=xskjz
      call cf_pbc(1,dx,1,dx,1,0,1,1)
      xskjx=dx(1)
      xskjy=dx(2)
      xskjz=dx(3)
      dx(1)=xsklx
      dx(2)=xskly
      dx(3)=xsklz
      call cf_pbc(1,dx,1,dx,1,0,1,1)
      xsklx=dx(1)
      xskly=dx(2)
      xsklz=dx(3)
      dx(1)=xsjlx
      dx(2)=xsjly
      dx(3)=xsjlz
      call cf_pbc(1,dx,1,dx,1,0,1,1)
      xsjlx=dx(1)
      xsjly=dx(2)
      xsjlz=dx(3)
      endif
c
      xmx=xsijy*xskjz-xskjy*xsijz
      xmy=xsijz*xskjx-xskjz*xsijx
      xmz=xsijx*xskjy-xskjx*xsijy
      xnx=xskjy*xsklz-xskly*xskjz
      xny=xskjz*xsklx-xsklz*xskjx
      xnz=xskjx*xskly-xsklx*xskjy
      rm2i=one/(xmx*xmx+xmy*xmy+xmz*xmz)
      rn2i=one/(xnx*xnx+xny*xny+xnz*xnz)
      rmni=sqrt(rm2i*rn2i)
      cphi=(xmx*xnx+xmy*xny+xmz*xnz)*rmni
      if(cphi.lt.-one) cphi=-one
      if(cphi.gt. one) cphi= one
      phi=acos(cphi)
      s=xskjx*(xmy*xnz-xmz*xny) +xskjy*(xmz*xnx-xmx*xnz)
     + +xskjz*(xmx*xny-xmy*xnx)
      if(s.lt.zero) phi=-phi
      rimp(iso,1)=phi
      sphi=sin(phi)
      dang=(phi-ang)-nint((phi-ang)/twopi)*twopi
      dfor=for*dang
c      uso(iso)=half*for*dang*dang
      rimp(iso,2)=half*for*dang*dang
      eterm=zero
      if(lupden) then
      ess(isf,isf,4,1)=ess(isf,isf,4,1)+fourth*factu*rimp(iso,2)
      ess(jsf,jsf,4,1)=ess(jsf,jsf,4,1)+fourth*factu*rimp(iso,2)
      ess(ksf,ksf,4,1)=ess(ksf,ksf,4,1)+fourth*factu*rimp(iso,2)
      ess(lsf,lsf,4,1)=ess(lsf,lsf,4,1)+fourth*factu*rimp(iso,2)
      endif
      eterm=factu*rimp(iso,2)
c
c     for thermodynamic perturbations evaluate the energies
c     using the 'perturbed' parameters of set 2 and/or set 3
c
      if(ip2(22))  then
      dangp=(phi-dimp(iso,2,2))-nint((phi-dimp(iso,2,2))/twopi)*twopi
      ep2(1)=ep2(1)-eterm+factu*half*dimp(iso,3,2)*dangp**2
      endif
      if(ip3(22)) then
      dangp=(phi-dimp(iso,2,3))-nint((phi-dimp(iso,2,3))/twopi)*twopi
      ep3(1)=ep3(1)-eterm+factu*half*dimp(iso,3,3)*dangp**2
      endif
c
c     for normal angles use the cosine equation
c
      if(abs(sphi).gt.small) then
      sphii=one/sphi
      xdx=(-dfor)*sphii*(rmni*xnx-cphi*rm2i*xmx)
      xex=(-dfor)*sphii*(rmni*xmx-cphi*rn2i*xnx)
      xdy=(-dfor)*sphii*(rmni*xny-cphi*rm2i*xmy)
      xey=(-dfor)*sphii*(rmni*xmy-cphi*rn2i*xny)
      xdz=(-dfor)*sphii*(rmni*xnz-cphi*rm2i*xmz)
      xez=(-dfor)*sphii*(rmni*xmz-cphi*rn2i*xnz)
      dfsix=xskjy*xdz-xskjz*xdy
      dfsiy=xskjz*xdx-xskjx*xdz
      dfsiz=xskjx*xdy-xskjy*xdx
      dfsjx=xsiky*xdz-xsikz*xdy-xskly*xez+xsklz*xey
      dfsjy=xsikz*xdx-xsikx*xdz-xsklz*xex+xsklx*xez
      dfsjz=xsikx*xdy-xsiky*xdx-xsklx*xey+xskly*xex
      dfskx=xsjly*xez-xsjlz*xey-xsijy*xdz+xsijz*xdy
      dfsky=xsjlz*xex-xsjlx*xez-xsijz*xdx+xsijx*xdz
      dfskz=xsjlx*xey-xsjly*xex-xsijx*xdy+xsijy*xdx
      dfslx=xskjy*xez-xskjz*xey
      dfsly=xskjz*xex-xskjx*xez
      dfslz=xskjx*xey-xskjy*xex
      else
c
c     for small angles use the sine equation
c
      cphii=one/cphi
      rkj=sqrt(xskjx*xskjx+xskjy*xskjy+xskjz*xskjz)
      xox=xskly*xsikz-xsklz*xsiky
      xoy=xsklz*xsikx-xsklx*xsikz
      xoz=xsklx*xsiky-xskly*xsikx
      rkjo=(xskjx*xox+xskjy*xoy+xskjz*xoz)/rkj
      xpx=xsijy*xsjlz-xsijz*xsjly
      xpy=xsijz*xsjlx-xsijx*xsjlz
      xpz=xsijx*xsjly-xsijy*xsjlx
      rkjp=(xskjx*xpx+xskjy*xpy+xskjz*xpz)/rkj
      dfsix=dfor*cphii* (rkj*rmni*xnx-sphi*rm2i*(xskjy*xmz-xskjz*xmy))
      dfsiy=dfor*cphii* (rkj*rmni*xny-sphi*rm2i*(xskjz*xmx-xskjx*xmz))
      dfsiz=dfor*cphii* (rkj*rmni*xnz-sphi*rm2i*(xskjx*xmy-xskjy*xmx))
      dfsjx=dfor*cphii*((-rmni)*(rkjo*xskjx+rkj*xox)-
     + sphi*rm2i*(xsiky*xmz-xsikz*xmy)+
     + sphi*rn2i*(xskly*xnz-xsklz*xny))
      dfsjy=dfor*cphii*((-rmni)*(rkjo*xskjy+rkj*xoy)-
     + sphi*rm2i*(xsikz*xmx-xsikx*xmz)+
     + sphi*rn2i*(xsklz*xnx-xsklx*xnz))
      dfsjz=dfor*cphii*((-rmni)*(rkjo*xskjz+rkj*xoz)-
     + sphi*rm2i*(xsikx*xmy-xsiky*xmx)+
     + sphi*rn2i*(xsklx*xny-xskly*xnx))
      dfskx=dfor*cphii*((-rmni)*(rkjp*xskjx+rkj*xpx)-
     + sphi*rn2i*(xsjly*xnz-xsjlz*xny)+
     + sphi*rm2i*(xsijy*xmz-xsijz*xmy))
      dfsky=dfor*cphii*((-rmni)*(rkjp*xskjy+rkj*xpy)-
     + sphi*rn2i*(xsjlz*xnx-xsjlx*xnz)+
     + sphi*rm2i*(xsijz*xmx-xsijx*xmz))
      dfskz=dfor*cphii*((-rmni)*(rkjp*xskjz+rkj*xpz)-
     + sphi*rn2i*(xsjlx*xny-xsjly*xnx)+
     + sphi*rm2i*(xsijx*xmy-xsijy*xmx))
      dfslx=dfor*cphii*
     + ((-rkj)*rmni*xmx-sphi*rn2i*(xskjy*xnz-xskjz*xny))
      dfsly=dfor*cphii*
     + ((-rkj)*rmni*xmy-sphi*rn2i*(xskjz*xnx-xskjx*xnz))
      dfslz=dfor*cphii*
     + ((-rkj)*rmni*xmz-sphi*rn2i*(xskjx*xny-xskjy*xnx))
      endif
c
c     accumulate the forces
c
      fs(isa,1)=fs(isa,1)-dfsix
      fs(jsa,1)=fs(jsa,1)-dfsjx
      fs(ksa,1)=fs(ksa,1)-dfskx
      fs(lsa,1)=fs(lsa,1)-dfslx
      fs(isa,2)=fs(isa,2)-dfsiy
      fs(jsa,2)=fs(jsa,2)-dfsjy
      fs(ksa,2)=fs(ksa,2)-dfsky
      fs(lsa,2)=fs(lsa,2)-dfsly
      fs(isa,3)=fs(isa,3)-dfsiz
      fs(jsa,3)=fs(jsa,3)-dfsjz
      fs(ksa,3)=fs(ksa,3)-dfskz
      fs(lsa,3)=fs(lsa,3)-dfslz
c
      if(lupdti) then
c
c     for thermodynamic integrations evaluate the derivative
c
      if(ith(22)) then
      dercon=dang*(half*dang*dimp(iso,3,4)-for*dimp(iso,2,4))
      deriv(22,1)=deriv(22,1)+dercon
      if(npgdec.gt.1) then
      dera(5,iimp(iso,1))=dera(5,iimp(iso,1))+fourth*dercon
      dera(5,iimp(iso,2))=dera(5,iimp(iso,2))+fourth*dercon
      dera(5,iimp(iso,3))=dera(5,iimp(iso,3))+fourth*dercon
      dera(5,iimp(iso,4))=dera(5,iimp(iso,4))+fourth*dercon
      endif
      endif
      endif
c
    1 continue
c
      return
      end
      subroutine cf_fst(nthrds,indexl,mst,idtn,vdw,chg,natoms,ndim,
     + iatt,igan,isgm,imol,idyn,ichg,isss,xs,fs,ess,lpbc,lpbcs,dera,
     + esa,lseq)
c
c $Id: cf_f.fh 19708 2010-10-29 18:04:21Z d3y133 $
c
c     cf_fst returns forces and energies for solute third neighbors
c
c     ================================================================
c
c     description of arguments
c     ------------------------
c
c     in: integer nthrds       = number of third neighbor pairs to consider
c         integer indexl       = index list
c
c         integer idst(mst)    = global atom id i
c         integer jdst(mst)    = global atom id j
c
c         real*8 cb6(matt,matt,3)
c         real*8 cb12(matt,matt,3)
c
c         real*8 cdso(mso,6)   = dihedral angle force constants
c         real*8 ddso(mso,6)   = dihedral angle reference value
c         real*8 rdso(mso)     = dihedral angle value
c
c         integer natoms       = number of atoms in arrays
c         integer ndim         = leading dimension atom arrays
c         integer igan(ndim)   = global atom numbers
c         integer imol(ndim)   = atom molecule fraction
c         integer idyn(ndim)   = atom dynamics type
c         real*8 qs(ndim,4)    = atomic charges
c         real*8 xs(ndim,3)    = atom coordinates
c
c    out: real*8 fs(ndim,3)    = atom forces (ACCUMULATED)
c         real*8 uso(mso)      = dihedral angle energies
c
      implicit none
c
#include "cf_common.fh"
c
c     declaration of arguments
c     ------------------------
c
      integer nthrds
      integer indexl(nthrds)
      integer isgm(msa),lseq(mseq)
c
      integer mst
      integer idtn(0:mst,2)
c      integer idst(mst),jdst(mst)
c      real*8 cb6(mat,mat,6),cb12(mat,mat,6)
c
      integer natoms,ndim
      real*8 vdw(mat,mat,map,mset),chg(mqt,mqp,mset)
      integer iatt(ndim),igan(ndim),imol(ndim),idyn(ndim),ichg(ndim)
      integer isss(msa)
      real*8 xs(ndim,3),fs(ndim,3)
      real*8 ess(msf,msf,mpe,2),esa(nsa)
c
#if defined(CAFE_FORCES)
      real*8 dera(6,nsatot)
#endif
c
      logical lpbc,lpbcs
c
c     declaration of local variables
c     ------------------------------
c
      integer i,j,ist,isa,jsa,isf,jsf,isad,istt,jstt,isrx
      real*8 factu,etermq,eterml
      real*8 rxx,rxy,rxz,r2,r2i,r1i,dfs,dfsu,r6i,c6,c12,cf6,cf12,q
      real*8 ferfc,fderfc,qij,dfsp,c64,c124,dercon,qi,qi4,qj,qj4,q14
      real*8 dx(3)
c
c      real*8 ang,dang,dangp,for,dfor,dfs,phi,cphi,cphii,sphi,sphii
c      real*8 rmul,factu,dercon
c      real*8 xsijx,xskjx,xsijy,xskjy,xsijz,xskjz
c      real*8 xsklx,xsjlx,xskly,xsjly,xsklz,xsjlz
c      real*8 xsikx,xsiky,xsikz,xmx,xmy,xmz,xnx,xny,xnz,xdx,xdy,xdz
c      real*8 xex,xey,xez,xox,xoy,xoz,xpx,xpy,xpz
c      real*8 dfsix,dfsiy,dfsiz,dfsjx,dfsjy,dfsjz
c      real*8 dfskx,dfsky,dfskz,dfslx,dfsly,dfslz
c      real*8 rm2i,rn2i,rmni,s,rpa
c      real*8 rsij2,rskj2,rsij2i,rskj2i,rsikji,rkj,rkjo,rkjp
c      real*8 qij,xs1,xs2,xs3,rss,rsi,ferfc,fderfc,dfs1,dfs2,dfs3
c
#include "cf_funcs_dec.fh"
#include "bitops_decls.fh"
#include "cf_funcs_sfn.fh"
#include "bitops_funcs.fh"
c
      isad=0
      dfsp=zero
      etermq=zero
c
      do 1 i=1,nthrds
c
c     find index into third neighbor list
c
      ist=indexl(i)
c
    3 continue
      if(ist.gt.idtn(isad,1)) then
      isad=isad+1
      goto 3
      endif
c
c     find local atoms involved
c
      isa=0
      jsa=0
      do 2 j=1,natoms
      if(isad.eq.igan(j)) isa=j
      if(idtn(ist,2).eq.igan(j)) jsa=j
    2 continue
c
c     find solute molecule numbers involved
c
      isf=imol(isa)
      jsf=imol(jsa)
c
      if(lssscl) then
c
      istt=iand(isss(isa),48)
      jstt=iand(isss(jsa),48)
      if(isf.ne.jsf) then
      if(istt.eq.16.or.jstt.eq.16) isrx=-1
      if(istt.eq.32.or.jstt.eq.32) isrx=1
      endif
c
      istt=iand(isss(isa),384)
      jstt=iand(isss(jsa),384)
      if(istt.eq.128.or.jstt.eq.128) isrx=-2
      if(istt.eq.256.or.jstt.eq.256) isrx=2
c
      istt=iand(isss(isa),384)
      jstt=iand(isss(jsa),384)
      if(istt.eq.128.and.jstt.eq.256) isrx=999
      if(istt.eq.256.and.jstt.eq.128) isrx=999
c
c      write(*,'(5i5)')
c     + isga(isfr+isa),isga(lssptr),istt,jstt,isrx(nax+jnum)
c
      endif
c
c     determine energy factor depending on atoms being dynamic
c     or fixed
c
      factu=zero
      if(iand(idyn(isa),mdynam).eq.ldynam.or.
     + iand(idyn(jsa),mdynam).eq.ldynam) factu=one
c      if((iand(idyn(isa),mdynam).eq.ldynam.and.
c     + iand(idyn(jsa),mdynam).ne.ldynam) .or.
c     + (iand(idyn(isa),mdynam).ne.ldynam.and.
c     + iand(idyn(jsa),mdynam).eq.ldynam) ) factu=half
      if(includ.eq.1) factu=one
c
c     evaluate the distance
c
      rxx=xs(isa,1)-xs(jsa,1)
      rxy=xs(isa,2)-xs(jsa,2)
      rxz=xs(isa,3)-xs(jsa,3)
c
c     periodic boundary conditions
c
      if(lpbc.or.lpbcs) then
      dx(1)=rxx
      dx(2)=rxy
      dx(3)=rxz
      call cf_pbc(1,dx,1,dx,1,0,1,1)
      rxx=dx(1)
      rxy=dx(2)
      rxz=dx(3)
      endif
c
      r2=rxx*rxx+rxy*rxy+rxz*rxz
      r2i=one/r2
c
      if(lssscl) then
      if(isrx.eq.999) then
      r2i=zero
      isrx=0
      endif
      if(isrx.gt.0) then
      r2i=one/(one/r2i+shift0(1))
      elseif(isrx.lt.0) then
      r2i=one/(one/r2i+shift1(1))
      endif
      endif
c
      r1i=sqrt(r2i)
      dfs=zero
      dfsu=zero
      r6i=r2i*r2i*r2i
c
c     get force constants
c
c      c6=cb6(iatt(isa),iatt(jsa),iset)
c      c12=cb12(iatt(isa),iatt(jsa),iset)
      if(nfhop.eq.0) then
      c6=vdw(iatt(isa),iatt(jsa),2,iset)
      c12=vdw(iatt(isa),iatt(jsa),4,iset)
      else
      c6=vdw(iatt(isa),iatt(jsa),2,lseq(isgm(jsa)))
      c12=vdw(iatt(isa),iatt(jsa),4,lseq(isgm(jsa)))
      endif
      cf6=six*c6
      cf12=twelve*c12
c
c     calculate the Lennard-Jones force contribution
c
      dfs=(cf12*r6i-cf6)*r6i*r2i
      dfsu=(c12*r6i-c6)*r6i
c
c     calculate the Lennard-Jones energies
c
      eterml=factu*dfsu
      ess(isf,jsf,7,1)=ess(isf,jsf,7,1)+eterml
      if(ipme.eq.0.or.isolvo.ne.0) then
c
c     calculate the electrostatic energies
c
c      q=q14fac*qs(isa,iset)*qs(jsa,iset)
      if(nfhop.eq.0) then
      q=q14fac*chg(ichg(isa),1,iset)*chg(ichg(jsa),1,iset)
      else
      q=q14fac*chg(ichg(isa),1,lseq(isgm(isa)))*
     + chg(ichg(jsa),1,lseq(isgm(jsa)))
      endif
      etermq=factu*q*r1i
      ess(isf,jsf,8,1)=ess(isf,jsf,8,1)+etermq
      if(npener.gt.0) then
      esa(igan(isa))=esa(igan(isa))+half*(eterml+etermq)
      esa(igan(jsa))=esa(igan(jsa))+half*(eterml+etermq)
      endif
c
c     calculate the electrostatic force contribution
c
      dfs=dfs+q*r1i*r2i
      else
      ferfc=erfc(ealpha/r1i)
      fderfc=ealpha*derfc(ealpha/r1i)
c
c     calculate the electrostatic energies
c
      if(nfhop.eq.0) then
      q=q14fac*chg(ichg(isa),1,iset)*chg(ichg(jsa),1,iset)
      else
      q=q14fac*chg(ichg(isa),1,lseq(isgm(isa)))*
     + chg(ichg(jsa),1,lseq(isgm(jsa)))
      endif
      qij=(one-q14fac)*q
      epmecs=epmecs-(one-ferfc)*qij*r1i*factu
      ess(isf,isf,8,1)=ess(isf,isf,8,1)-half*(one-ferfc)*q*r1i*factu
      ess(isf,jsf,8,1)=ess(jsf,jsf,8,1)-half*(one-ferfc)*q*r1i*factu
      etermq=ferfc*factu*q*r1i
      if(npener.gt.0) then
      esa(igan(isa))=esa(igan(isa))+half*(one-ferfc)*q*r1i*factu
      esa(igan(jsa))=esa(igan(jsa))+half*(one-ferfc)*q*r1i*factu
      endif
c
c     calculate the electrostatic force contribution
c
      dfsp=-(qij*r2i*((one-ferfc)*r1i+fderfc))
      dfs=dfs+q*r2i*(ferfc*r1i-fderfc)-dfsp
      endif
c
c     reaction field contributions
c
      if(ireact.ne.0) then
      ess(isf,jsf,8,1)=ess(isf,jsf,8,1)+factu*q*rffss/r2i
      if(npener.gt.0) then
      esa(igan(isa))=esa(igan(isa))+half*factu*q*rffss/r2i
      esa(igan(jsa))=esa(igan(jsa))+half*factu*q*rffss/r2i
      endif
      dfs=dfs-two*q*rffss
      endif
c
c     accumulate the forces
c
      fs(isa,1)=fs(isa,1)+dfs*rxx
      fs(jsa,1)=fs(jsa,1)-dfs*rxx
      fs(isa,2)=fs(isa,2)+dfs*rxy
      fs(jsa,2)=fs(jsa,2)-dfs*rxy
      fs(isa,3)=fs(isa,3)+dfs*rxz
      fs(jsa,3)=fs(jsa,3)-dfs*rxz
c
      if(ipme.ne.0) then
      vpmeb(1)=vpmeb(1)+dfsp*rxx*rxx
      vpmeb(2)=vpmeb(2)+dfsp*rxy*rxx
      vpmeb(3)=vpmeb(3)+dfsp*rxz*rxx
      vpmeb(4)=vpmeb(4)+dfsp*rxy*rxy
      vpmeb(5)=vpmeb(5)+dfsp*rxz*rxy
      vpmeb(6)=vpmeb(6)+dfsp*rxz*rxz
      endif
c
c     for thermodynamic integration evaluate the derivatives
c
      if(ithint) then
      if(ith(14)) then
c      c64=cb6(iatt(isa),iatt(jsa),4)
c      c124=cb12(iatt(isa),iatt(jsa),4)
      c64=vdw(iatt(isa),iatt(jsa),2,4)
      c124=vdw(iatt(isa),iatt(jsa),4,4)
      dercon=(c124*r6i-c64)*r6i
      if(isrx.gt.0) then
      c64=three*vdw(iatt(isa),iatt(jsa),1,iset)
      c124=six*vdw(iatt(isa),iatt(jsa),3,iset)
      dercon=dercon+shift0(4)*r2i*r6i*(c64-c124*r6i)
      elseif(isrx.lt.0) then
      c64=three*vdw(iatt(isa),iatt(jsa),1,iset)
      c124=six*vdw(iatt(isa),iatt(jsa),3,iset)
      dercon=dercon+shift1(4)*r2i*r6i*(c64-c124*r6i)
      endif
      deriv(15,1)=deriv(15,1)+dercon
#if defined(CAFE_FORCES)
      if(npgdec.gt.1) then
      dera(3,igan(isa))=dera(3,igan(isa))+half*dercon
      dera(3,igan(jsa))=dera(3,igan(jsa))+half*dercon
      endif
#endif
      endif
      if(ith(16)) then
c      qi=qs(isa,iset)
c      qi4=qs(isa,4)
c      qj=qs(jsa,iset)
c      qj4=qs(jsa,4)
      qi=chg(ichg(isa),1,iset)
      qi4=chg(ichg(isa),1,4)
      qj=chg(ichg(jsa),1,iset)
      qj4=chg(ichg(jsa),1,4)
      if(ipme.eq.0) then
      dercon=q14fac*(qi*qj4+qj*qi4)*r1i
      else
      dercon=q14fac*(qi*qj4+qj*qi4)*r1i
      endif
      if(isrx.gt.1) then
      dercon=dercon-half*shift0(4)*
     + chg(ichg(isa),1,iset)*chg(ichg(jsa),1,iset)*r2i
      elseif(isrx.lt.-1) then
      dercon=dercon-half*shift1(4)*
     + chg(ichg(isa),1,iset)*chg(ichg(jsa),1,iset)*r2i
      endif
      deriv(17,1)=deriv(17,1)+dercon
      if(ireact.ne.0) then
      deriv(17,1)=deriv(17,1)+q14fac*(qi*qj4+qj*qi4)*rffss/r2i
      endif
#if defined(CAFE_FORCES)
      if(npgdec.gt.1) then
      dera(4,igan(isa))=dera(4,igan(isa))+half*dercon
      dera(4,igan(jsa))=dera(4,igan(jsa))+half*dercon
      endif
#endif
      endif
      endif
c
c     thermodynamic perturbation 1
c
      if(ipert2) then
      if(ip2(14)) then
      ep2(1)=ep2(1)-eterml+factu*
     + (vdw(iatt(isa),iatt(jsa),4,2)*r6i-
     + vdw(iatt(isa),iatt(jsa),2,2))*r6i
      endif
      if(ip2(16).or.ip2(17)) then
      rxx=xs(isa,1)-xs(jsa,1)
      rxy=xs(isa,2)-xs(jsa,2)
      rxz=xs(isa,3)-xs(jsa,3)
      r2=rxx*rxx+rxy*rxy+rxz*rxz
      r2i=one/r2
      r1i=sqrt(r2i)
      if(ipme.eq.0) then
      q14=chg(ichg(isa),1,2)*chg(ichg(jsa),1,2)*q14fac
c      q14=qs(isa,2)*qs(jsa,2)*q14fac
      else
      q14=chg(ichg(isa),1,2)*chg(ichg(jsa),1,2)*q14fac*erfc(ealpha/r1i)
c      q14=qs(isa,2)*qs(jsa,2)*q14fac*erfc(ealpha/r1i)
      endif
      ep2(1)=ep2(1)-etermq+factu*q14*r1i
      if(ireact.ne.0) then
      ep2(1)=ep2(1)-etermq+factu*q14*rffss/r2i
      endif
      endif
      endif
c
c     thermodynamic perturbation 2
c
      if(ipert3) then
      if(ip3(14)) then
      ep3(1)=ep3(1)-eterml+factu*
     + (vdw(iatt(isa),iatt(jsa),4,3)*r6i-
     + vdw(iatt(isa),iatt(jsa),2,3))*r6i
      endif
      if(ip2(16).or.ip2(17)) then
      rxx=xs(isa,1)-xs(jsa,1)
      rxy=xs(isa,2)-xs(jsa,2)
      rxz=xs(isa,3)-xs(jsa,3)
      r2=rxx*rxx+rxy*rxy+rxz*rxz
      r2i=one/r2
      r1i=sqrt(r2i)
      if(ipme.eq.0) then
      q14=chg(ichg(isa),1,3)*chg(ichg(jsa),1,3)*q14fac
      else
      q14=chg(ichg(isa),1,3)*chg(ichg(jsa),1,3)*q14fac*erfc(ealpha/r1i)
      endif
      ep3(1)=ep3(1)-etermq+factu*q14*r1i
      if(ireact.ne.0) then
      ep3(1)=ep3(1)-etermq+factu*q14*rffss/r2i
      endif
      endif
      endif
    1 continue
c
      return
      end
      subroutine cf_fw(iwfr,iwto,xw,fw,iwdt,iwatm,iwq,lpbc,eww,vdw,chg,
     + mwb,nwb,nbp,ibnd,bnd,rbnd,mwh,nwh,nhp,iang,ang,rang,rub,
     + mwd,nwd,ndp,idih,dih,rdih,mwo,nwo,nop,iimp,dimp,rimp,
     + mwt,nwt,idwt,mwn,nwn,idwn)
c
c $Id: cf_f.fh 19708 2010-10-29 18:04:21Z d3y133 $
c
      implicit none
c
#include "cf_common.fh"
c
      integer iwfr,iwto
      integer mwb,mwh,mwd,mwo,nbp,nhp,ndp,nop,mwt,mwn
      integer nwb,nwh,nwd,nwo,nwt,nwn
      real*8 xw(mwm,3,mwa),fw(mwm,3,mwa,2)
      integer iwdt(mwm),iwq(mwa),iwatm(mwa)
      logical lpbc
      real*8 vdw(mat,mat,map,mset),chg(mqt,mqp,mset)
      integer ibnd(mwb,3),iang(mwh,4),idih(mwd,5),iimp(mwo,5)
      real*8 bnd(mwb,nbp,mset),ang(mwh,nhp,mset)
      real*8 dih(mwd,ndp,mset),dimp(mwo,nop,mset)
      real*8 rbnd(mwb,2),rang(mwh,2),rub(mwh,2),rdih(mwd,2),rimp(mwo,2)
c
c      real*8 ca6(mat,mat,6),ca12(mat,mat,6)
c      real*8 cb6(mat,mat,6),cb12(mat,mat,6)
c      integer iwl(mwm,miw2),
c
       integer idwt(0:mwt,2),idwn(0:mwn,2)
c
c      real*8 cdwb(mwb,6),ddwb(mwb,6)
c      integer iwbs(mwb),idwb(mwb),jdwb(mwb),iwatm(mwa)
c      real*8 cdwh(mwh,6),ddwh(mwh,6)
c      integer idwh(mwh),jdwh(mwh),kdwh(mwh)
c      real*8 cdwd(mwd,6),ddwd(mwd,6),edwd(mwd,6)
c      integer idwd(mwd),jdwd(mwd),kdwd(mwd),ldwd(mwd)
c      real*8 cdwo(mwo,6),ddwo(mwo,6)
c      integer idwo(mwo),jdwo(mwo),kdwo(mwo),ldwo(mwo)
c      real*8 uwb(mwb),uwh(mwh),uwd(mwd),uwo(mwo)
c
      integer iwb,iwa,jwa,iwm,iwh,kwa,iwd,lwa,iwo,iwt,iwn
      real*8 bond,for,rwx1,rwx2,rwx3,rww,rwwi,dbond,dfor,dfw1,dfw2,dfw3
      real*8 angle,xwij1,xwij2,xwij3,xwkj1,xwkj2,xwkj3,rwij2,rwij2i
      real*8 rwkj2,rwkj2i,cphi,phi,dangle,sphi,rmul
      real*8 xwkl1,xwkl2,xwkl3,xwik1,xwik2,xwik3,xwjl1,xwjl2,xwjl3
      real*8 xm1,xm2,xm3,xn1,xn2,xn3,rm2i,rn2i,rmni,s,rpa
      real*8 xd1,xd2,xd3,xe1,xe2,xe3,dfwi1,dfwi2,dfwi3
      real*8 dfwj1,dfwj2,dfwj3,dfwk1,dfwk2,dfwk3,dfwl1,dfwl2,dfwl3
      real*8 danglep,c6p1,c12p1,c6p2,c12p2,qip1,qjp1,qip2,qjp2
      real*8 c6,c12,c6t,c12t,qit,qjt,cf6,cf12,qi,qj,q,qp1,qp2
      real*8 ep2l,ep3l,ep2q,ep3q,rxx,rxy,rxz,r2,r2i,r1i,r6i,dfw
      real*8 rwikji,sphii,qij,rwi,ferfc,fderfc,eww(mpe,2)
      real*8 etermq,eterml,eub
c
#include "cf_funcs_dec.fh"
#include "bitops_decls.fh"
#include "cf_funcs_sfn.fh"
#include "bitops_funcs.fh"
c
      c6t=zero
      c12t=zero
      qit=zero
      qjt=zero
      qp1=zero
      qp2=zero
c
      do 10 iwb=1,nwb
      if(iand(ibnd(iwb,3),icnstr).eq.0) then
      iwa=ibnd(iwb,1)
      jwa=ibnd(iwb,2)
      bond=bnd(iwb,1,iset)
      for=bnd(iwb,2,iset)
      rbnd(iwb,2)=zero
      do 20 iwm=iwfr,iwto
      rwx1=xw(iwm,1,iwa)-xw(iwm,1,jwa)
      rwx2=xw(iwm,2,iwa)-xw(iwm,2,jwa)
      rwx3=xw(iwm,3,iwa)-xw(iwm,3,jwa)
      rww=sqrt(rwx1**2+rwx2**2+rwx3**2)
      if(rww.lt.tiny) then
      rwwi=one
      else
      rwwi=one/rww
      endif
      dbond=rww-bond
      if(iand(iwdt(iwm),mdynam).eq.ldynam)
     + rbnd(iwb,2)=rbnd(iwb,2)+half*for*(rww-bond)**2
      dfor=for*dbond*rwwi
      dfw1=dfor*rwx1
      dfw2=dfor*rwx2
      dfw3=dfor*rwx3
      fw(iwm,1,iwa,1)=fw(iwm,1,iwa,1)-dfw1
      fw(iwm,1,jwa,1)=fw(iwm,1,jwa,1)+dfw1
      fw(iwm,2,iwa,1)=fw(iwm,2,iwa,1)-dfw2
      fw(iwm,2,jwa,1)=fw(iwm,2,jwa,1)+dfw2
      fw(iwm,3,iwa,1)=fw(iwm,3,iwa,1)-dfw3
      fw(iwm,3,jwa,1)=fw(iwm,3,jwa,1)+dfw3
      if(ip2(6))
     + ep2(1)=ep2(1)+half*bnd(iwb,2,2)*(rww-bnd(iwb,1,2))**2
      if(ip3(6))
     + ep3(1)=ep3(1)+half*bnd(iwb,2,3)*(rww-bnd(iwb,1,3))**2
      if(ith(6)) then
      deriv(6,1)=deriv(6,1)+
     + dbond*(half*dbond*bnd(iwb,2,4)-for*bnd(iwb,1,4))
      endif
   20 continue
      eww(1,1)=eww(1,1)+rbnd(iwb,2)
      if(ip2(6)) ep2(1)=ep2(1)-rbnd(iwb,2)
      if(ip3(6)) ep3(1)=ep3(1)-rbnd(iwb,2)
      endif
      if(ipme.ne.0) then
      iwa=ibnd(iwb,1)
      jwa=ibnd(iwb,2)
      qij=chg(iwq(iwa),1,iset)*chg(iwq(jwa),1,iset)
      do 21 iwm=iwfr,iwto
      rwx1=xw(iwm,1,iwa)-xw(iwm,1,jwa)
      rwx2=xw(iwm,2,iwa)-xw(iwm,2,jwa)
      rwx3=xw(iwm,3,iwa)-xw(iwm,3,jwa)
      rww=sqrt(rwx1**2+rwx2**2+rwx3**2)
      rwi=one/rww
      ferfc=one-erfc(ealpha*rww)
      fderfc=-(ealpha*derfc(ealpha*rww))
      epmecw=epmecw-ferfc*qij*rwi
      eww(9,1)=eww(9,1)-ferfc*qij*rwi
      dfor=-(qij*rwi*rwi*(ferfc*rwi-fderfc))
      dfw1=dfor*rwx1
      dfw2=dfor*rwx2
      dfw3=dfor*rwx3
      fw(iwm,1,iwa,1)=fw(iwm,1,iwa,1)-dfw1
      fw(iwm,1,jwa,1)=fw(iwm,1,jwa,1)+dfw1
      fw(iwm,2,iwa,1)=fw(iwm,2,iwa,1)-dfw2
      fw(iwm,2,jwa,1)=fw(iwm,2,jwa,1)+dfw2
      fw(iwm,3,iwa,1)=fw(iwm,3,iwa,1)-dfw3
      fw(iwm,3,jwa,1)=fw(iwm,3,jwa,1)+dfw3
      vpmeb(1)=vpmeb(1)+dfw1*rwx1
      vpmeb(2)=vpmeb(2)+dfw2*rwx1
      vpmeb(3)=vpmeb(3)+dfw3*rwx1
      vpmeb(4)=vpmeb(4)+dfw2*rwx2
      vpmeb(5)=vpmeb(5)+dfw3*rwx2
      vpmeb(6)=vpmeb(6)+dfw3*rwx3
   21 continue
      endif
   10 continue
      do 40 iwh=1,nwh
      iwa=iang(iwh,1)
      jwa=iang(iwh,2)
      kwa=iang(iwh,3)
      angle=ang(iwh,1,iset)
      for=ang(iwh,2,iset)
      rang(iwh,2)=zero
      do 50 iwm=iwfr,iwto
      xwij1=xw(iwm,1,iwa)-xw(iwm,1,jwa)
      xwij2=xw(iwm,2,iwa)-xw(iwm,2,jwa)
      xwij3=xw(iwm,3,iwa)-xw(iwm,3,jwa)
      xwkj1=xw(iwm,1,kwa)-xw(iwm,1,jwa)
      xwkj2=xw(iwm,2,kwa)-xw(iwm,2,jwa)
      xwkj3=xw(iwm,3,kwa)-xw(iwm,3,jwa)
      rwij2=xwij1**2+xwij2**2+xwij3**2
      rwkj2=xwkj1**2+xwkj2**2+xwkj3**2
      rwij2i=one/rwij2
      rwkj2i=one/rwkj2
      rwikji=one/sqrt(rwij2*rwkj2)
      cphi=rwikji*(xwij1*xwkj1+xwij2*xwkj2+xwij3*xwkj3)
      if(cphi.lt.-one) cphi=-one
      if(cphi.gt. one) cphi= one
      phi=acos(cphi)
      dangle=phi-angle
      if(iand(iwdt(iwm),mdynam).eq.ldynam)
     + rang(iwh,2)=rang(iwh,2)+half*for*dangle*dangle
      sphi=sin(phi)
      if(abs(sphi).lt.small) sphi=small
      dfor=for*dangle/sphi
      dfw1=dfor*(xwkj1*rwikji-xwij1*rwij2i*cphi)
      dfw2=dfor*(xwkj2*rwikji-xwij2*rwij2i*cphi)
      dfw3=dfor*(xwkj3*rwikji-xwij3*rwij2i*cphi)
      fw(iwm,1,iwa,1)=fw(iwm,1,iwa,1)+dfw1
      fw(iwm,1,jwa,1)=fw(iwm,1,jwa,1)-dfw1
      fw(iwm,2,iwa,1)=fw(iwm,2,iwa,1)+dfw2
      fw(iwm,2,jwa,1)=fw(iwm,2,jwa,1)-dfw2
      fw(iwm,3,iwa,1)=fw(iwm,3,iwa,1)+dfw3
      fw(iwm,3,jwa,1)=fw(iwm,3,jwa,1)-dfw3
      dfw1=dfor*(xwij1*rwikji-xwkj1*rwkj2i*cphi)
      dfw2=dfor*(xwij2*rwikji-xwkj2*rwkj2i*cphi)
      dfw3=dfor*(xwij3*rwikji-xwkj3*rwkj2i*cphi)
      fw(iwm,1,kwa,1)=fw(iwm,1,kwa,1)+dfw1
      fw(iwm,1,jwa,1)=fw(iwm,1,jwa,1)-dfw1
      fw(iwm,2,kwa,1)=fw(iwm,2,kwa,1)+dfw2
      fw(iwm,2,jwa,1)=fw(iwm,2,jwa,1)-dfw2
      fw(iwm,3,kwa,1)=fw(iwm,3,kwa,1)+dfw3
      fw(iwm,3,jwa,1)=fw(iwm,3,jwa,1)-dfw3
      if(ip2(8))
     + ep2(1)=ep2(1)+half*ang(iwh,2,2)*(phi-ang(iwh,1,2))**2
      if(ip3(8))
     + ep3(1)=ep3(1)+half*ang(iwh,2,3)*(phi-ang(iwh,1,3))**2
      if(ith(8)) then
      deriv(8,1)=deriv(8,1)+
     + dangle*(half*dangle*ang(iwh,2,4)-for*ang(iwh,1,4))
      endif
   50 continue
      eww(2,1)=eww(2,1)+rang(iwh,2)
      if(ip2(8)) ep2(1)=ep2(1)-rang(iwh,2)
      if(ip3(8)) ep3(1)=ep3(1)-rang(iwh,2)
      if(ipme.ne.0) then
      iwa=iang(iwh,1)
      jwa=iang(iwh,3)
      qij=chg(iwq(iwa),1,iset)*chg(iwq(jwa),1,iset)
      do 41 iwm=iwfr,iwto
      rwx1=xw(iwm,1,iwa)-xw(iwm,1,jwa)
      rwx2=xw(iwm,2,iwa)-xw(iwm,2,jwa)
      rwx3=xw(iwm,3,iwa)-xw(iwm,3,jwa)
      rww=sqrt(rwx1**2+rwx2**2+rwx3**2)
      rwi=one/rww
      ferfc=one-erfc(ealpha*rww)
      fderfc=-(ealpha*derfc(ealpha*rww))
      epmecw=epmecw-ferfc*qij*rwi
      eww(9,1)=eww(9,1)-ferfc*qij*rwi
      dfor=-(qij*rwi*rwi*(ferfc*rwi-fderfc))
      dfw1=dfor*rwx1
      dfw2=dfor*rwx2
      dfw3=dfor*rwx3
      fw(iwm,1,iwa,1)=fw(iwm,1,iwa,1)-dfw1
      fw(iwm,1,jwa,1)=fw(iwm,1,jwa,1)+dfw1
      fw(iwm,2,iwa,1)=fw(iwm,2,iwa,1)-dfw2
      fw(iwm,2,jwa,1)=fw(iwm,2,jwa,1)+dfw2
      fw(iwm,3,iwa,1)=fw(iwm,3,iwa,1)-dfw3
      fw(iwm,3,jwa,1)=fw(iwm,3,jwa,1)+dfw3
      vpmeb(1)=vpmeb(1)+dfw1*rwx1
      vpmeb(2)=vpmeb(2)+dfw2*rwx1
      vpmeb(3)=vpmeb(3)+dfw3*rwx1
      vpmeb(4)=vpmeb(4)+dfw2*rwx2
      vpmeb(5)=vpmeb(5)+dfw3*rwx2
      vpmeb(6)=vpmeb(6)+dfw3*rwx3
   41 continue
      endif
   40 continue
      if(iffld.eq.2) then
      do 1140 iwh=1,nwh
      iwa=iang(iwh,1)
      kwa=iang(iwh,3)
      bond=ang(iwb,3,iset)
      for=ang(iwb,4,iset)
      eub=zero
      do 150 iwm=iwfr,iwto
      rwx1=xw(iwm,1,iwa)-xw(iwm,1,kwa)
      rwx2=xw(iwm,2,iwa)-xw(iwm,2,kwa)
      rwx3=xw(iwm,3,iwa)-xw(iwm,3,kwa)
      rww=sqrt(rwx1**2+rwx2**2+rwx3**2)
      if(rww.lt.tiny) then
      rwwi=one
      else
      rwwi=one/rww
      endif
      dbond=rww-bond
      if(iand(iwdt(iwm),mdynam).eq.ldynam)
     + eub=eub+half*for*(rww-bond)**2
      dfor=for*dbond*rwwi
      dfw1=dfor*rwx1
      dfw2=dfor*rwx2
      dfw3=dfor*rwx3
      fw(iwm,1,iwa,1)=fw(iwm,1,iwa,1)-dfw1
      fw(iwm,1,kwa,1)=fw(iwm,1,kwa,1)+dfw1
      fw(iwm,2,iwa,1)=fw(iwm,2,iwa,1)-dfw2
      fw(iwm,2,kwa,1)=fw(iwm,2,kwa,1)+dfw2
      fw(iwm,3,iwa,1)=fw(iwm,3,iwa,1)-dfw3
      fw(iwm,3,kwa,1)=fw(iwm,3,kwa,1)+dfw3
      if(ip2(8))
     + ep2(1)=ep2(1)+half*ang(iwh,4,2)*(rww-ang(iwh,3,2))**2
      if(ip3(8))
     + ep3(1)=ep3(1)+half*ang(iwh,4,3)*(rww-ang(iwh,3,3))**2
      if(ith(8)) then
      deriv(8,1)=deriv(8,1)+
     + dbond*(half*dbond*ang(iwh,4,4)-for*ang(iwh,3,4))
      endif
  150 continue
      rub(iwh,2)=rub(iwh,2)+eub
      eww(13,1)=eww(13,1)+eub
      if(ip2(8)) ep2(1)=ep2(1)-eub
      if(ip3(8)) ep3(1)=ep3(1)-eub
 1140 continue
      endif
      do 70 iwd=1,nwd
      iwa=idih(iwd,1)
      jwa=idih(iwd,2)
      kwa=idih(iwd,3)
      lwa=idih(iwd,4)
      angle=dih(iwd,2,iset)
      for=dih(iwd,3,iset)
      rmul=dih(iwd,1,iset)
      rdih(iwd,2)=zero
      do 80 iwm=iwfr,iwto
      xwij1=xw(iwm,1,iwa)-xw(iwm,1,jwa)
      xwij2=xw(iwm,2,iwa)-xw(iwm,2,jwa)
      xwij3=xw(iwm,3,iwa)-xw(iwm,3,jwa)
      xwkj1=xw(iwm,1,kwa)-xw(iwm,1,jwa)
      xwkj2=xw(iwm,2,kwa)-xw(iwm,2,jwa)
      xwkj3=xw(iwm,3,kwa)-xw(iwm,3,jwa)
      xwkl1=xw(iwm,1,kwa)-xw(iwm,1,lwa)
      xwkl2=xw(iwm,2,kwa)-xw(iwm,2,lwa)
      xwkl3=xw(iwm,3,kwa)-xw(iwm,3,lwa)
      xwik1=xwij1-xwkj1
      xwik2=xwij2-xwkj2
      xwik3=xwij3-xwkj3
      xwjl1=xwkl1-xwkj1
      xwjl2=xwkl2-xwkj2
      xwjl3=xwkl3-xwkj3
      xm1=xwij2*xwkj3-xwkj2*xwij3
      xm2=xwij3*xwkj1-xwkj3*xwij1
      xm3=xwij1*xwkj2-xwkj1*xwij2
      xn1=xwkj2*xwkl3-xwkl2*xwkj3
      xn2=xwkj3*xwkl1-xwkl3*xwkj1
      xn3=xwkj1*xwkl2-xwkl1*xwkj2
      rm2i=one/(xm1**2+xm2**2+xm3**2)
      rn2i=one/(xn1**2+xn2**2+xn3**2)
      rmni=sqrt(rm2i*rn2i)
      cphi=(xm1*xn1+xm2*xn2+xm3*xn3)*rmni
      if(cphi.lt.-one) cphi=-one
      if(cphi.gt. one) cphi= one
      phi=acos(cphi)
      s=xwkj1*(xm2*xn3-xm3*xn2) +xwkj2*(xm3*xn1-xm1*xn3)
     + +xwkj3*(xm1*xn2-xm2*xn1)
      if(s.lt.zero) phi=-phi
      sphi=sin(phi)
      rpa=rmul*phi-angle
      if(iand(iwdt(iwm),mdynam).eq.ldynam)
     + rdih(iwd,2)=rdih(iwd,2)+for*(one+cos(rpa))
      dfor=(-for)*rmul*sin(rpa)
      if(ip2(8)) ep2(1)=ep2(1)+
     + dih(iwd,3,2)*(one+cos(dih(iwd,1,2)*phi-dih(iwd,2,2)))
      if(ip3(8)) ep3(1)=ep3(1)+
     + dih(iwd,3,3)*(one+cos(dih(iwd,1,3)*phi-dih(iwd,2,3)))
      if(abs(sphi).lt.small) sphi=sign(small,sphi)
      sphii=one/sphi
      xd1=(-dfor)*sphii*(rmni*xn1-cphi*rm2i*xm1)
      xe1=(-dfor)*sphii*(rmni*xm1-cphi*rn2i*xn1)
      xd2=(-dfor)*sphii*(rmni*xn2-cphi*rm2i*xm2)
      xe2=(-dfor)*sphii*(rmni*xm2-cphi*rn2i*xn2)
      xd3=(-dfor)*sphii*(rmni*xn3-cphi*rm2i*xm3)
      xe3=(-dfor)*sphii*(rmni*xm3-cphi*rn2i*xn3)
      dfwi1=xwkj2*xd3-xwkj3*xd2
      dfwi2=xwkj3*xd1-xwkj1*xd3
      dfwi3=xwkj1*xd2-xwkj2*xd1
      dfwj1=xwik2*xd3-xwik3*xd2-xwkl2*xe3+xwkl3*xe2
      dfwj2=xwik3*xd1-xwik1*xd3-xwkl3*xe1+xwkl1*xe3
      dfwj3=xwik1*xd2-xwik2*xd1-xwkl1*xe2+xwkl2*xe1
      dfwk1=xwjl2*xe3-xwjl3*xe2-xwij2*xd3+xwij3*xd2
      dfwk2=xwjl3*xe1-xwjl1*xe3-xwij3*xd1+xwij1*xd3
      dfwk3=xwjl1*xe2-xwjl2*xe1-xwij1*xd2+xwij2*xd1
      dfwl1=xwkj2*xe3-xwkj3*xe2
      dfwl2=xwkj3*xe1-xwkj1*xe3
      dfwl3=xwkj1*xe2-xwkj2*xe1
      fw(iwm,1,iwa,1)=fw(iwm,1,iwa,1)-dfwi1
      fw(iwm,2,iwa,1)=fw(iwm,2,iwa,1)-dfwi2
      fw(iwm,3,iwa,1)=fw(iwm,3,iwa,1)-dfwi3
      fw(iwm,1,jwa,1)=fw(iwm,1,jwa,1)-dfwj1
      fw(iwm,2,jwa,1)=fw(iwm,2,jwa,1)-dfwj2
      fw(iwm,3,jwa,1)=fw(iwm,3,jwa,1)-dfwj3
      fw(iwm,1,kwa,1)=fw(iwm,1,kwa,1)-dfwk1
      fw(iwm,2,kwa,1)=fw(iwm,2,kwa,1)-dfwk2
      fw(iwm,3,kwa,1)=fw(iwm,3,kwa,1)-dfwk3
      fw(iwm,1,lwa,1)=fw(iwm,1,lwa,1)-dfwl1
      fw(iwm,2,lwa,1)=fw(iwm,2,lwa,1)-dfwl2
      fw(iwm,3,lwa,1)=fw(iwm,3,lwa,1)-dfwl3
      if(ith(9)) then
      deriv(9,1)=deriv(9,1)+(one+cos(rpa))*dih(iwd,3,4)
     + -for*sin(rpa)*(phi*dih(iwd,1,4)-dih(iwd,2,4))
      endif
   80 continue
      eww(3,1)=eww(3,1)+rdih(iwd,2)
      if(ip2(8)) ep2(1)=ep2(1)-rdih(iwd,2)
      if(ip3(8)) ep3(1)=ep3(1)-rdih(iwd,2)
   70 continue
      do 90 iwo=1,nwo
      iwa=iimp(iwo,1)
      jwa=iimp(iwo,2)
      kwa=iimp(iwo,3)
      lwa=iimp(iwo,4)
      angle=dimp(iwo,2,iset)
      for=dimp(iwo,3,iset)
      rimp(iwo,2)=zero
      do 100 iwm=iwfr,iwto
      xwij1=xw(iwm,1,iwa)-xw(iwm,1,jwa)
      xwij2=xw(iwm,2,iwa)-xw(iwm,2,jwa)
      xwij3=xw(iwm,3,iwa)-xw(iwm,3,jwa)
      xwkj1=xw(iwm,1,kwa)-xw(iwm,1,jwa)
      xwkj2=xw(iwm,2,kwa)-xw(iwm,2,jwa)
      xwkj3=xw(iwm,3,kwa)-xw(iwm,3,jwa)
      xwkl1=xw(iwm,1,kwa)-xw(iwm,1,lwa)
      xwkl2=xw(iwm,2,kwa)-xw(iwm,2,lwa)
      xwkl3=xw(iwm,3,kwa)-xw(iwm,3,lwa)
      xwik1=xwij1-xwkj1
      xwik2=xwij2-xwkj2
      xwik3=xwij3-xwkj3
      xwjl1=xwkl1-xwkj1
      xwjl2=xwkl2-xwkj2
      xwjl3=xwkl3-xwkj3
      xm1=xwij2*xwkj3-xwkj2*xwij3
      xm2=xwij3*xwkj1-xwkj3*xwij1
      xm3=xwij1*xwkj2-xwkj1*xwij2
      xn1=xwkj2*xwkl3-xwkl2*xwkj3
      xn2=xwkj3*xwkl1-xwkl3*xwkj1
      xn3=xwkj1*xwkl2-xwkl1*xwkj2
      rm2i=one/(xm1**2+xm2**2+xm3**2)
      rn2i=one/(xn1**2+xn2**2+xn3**2)
      rmni=sqrt(rm2i*rn2i)
      cphi=(xm1*xn1+xm2*xn2+xm3*xn3)
      if(cphi.lt.-one) cphi=-one
      if(cphi.gt. one) cphi= one
      phi=acos(cphi)
      s=xwkj1*(xm2*xn3-xm3*xn2) +xwkj2*(xm3*xn1-xm1*xn3)
     + +xwkj3*(xm1*xn2-xm2*xn1)
      if(s.lt.zero) phi=-phi
      sphi=sin(phi)
      dangle=(phi-angle)-nint((phi-angle)/twopi)*twopi
      dfor=for*dangle
      if(iand(iwdt(iwm),mdynam).eq.ldynam) rimp(iwo,2)=half*dfor*dangle
      if(ip2(9)) then
      danglep=(phi-dimp(iwo,2,2))-nint((phi-dimp(iwo,2,2))/twopi)*twopi
      ep2(1)=ep2(1)+half*dimp(iwo,3,2)*danglep**2
      endif
      if(ip3(9)) then
      danglep=(phi-dimp(iwo,2,3))-nint((phi-dimp(iwo,2,3))/twopi)*twopi
      ep3(1)=ep3(1)+half*dimp(iwo,3,3)*danglep**2
      endif
      if(abs(sphi).lt.small) sphi=sign(small,sphi)
      sphii=one/sphi
      xd1=(-dfor)*sphii*(rmni*xn1-cphi*rm2i*xm1)
      xe1=(-dfor)*sphii*(rmni*xm1-cphi*rn2i*xn1)
      xd2=(-dfor)*sphii*(rmni*xn2-cphi*rm2i*xm2)
      xe2=(-dfor)*sphii*(rmni*xm2-cphi*rn2i*xn2)
      xd3=(-dfor)*sphii*(rmni*xn3-cphi*rm2i*xm3)
      xe3=(-dfor)*sphii*(rmni*xm3-cphi*rn2i*xn3)
      dfwi1=xwkj2*xd3-xwkj3*xd2
      dfwi2=xwkj3*xd1-xwkj1*xd3
      dfwi3=xwkj1*xd2-xwkj2*xd1
      dfwj1=xwik2*xd3-xwik3*xd2-xwkl2*xe3+xwkl3*xe2
      dfwj2=xwik3*xd1-xwik1*xd3-xwkl3*xe1+xwkl1*xe3
      dfwj3=xwik1*xd2-xwik2*xd1-xwkl1*xe2+xwkl2*xe1
      dfwk1=xwjl2*xe3-xwjl3*xe2-xwij2*xd3+xwij3*xd2
      dfwk2=xwjl3*xe1-xwjl1*xe3-xwij3*xd1+xwij1*xd3
      dfwk3=xwjl1*xe2-xwjl2*xe1-xwij1*xd2+xwij2*xd1
      dfwl1=xwkj2*xe3-xwkj3*xe2
      dfwl2=xwkj3*xe1-xwkj1*xe3
      dfwl3=xwkj1*xe2-xwkj2*xe1
      fw(iwm,1,iwa,1)=fw(iwm,1,iwa,1)-dfwi1
      fw(iwm,2,iwa,1)=fw(iwm,2,iwa,1)-dfwi2
      fw(iwm,3,iwa,1)=fw(iwm,3,iwa,1)-dfwi3
      fw(iwm,1,jwa,1)=fw(iwm,1,jwa,1)-dfwj1
      fw(iwm,2,jwa,1)=fw(iwm,2,jwa,1)-dfwj2
      fw(iwm,3,jwa,1)=fw(iwm,3,jwa,1)-dfwj3
      fw(iwm,1,kwa,1)=fw(iwm,1,kwa,1)-dfwk1
      fw(iwm,2,kwa,1)=fw(iwm,2,kwa,1)-dfwk2
      fw(iwm,3,kwa,1)=fw(iwm,3,kwa,1)-dfwk3
      fw(iwm,1,lwa,1)=fw(iwm,1,lwa,1)-dfwl1
      fw(iwm,2,lwa,1)=fw(iwm,2,lwa,1)-dfwl2
      fw(iwm,3,lwa,1)=fw(iwm,3,lwa,1)-dfwl3
      if(ith(10)) then
      deriv(10,1)=deriv(10,1)+
     + dangle*(half*dangle*dimp(iwo,3,4)-for*dimp(iwo,2,4))
      endif
  100 continue
      eww(4,1)=eww(4,1)+rimp(iwo,2)
      if(ip2(9)) ep2(1)=ep2(1)-rimp(iwo,2)
      if(ip3(9)) ep3(1)=ep3(1)-rimp(iwo,2)
   90 continue
      c6p1=zero
      c12p1=zero
      c6p2=zero
      c12p2=zero
      qip1=zero
      qjp1=zero
      qip2=zero
      qjp2=zero
      do 110 iwt=1,nwt
      iwa=idwt(iwt,1)
      jwa=idwt(iwt,2)
      c6=vdw(iwatm(iwa),iwatm(jwa),2,iset)
      c12=vdw(iwatm(iwa),iwatm(jwa),4,iset)
      if(ip2(2)) then
      c6p1=vdw(iwatm(iwa),iwatm(jwa),2,2)
      c12p1=vdw(iwatm(iwa),iwatm(jwa),4,2)
      endif
      if(ip3(2)) then
      c6p2=vdw(iwatm(iwa),iwatm(jwa),2,3)
      c12p2=vdw(iwatm(iwa),iwatm(jwa),4,3)
      endif
      if(ith(2).or.ith(4)) then
      c6t=vdw(iwatm(iwa),iwatm(jwa),2,4)
      c12t=vdw(iwatm(iwa),iwatm(jwa),4,4)
      qit=chg(iwq(iwa),1,4)*q14fac
      qjt=chg(iwq(jwa),1,4)
      endif
      cf6=six*c6
      cf12=twelve*c12
      qi=chg(iwq(iwa),1,iset)*q14fac
      qj=chg(iwq(jwa),1,iset)
      q=qi*qj
      if(ip2(4)) then
      qip1=chg(iwq(iwa),1,2)*q14fac
      qjp1=chg(iwq(jwa),1,2)
      qp1=qip1*qjp1
      endif
      if(ip3(4)) then
      qip2=chg(iwq(iwa),1,3)*q14fac
      qjp2=chg(iwq(jwa),1,3)
      qp2=qip2*qjp2
      endif
      ep2l=zero
      ep3l=zero
      ep2q=zero
      ep3q=zero
      do 120 iwm=iwfr,iwto
      rxx=xw(iwm,1,iwa)-xw(iwm,1,jwa)
      rxy=xw(iwm,2,iwa)-xw(iwm,2,jwa)
      rxz=xw(iwm,3,iwa)-xw(iwm,3,jwa)
      r2=rxx*rxx+rxy*rxy+rxz*rxz
      r2i=one/r2
      r1i=sqrt(r2i)
      r6i=r2i*r2i*r2i
      eterml=(c12*r6i-c6)*r6i
      etermq=q*r1i
      if(iand(iwdt(iwm),mdynam).eq.ldynam) eww(5,1)=eww(5,1)+eterml
      if(iand(iwdt(iwm),mdynam).eq.ldynam) eww(6,1)=eww(6,1)+etermq
      if(ip2(2)) ep2l=ep2l-eterml+(c12p1*r6i-c6p1)*r6i
      if(ip3(2)) ep3l=ep3l-eterml+(c12p2*r6i-c6p2)*r6i
      if(ip2(4)) ep2q=ep2q-etermq+qp1*r1i
      if(ip3(4)) ep3q=ep3q-etermq+qp2*r1i
      dfw=((cf12*r6i-cf6)*r6i+q*r1i)*r2i
      fw(iwm,1,iwa,1)=fw(iwm,1,iwa,1)+dfw*rxx
      fw(iwm,2,iwa,1)=fw(iwm,2,iwa,1)+dfw*rxy
      fw(iwm,3,iwa,1)=fw(iwm,3,iwa,1)+dfw*rxz
      fw(iwm,1,jwa,1)=fw(iwm,1,jwa,1)-dfw*rxx
      fw(iwm,2,jwa,1)=fw(iwm,2,jwa,1)-dfw*rxy
      fw(iwm,3,jwa,1)=fw(iwm,3,jwa,1)-dfw*rxz
      if(ith(2)) then
      deriv(2,1)=deriv(2,1)+(c12t*r6i-c6t)*r6i
      endif
      if(ith(4)) then
      deriv(4,1)=deriv(4,1)+(qi*qjt+qj*qit)*r1i
      endif
  120 continue
      ep2(1)=ep2(1)+ep2l+ep2q
      ep3(1)=ep3(1)+ep3l+ep3q
      if(ipme.ne.0) then
      qij=(one-q14fac)*chg(iwq(iwa),1,iset)*chg(iwq(jwa),1,iset)
      do 111 iwm=iwfr,iwto
      rwx1=xw(iwm,1,iwa)-xw(iwm,1,jwa)
      rwx2=xw(iwm,2,iwa)-xw(iwm,2,jwa)
      rwx3=xw(iwm,3,iwa)-xw(iwm,3,jwa)
      rww=sqrt(rwx1**2+rwx2**2+rwx3**2)
      rwi=one/rww
      ferfc=one-erfc(ealpha*rww)
      fderfc=-(ealpha*derfc(ealpha*rww))
      epmecw=epmecw-ferfc*qij*rwi
      eww(6,1)=eww(6,1)-ferfc*qij*rwi
      dfor=-(qij*rwi*rwi*(ferfc*rwi-fderfc))
      dfw1=dfor*rwx1
      dfw2=dfor*rwx2
      dfw3=dfor*rwx3
      fw(iwm,1,iwa,1)=fw(iwm,1,iwa,1)-dfw1
      fw(iwm,1,jwa,1)=fw(iwm,1,jwa,1)+dfw1
      fw(iwm,2,iwa,1)=fw(iwm,2,iwa,1)-dfw2
      fw(iwm,2,jwa,1)=fw(iwm,2,jwa,1)+dfw2
      fw(iwm,3,iwa,1)=fw(iwm,3,iwa,1)-dfw3
      fw(iwm,3,jwa,1)=fw(iwm,3,jwa,1)+dfw3
      vpmeb(1)=vpmeb(1)+dfw1*rwx1
      vpmeb(2)=vpmeb(2)+dfw2*rwx1
      vpmeb(3)=vpmeb(3)+dfw3*rwx1
      vpmeb(4)=vpmeb(4)+dfw2*rwx2
      vpmeb(5)=vpmeb(5)+dfw3*rwx2
      vpmeb(6)=vpmeb(6)+dfw3*rwx3
  111 continue
      endif
  110 continue
      do 130 iwn=1,nwn
      iwa=idwn(iwn,1)
      jwa=idwn(iwn,2)
      c6=vdw(iwatm(iwa),iwatm(jwa),1,iset)
      c12=vdw(iwatm(iwa),iwatm(jwa),3,iset)
      if(ip2(2)) then
      c6p1=vdw(iwatm(iwa),iwatm(jwa),1,2)
      c12p1=vdw(iwatm(iwa),iwatm(jwa),3,2)
      endif
      if(ip3(2)) then
      c6p2=vdw(iwatm(iwa),iwatm(jwa),1,3)
      c12p2=vdw(iwatm(iwa),iwatm(jwa),3,3)
      endif
      if(ith(2).or.ith(4)) then
      c6t=vdw(iwatm(iwa),iwatm(jwa),1,4)
      c12t=vdw(iwatm(iwa),iwatm(jwa),3,4)
      qit=chg(iwq(iwa),1,4)
      qjt=chg(iwq(jwa),1,4)
      endif
      cf6=six*c6
      cf12=twelve*c12
      qi=chg(iwq(iwa),1,iset)
      qj=chg(iwq(jwa),1,iset)
      q=qi*qj
      if(ip2(4)) then
      qip1=chg(iwq(iwa),1,2)
      qjp1=chg(iwq(jwa),1,2)
      qp1=qip1*qjp1
      endif
      if(ip3(4)) then
      qip2=chg(iwq(iwa),1,3)
      qjp2=chg(iwq(jwa),1,3)
      qp2=qip2*qjp2
      endif
      ep2l=zero
      ep3l=zero
      ep2q=zero
      ep3q=zero
      do 140 iwm=iwfr,iwto
      rxx=xw(iwm,1,iwa)-xw(iwm,1,jwa)
      rxy=xw(iwm,2,iwa)-xw(iwm,2,jwa)
      rxz=xw(iwm,3,iwa)-xw(iwm,3,jwa)
      r2=rxx*rxx+rxy*rxy+rxz*rxz
      r2i=one/r2
      r1i=sqrt(r2i)
      r6i=r2i*r2i*r2i
      ferfc=one
      fderfc=zero
      if(ipme.ne.0) then
      ferfc=erfc(ealpha/r1i)
      fderfc=ealpha+derfc(ealpha/r1i)
      endif
      eterml=(c12*r6i-c6)*r6i
      etermq=ferfc*q*r1i
      if(iand(iwdt(iwm),mdynam).eq.ldynam) then
      eww(5,1)=eww(5,1)+eterml
      eww(6,1)=eww(6,1)+etermq
      endif
      if(ip2(2)) ep2l=ep2l-eterml+(c12p1*r6i-c6p1)*r6i
      if(ip3(2)) ep3l=ep3l-eterml+(c12p2*r6i-c6p2)*r6i
      if(ip2(4)) ep2q=ep2q-etermq+qp1*r1i
      if(ip3(4)) ep3q=ep3q-etermq+qp2*r1i
      dfw=((cf12*r6i-cf6)*r6i+q*(ferfc*r1i-fderfc))*r2i
      fw(iwm,1,iwa,1)=fw(iwm,1,iwa,1)+dfw*rxx
      fw(iwm,2,iwa,1)=fw(iwm,2,iwa,1)+dfw*rxy
      fw(iwm,3,iwa,1)=fw(iwm,3,iwa,1)+dfw*rxz
      fw(iwm,1,jwa,1)=fw(iwm,1,jwa,1)-dfw*rxx
      fw(iwm,2,jwa,1)=fw(iwm,2,jwa,1)-dfw*rxy
      fw(iwm,3,jwa,1)=fw(iwm,3,jwa,1)-dfw*rxz
      if(ith(2)) deriv(2,1)=deriv(2,1)+(c12t*r6i-c6t)*r6i
      if(ith(4)) deriv(4,1)=deriv(4,1)+(qi*qjt+qj*qit)*r1i
  140 continue
      ep2(1)=ep2(1)+ep2l+ep2q
      ep3(1)=ep3(1)+ep3l+ep3q
  130 continue
c
#endif
      return
      end
